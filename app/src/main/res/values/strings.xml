<resources>
    <string name="app_name">Care_Prototype_01</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="codey_image">codey_image</string>
    <string name="java_button">java_button</string>
    <string name="c_button">c_button</string>
    <string name="python_button">python_button</string>
    <!-- Strings used for fragments for navigation -->

    <string name="javaintro">Let’s begin the introduction of Java. I’m so excited to learn this, come and join with me!</string>


    <string name="java_advantages">• Java works on different operating platforms.(Windows, Mac, Linux, Raspberry Pi, etc.)
    \n\n• Java is one of the most popular programming languages in the world.
    \n\n• Java is open-source, free, simple, and easy to learn and use, allowing everyone to enjoy developing their own software.
    \n\n• Java has a large demand for jobs in the current market.
</string>


    <string name="_1_introduction">1.Introduction</string>
    <string name="_2_syntax">2.Syntax</string>
    <string name="_3_comments">3.Comments</string>
    <string name="_4_variables">4.Variables</string>
    <string name="_5_inputs">5.Inputs</string>
    <string name="_6_data_types">6.Data Types</string>
    <string name="_7_operators">7.Operators</string>
    <string name="_8_conditional_statements">8.Conditional Statements</string>
    <string name="_9_looping_statements">9.Looping Statements</string>
    <string name="_10_arrays">10.Arrays</string>
    <string name="introductions">Introduction</string>
    <string name="codey_s_trivia_sentence">Codey\'s Trivia Sentence</string>
    <string name="let_s_start_the_introduction_of_java_lesson_feel_free_to_ask_questions_or_request_clarification_at_the_end_of_the_discussion">Let’s start the Introduction of Java lesson. Feel free to ask questions or request clarification at the end of the discussion!</string>
    <string name="java">JAVA</string>
    <string name="here_s_a_quick_overview_of_some_key_concepts_in_java">Here\'s a quick overview of some key concepts in Java:</string>
    <string name="IntroBullet_1"><b>•Platform Independence:</b> Java is a write once, run anywhere language. This means that once you write a Java program, you can run it on any platform that has a Java Virtual Machine (JVM). The JVM acts as an interpreter, allowing the Java code to be executed on different operating systems.</string>
    <string name="IntroBullet_2"><b>•Object-Oriented Programming:</b> Java is an object-oriented programming (OOP) language. This means that it revolves around the concept of objects, which are instances of classes. Objects have attributes (variables) and behavior (methods), and they interact with each other through method calls.</string>
    <string name="IntroBullet_3"><b>•Syntax:</b> Java has a syntax similar to other programming languages like C and C++. It uses semicolons to end statements and curly braces to define code blocks. The code is organized into classes, and each class can have methods and variables.</string>
    <string name="IntroBullet_4"><b>•Garbage Collection:</b> Java has automatic memory management through a process called garbage collection. It takes care of allocating and deallocating memory for objects, so developers don\'t have to explicitly manage memory resources. This helps in preventing memory leaks and makes Java programs more robust.</string>
    <string name="IntroBullet_5"><b>•Standard Library:</b> Java provides a rich set of libraries and APIs (Application Programming Interfaces) that simplify common programming tasks. These libraries cover areas such as input/output, networking, data structures, graphics, and more. They save developers time and effort by providing pre-built functionality.</string>
    <string name="IntroBullet_6"><b>•Exception Handling:</b> Java has a built-in exception handling mechanism that allows you to catch and handle errors and exceptional situations in your code. This helps in writing more reliable and robust programs by gracefully handling unexpected situations.</string>
    <string name="questions_you_might_asked">Questions you might asked.</string>
    <string name="is_java_a_programming_or_scripting_language">Is Java a programming or scripting language?</string>
    <string name="what_makes_java_so_unique">What makes Java so unique?</string>
    <string name="what_makes_java_different_to_other_languages">What makes JAVA different to other languages?</string>


    <string name="Variables"><b>String</b> - stores text, such as "HelloWorld". Double quotes are used to enclose string values.\n<b>Ex. String myText = "Hello";\n\n</b><b>int</b> - stores integers or whole numbers, without decimals, such as 246 or -246.\n<b>Ex.<b>int</b> myNum = 5;\n</b>\n<b>float</b> - stores floating point numbers, with decimals, such as 3.99 or -3.99.\n<b>Ex. float myFloatNum = 5.99f;\n\n</b><b>char</b> - stores single characters, such as \'a\' or \'B\'. Single quotes are used to enclose char values.\n<b>Ex char myLetter = \'D\';\n\n</b><b>boolean</b> - stores values with two states: true or false.\n<b>Ex. boolean myBoolean = true;</b></string>
    <string name="variables">Variables</string>
    <string name="variables_1">Variables</string>
    <string name="variable_types">Variable Types:</string>
    <string name="a_variable_is_a_named_storage_location_that_holds_a_value_of_a_particular_type_it_allows_you_to_store_and_manipulate_data_within_a_program_before_using_a_variable_you_need_to_declare_it_specifying_its_type_and_name">A variable is a named storage location that holds a value of a particular type. It allows you to store and manipulate data within a program. Before using a variable, you need to declare it, specifying its type and name.</string>
    <string name="refers_to_the_process_of_accepting_data_or_information_from_a_user_during_the_execution_of_a_java_program_it_allows_users_to_interact_with_a_program">refers to the process of accepting data or information from a user during the execution of a Java program. It allows users to interact with a program.</string>
    <string name="the_java_util_package_contains_the_scanner_class_which_is_used_to_gather_user_input">The java.util package contains the Scanner class, which is used to gather user input.</string>
    <string name="you_can_utilize_any_of_the_various_methods_listed_in_the_scanner_class_documentation_by_creating_an_object_of_the_class_and_using_it_the_nextline_method_which_is_used_to_read_strings_will_be_utilized_in_our_example">You can utilize any of the various methods listed in the Scanner class documentation by creating an object of the class and using it. The nextLine() method, which is used to read strings, will be utilized in our example:</string>
    <string name="java_user_input">Java User Input</string>
    <string name="let_s_start_the_inputs_of_java_lesson">Let\'s start the Inputs of Java lesson.</string>
    <string name="inputs">Inputs</string>
    <string name="welcome_to_care_i_m_codey_your_virtual_assistant_app_guide">Welcome to CARE! I\'m Codey, your virtual assistant app guide!</string>
    <string name="to_continue_kindly_choose_your_desired_programming_language_that_you_want_to_learn_and_let_s_get_started">To continue, kindly choose your desired programming language that you want to learn and let\'s get started!</string>

    <string name="Scanner">import java.util.Scanner; // import the Scanner class\n\n
                            class Main {\n
                              \tpublic static void main(String[] args) {\n
                                \t\tScanner myObj = new Scanner(System.in);\n
                                \t\tString userName;\n\n

                                \t\t// Enter username and press Enter\n
                                \t\tSystem.out.println("Enter username");\n
                                \t\tuserName = myObj.nextLine();\n\n

                                \t\tSystem.out.println("Username is: " + userName);\n
                              }\n
                            }
</string>
    <string name="input_methods">
        Method				\t\t\t\t\t\t\tDescription\n\n

        nextBoolean()	    \tReads a boolean value from the user\n
        nextByte()	        \t\t\t\tReads a byte value from the user\n
        nextDouble()	    \t\t\tReads a double value from the user\n
        nextFloat()	        \t\t\tReads a float value from the user\n
        nextInt()	        \t\t\tReads a int value from the user\n
        nextLine()	        \t\t\tReads a String value from the user\n
        nextLong()	        \t\t\tReads a long value from the user\n
        nextShort()	        \t\t\tReads a short value from the user\n

    </string>
    <string name="the_nextline_method_which_is_used_to_read_strings_was_utilized_in_the_example_above_look_at_the_table_below_these_are_other_types_of_inputs_to_read">The nextLine() method, which is used to read strings, was utilized in the example above. Look at the table below; these are other types of inputs to read.</string>
    <string name="SetGuideline">Let’s now start studying the different syntax inside Java!</string>
    <string name="syntaxtIntro">The set of guidelines governing the creation and interpretation of a Java program is known as the Java syntax. When creating a Java program, take into consideration that every code has its own identifier and no one can make its own syntax code.</string>
    <string name="identifier">Identifier</string>
    <string name="identifierDefinition">An identifier is the name of an element in the code. There are certain standard naming conventions to follow when selecting names for elements.</string>
    <string name="dyk">Did you know?</string>
    <string name="TypesOfIdentifier">These are some of the identifiers in Java:</string>
    <string name="TypesOFIdentifier"><b>Class Identifiers:\n</b>
                                        class Car {\n \t// class body\n}\n\n<b>Constant Identifiers (Final Variables):</b>\nfinal int MAX_VALUE = 100;\nfinal double PI = 3.14159;\n\n<b>Object Identifiers:</b>
                                        \nCar myCar = new Car();\n\n<b>Parameter Identifiers:</b>
                                        \npublic void printName(String name) {\n \t// method body\n}\n\n<b>Package Identifiers:</b>
                                        \npackage com.example.mypackage;\n\n<b>Enum Identifiers:</b>
                                        \nenum DayOfWeek {\n MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY \n}
    </string>
    <string name="firstjavaprogram">public class Main {\n
                                  \tpublic static void main(String[] args) {\n
                                    \t\tSystem.out.println("Hello World");\n
                                  \t}\n
                                }
</string>
    <string name="SynExplainMethods"><b>class method</b> - A class is a blueprint for creating objects. It defines the properties and behaviors that an object of that class will possess. Each program must have a class name and should always start with an uppercase first letter and must match the file name of the program.
        \n<b>main method</b> - Each program processing starts from the main() method which is a mandatory part of every Java program. All method names should start with a lowercase letter. If several words are used to form the name of the method, then each inner word’s first letter should be in uppercase.
        \n<b>System.out.println</b> - It is use to print and display an output to the user.
</string>
    <string name="now_why_don_t_we_create_our_first_java_program_shall_we_i_ll_explain_further_the_meaning_of_each_code">Now, why don’t we create our first Java program, shall we? I’ll explain further the meaning of each code.</string>
    <string name="guess_right">Now let’s print the output of the program! I’m very excited to see the result, did you guessed it right?</string>
    <string name="answer">Answer</string>
    <string name="SyntaxSystem"><b>System</b> is a built-in Java class that contains useful members, such as out, which is short for \"output\". The println() method, short for \"print line\", is used to print a value to the screen (or a file).\nLastly, each code statement must end with a semicolon (;).</string>
    <string name="great_you_guessed_it_right_the_output_to_the_code_is_hello_world_it_s_fun_learning_java_isn_t_it_let_s_keep_learning">Great! You guessed it right! The output to the code is “Hello World”. It’s fun learning Java, isn’t it? Let’s keep learning!</string>
    <string name="always_remember_that_the_curly_braces_marks_the_beginning_and_the_end_of_a_block_of_code">Always remember that the curly braces {} marks the beginning and the end of a block of code.</string>
    <string name="what_will_happen_if_i_declare_two_variables_with_same_spelling_but_different_values">What will happen if I declare two variables with same spelling but different values?</string>
    <string name="can_i_make_a_program_without_using_an_identifier">Can I make a program without using an identifier?</string>
    <string name="what_is_the_difference_of_identifier_to_keyword">What is the difference of identifier to keyword?</string>
    <string name="javadoc">* Calculates and returns the square of a given number. \n* \n* @param number the input number \n* @return the square of the number \n* @throws IllegalArgumentException if the number is negative \n*/ \npublic int calculateNum(int digit) { \n\tif (digit != 0) { \n\t\tthrow new IllegalArgumentException(\"Error! Number must be equal to 0\"); \n\t}\n return number * number; \n}</string>
    <string name="javaintrodullets">• Java works on different operating platforms. (Windows, Mac, Linux, Raspberry Pi, etc.) \n• Java is one of the most popular programming languages in the world. \n• Java is open-source, free, simple, and easy to learn and use that everyone can enjoy developing their own software. \n• Java has a large demand of jobs in the current market.</string>
    <string name="have_you_ever_wonder_if_you_can_put_a_text_in_java_that_looks_like_a_note_to_identify_what_kind_of_code_is_it_without_being_interpreted_by_the_compiler_worry_no_more_because_i_introduce_to_you_the_java_comments_let_s_see_what_we_ve_got_here">Have you ever wonder if you can put a text in Java that looks like a note to identify what kind of code is it without being interpreted by the compiler? Worry no more because I introduce to you the Java Comments! Let’s see what we’ve got here!</string>
    <string name="in_java_comments_are_non_executable_lines_of_code_that_provide_explanations_annotations_or_disable_codes_temporarily_they_are_essential_for_code_documentation_readability_and_collaboration_there_are_three_types_of_comments_in_java_single_line_comments_multi_line_comments_and_javadoc_comments">In Java, comments are non-executable lines of code that provide explanations, annotations, or disable codes temporarily. They are essential for code documentation, readability, and collaboration. There are three types of comments in Java: single-line comments, multi-line comments, and Javadoc comments.</string>
    <string name="single_line_comments">Single-Line Comments</string>
    <string name="here_is_an_example_of_a_single_line_comment">Here is an example of a single-line comment:</string>
    <string name="this_comment_just_has_one_line">//This comment just has one line.</string>
    <string name="multi_line_comments">Multi-Line Comments</string>
    <string name="javadoc_comments">Javadoc comments</string>
    <string name="a_single_line_of_code_can_be_transformed_into_a_comment_to_provide_a_brief_explanation_it_is_considered_a_comment_and_will_not_be_processed_if_text_is_added_to_a_line_after">A single line of code can be transformed into a comment to provide a brief explanation. It is considered a comment and will not be processed if text is added to a line after //.</string>
    <string name="a_multi_line_comments_can_occupy_at_least_2_lines_of_code_and_more_that_depends_to_the_preference_of_the_programmer_or_developer_it_can_also_disregard_codes_and_transform_into_comments_by_clicking_ctrl_on_the_keyboard_and_simultaneously">A multi-line comments can occupy at least 2 lines of code and more that depends to the preference of the programmer or developer. It can also disregard codes and transform into comments by clicking “ctrl” on the keyboard and “/” simultaneously.</string>
    <string name="here_is_an_example_of_a_multi_line_comment">Here is an example of a multi-line comment:</string>
    <string name="javadoc_comments_usually_begin_with_and_end_with_and_can_include_various_tags_and_annotations_that_provides_detailed_information_about_the_documented_elements">Javadoc comments usually begin with “/**” and end with “*/” and can include various tags and annotations that provides detailed information about the documented elements.</string>
    <string name="this_comment_consists_of_several_lines_it_may_vary_according_to_the_preference_of_the_developer">/* This comment consists of several lines. It may vary according to the preference of the developer. */</string>
    <string name="a_javadoc_comments_are_special_type_of_comments_that_is_used_in_java_to_generate_automatic_documentation_it_is_usually_written_in_a_specific_format_that_can_be_used_to_document_program_elements_such_as_classes_interfaces_methods_fields_etc_this_is_then_processed_by_the_javadoc_tool_which_later_on_creates_html_based_documentation_files">A Javadoc comments are special type of comments that is used in Java to generate automatic documentation. It is usually written in a specific format that can be used to document program elements such as classes, interfaces, methods, fields, etc. This is then processed by the Javadoc tool, which later on creates HTML-based documentation files.</string>
    <string name="here_is_an_example_of_a_javadoc_comment">Here is an example of a javadoc comment:</string>
    <string name="always_remember_that_it_is_a_good_practice_to_include_comments_in_the_code_to_improve_its_readability_and_maintainability_as_well_as_easily_identify_the_errors_when_the_program_stops_producing_output_and_needs_to_be_debug_by_the_developer">Always remember that it is a good practice to include comments in the code to improve its readability and maintainability as well as easily identify the errors when the program stops producing output and needs to be debug by the developer!</string>
    <string name="what_is_the_purpose_of_comments_in_java">What is the purpose of comments in Java?</string>
    <string name="what_is_the_difference_of_a_single_line_vs_multi_line_comment">What is the difference of a single-line vs multi-line comment?</string>
    <string name="can_comments_slow_down_a_program_s_execution">Can comments slow down a program’s execution?</string>
    <string name="operators"><b>Comparison operators:</b>\n
•	Less than:   \u003c \n
•	Less than or equal to:   \u003c= \n
•	Greater than: > \n
•	Greater than or equal to: >= \n
•	Equal to:  == \n
•	Not Equal to:  != \n
\n
<b>Logical operators:</b>\n
•	logical AND: &amp;&amp;\n
•	logical OR: ||\n
•	logical NOT: !\n
</string>
    <string name="followingcondition">•	Use <b>if</b> to specify a block of code to be executed, if a specified condition is true\n
•	Use <b>else</b> to specify a block of code to be executed, if the same condition is false\n
•	Use <b>else if</b> to specify a new condition to test, if the first condition is false\n
•	Use <b>Nested if</b> statements to specify multiple conditions and control the flow of your program.\n
</string>
    <string name="if_simple"> <b>Here\'s the basic syntax:</b>\n

if (condition) {\n
  \t// block of code to be executed if the condition is true\n
}
        </string>
    <string name="ifexample1"><b><i>Here\'s and example for if statements:</i></b>\nif (20 > 18) {\n\tSystem.out.println("20 is greater than 18");\n}\n\n<b>Output:</b>\n20 is greater than 18\n\n<b>Example explained</b>\nIn the example above, we test two values to find out if 20 is greater than 18. If the condition is true, print some text.\n\n<b>We can also test variables:</b>\n<b>Example:</b>\nint x = 20;\nint y = 18;\nif (x > y) {\n\tSystem.out.println("x is greater than y");\n}\n\n<b>Output:</b>\nx is greater than y\n\n<b>Example explained</b>\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that "x is greater than y".
</string>
    <string name="elseExample"><b>Here\&#39;s the basic syntax:</b>
        \nif (condition) { \n
        \t// block of code to be executed if the condition is true \n
        } else { \n
        \t// block of code to be executed if the condition is false \n
        } \n\n
        <i>it is a construct that enables you to specify what should happen when the condition of the if statement is false.</i> \n\n
        <b>Example:</b> \n
        int x = 5; \n
        if (x &gt; 0) {\n
        \tSystem.out.println(\&quot;x is positive\&quot;); \n
        } else { \n
        \tSystem.out.println(\&quot;x is not positive\&quot;); \n} \n\n
        <b>Output:</b> \n
        x is positive \n\n
        <b>Example explained:</b> \n
        In this example, if the condition x &gt; 0 is true, \&quot;x is positive\&quot; is printed. Otherwise, \&quot;x is not positive\&quot; is printed.</string>
    <string name="elseif"><b>Here\&#39;s the basic syntax:</b> \nif (condition1) { \n
        \t// block of code to be executed if condition1 is true \n
        } else if (condition2) { \n
        \t// block of code to be executed if the condition1 is false and condition2 is true \n
        } else { \n
        \t// block of code to be executed if the condition1 is false and condition2 is false \n
        } \n\n
        <i>You can have multiple else if statements to check additional conditions in a sequential manner.</i> \n\n
        <b>Example:</b> \n
        int x = 5; \n
        if (x &gt; 0) { \n
        \tSystem.out.println(\&quot;x is positive\&quot;); \n
        } else if (x &lt; 0) { \n
        \tSystem.out.println(\&quot;x is negative\&quot;); \n
        } else { \n
        \tSystem.out.println(\&quot;x is zero\&quot;); \n
        } \n\n
        <b>Output:</b> \n
        x is positive \n\n
        <b>Example explained:</b> \n
        In this example, if x is greater than 0, \&quot;x is positive\&quot; is printed. If x is less than 0, \&quot;x is negative\&quot; is printed. Otherwise, \&quot;x is zero\&quot; is printed.</string>
    <string name="nestedif"><b>Here\&#39;s the basic syntax:</b> \n
        if (condition1) { \n
        \t// code to execute if condition1 is true \n
        \tif (condition2) { \n
        \t// code to execute if both condition1 and condition2 are true \n
        } else { \n
        \t// code to execute if condition1 is true but condition2 is false } \n
        } else { \n
        \t// code to execute if condition1 is false \n
        } \n\n<i>It allows you to create more complex conditional structures by checking multiple conditions and executing different blocks of code based on those conditions.</i> \n\n
        <b>Example:</b> \n
        int age = 20; \n
        boolean hasLicense = true; \n
        if (age &gt;= 18) { \n
        \tSystem.out.println(\&quot;You are eligible to apply for a driving license.\&quot;); \n
        \t\tif (hasLicense) { \n
        \t\t\tSystem.out.println(\&quot;You already have a driving license.\&quot;); \n
        \t\t} else { \n
        \t\t\tSystem.out.println(\&quot;You don\&#39;t have a driving license yet.\&quot;); \n
        \t}\n
        } else { \n
        \tSystem.out.println(\&quot;You are not eligible to apply for a driving license.\&quot;); \n
        } \n\n<b>Output:</b> \nYou are eligible to apply for a driving license. \nYou already have a driving license. \n\n<b>Example explained:</b>\nIn this example, we have a nested if statement. The outer if statement checks if the age is greater than or equal to 18. If the condition is true, it prints the message \&quot;You are eligible to apply for a driving license.\&quot; Then, it enters the inner if statement. The inner if statement checks if the boolean variable hasLicense is true or false. If hasLicense is true, it prints the message \&quot;You already have a driving license.\&quot; If hasLicense is false, it prints the message \&quot;You don\&#39;t have a driving license yet.\&quot; If the age condition in the outer if statement is false, it skips the inner if statement and executes the code in the else block of the outer if statement, printing the message \&quot;You are not eligible to apply for a driving license.\&quot;</string>
    <string name="three_primary_loop">• The <b>for</b> loop is commonly used when you know the number of iterations in advance. \n
        • The <b>while</b> loop is suitable when the number of iterations is not known in advance, and the loop continues until a specified condition becomes false. \n
        • The <b>do-while</b> loop is similar to the while loop, but it guarantees that the loop body is executed at least once. \n
        • The <b>foreach</b> loop is specifically designed for iterating over elements of an array or a collection.</string>
    <string name="forloop"><b>Here\'s the basic syntax:</b> \n
        for (initialization; condition; iteration) {\n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="iterate"><b>Example:</b> \n
        for (int i = 1; i &lt;= 5; i++) { \n
        \tSystem.out.println(\&quot;Iteration: \&quot; + i);\n
        }\n
        \n
        <b>Output:</b> \n
        Iteration: 1 \n
        Iteration: 2 \n
        Iteration: 3 \n
        Iteration: 4 \n
        Iteration: 5 \n\n
        <b>Example explained:</b>
        In this example, the for loop iterates from i = 1 to i \u003c= 5, incrementing i by 1 after each iteration. The loop body consists of a single statement that prints the iteration number.</string>
    <string name="while_loop"><b>Here\'s the basic syntax:</b> \n(condition) {\n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="whileloopex"><b>Example:</b> \n
        int count = 1; \n
        while (count &lt;= 5) { \n
        \tSystem.out.println(\&quot;Count: \&quot; + count);\n
        \tcount++; \n
        }\n
        \n
        <b>Output:</b> \n
        Count: 1 \n
        Count: 2 \n
        Count: 3 \n
        Count: 4 \n
        Count: 5 \n
        \n
        <b>Example explained:</b> \n
        the while loop starts with the condition count &lt;= 5. The loop body will execute as long as the condition is true. Inside the loop, the current value of count is printed using System.out.println(), and then count is incremented by 1 (count++). This ensures that the loop will eventually terminate when count becomes greater than 5.</string>
    <string name="do_while"><b>Here\'s the basic syntax:</b> \n
        do { \n
        \t// code to be executed in each iteration \n
        }while (condition</string>
    <string name="do_while_ex"><b>Example:</b> \n
        import java.util.Scanner; \n\n
        public class DoWhileLoopExample { \n
        \tpublic static void main(String[] args) { \n
        \t\tScanner scanner = new Scanner(System.in); \n
        \t\tint number; \n\n
        \t\tdo { \n
        \t\t\tSystem.out.print(\&quot;Enter a positive number (0 to exit): \&quot;); \n
        \t\t\tnumber = scanner.nextInt(); \n\n
        \t\t\tif (number &gt; 0) { \n
        \t\t\t\tSystem.out.println(\&quot;You entered: \&quot; + number); \n
        \t\t\t} else { \n
        \t\t\t\tSystem.out.println(\&quot;Invalid number!\&quot;); \n
        \t\t} \n
        \t} while (number != 0); \n\n
        \t\tSystem.out.println(\&quot;Loop exited. Goodbye!\&quot;); \n
        \t\tscanner.close(); \n
        \t} \n
        } \n\n
        <b>Output:</b> \n
        Enter a positive number (0 to exit): 5 \n
        You entered: 5 \n
        Enter a positive number (0 to exit): -2 \n
        Invalid number! \n
        Enter a positive number (0 to exit): 10 \n
        You entered: 10 \n
        Enter a positive number (0 to exit): 0 \n
        Loop exited. Goodbye! \n\n
        <b>Example explained:</b> \n
        We use a do-while loop to repeatedly prompt the user to enter a positive number. The loop continues until the user enters 0 to exit the program.</string>
    <string name="foreach"><b>Here\'s the basic syntax: </b>\n
        for (elementDataType element : collection) { \n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="foreach_example"><b>Example:</b> \n
        int[] numbers = {1, 2, 3, 4, 5}; \n
        for (int number : numbers) { \n
        \tSystem.out.println(number); \n
        } \n\n
        <b>Output:</b> \n
        1 \n
        2 \n
        3 \n
        4 \n
        5 \n
        \n
        <b>Example explained:</b> \n
        We have an array called numbers containing integers. The foreach loop iterates over each element in the array, assigning it to the variable number. The loop body then executes, which in this case simply prints the value of number using System.out.println().</string>
    <string name="TwoTypesOfDataTypes"><b><i>Primitive data types include the following:</i></b> \n
        byte, short, int, long, float, double, boolean, and char. \n<b><i>Non-Primitive data types include the following:</i></b> \n
        Strings, Arrays, Object, Interface, and Classes.</string>
    <string name="DataTypesTwoCategories"><b>Primitive Data Types:</b>\n
        <i><b>int:</b> Used to store whole numbers.</i> \n
        int myNumber = 42; \n\n
        <i><b>double:</b> Used to store decimal numbers.</i> \n
        double myDecimalNumber = 3.14159; \n\n
        <i><b>boolean:</b> Used to store true/false values.</i> \n
        boolean isTrue = true; \n\n
        <i><b>char:</b> Used to store a single character.</i>\n
        char myChar = \&#39;A\&#39;; \n\n<b>Reference Data Types:</b>\n
        <i><b>String:</b> Used to store sequences of characters. </i>\n
        String myName = \&quot;John Doe\&quot;; \n\n
        <i><b>Array:</b> Used to store a collection of elements of the same type. </i>\n
        int[] numbers = {1, 2, 3, 4, 5}; \n\n
        <i><b>Object:</b> Used to store instances of user-defined classes.</i> \n
        Date today = new Date(); \n\n
        <i><b>Class:</b> Used to store the definition of a class. </i>\n
        Class&lt;?&gt; myClass = MyClass.class; \n\n
        <i><b>Interface:</b> Used to store the definition of an interface. </i>\n
        interface MyInterface { \n
        \tvoid myMethod(); \n
        }</string>
    <string name="operatorstypes">•<b>Arithmetic operators</b>, such as addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and unary operators like increment (++), decrement (--), and negation (-), are used to do mathematical computations. \n\n
        •The employment of <b>logical operators</b> allows for the logical manipulation of boolean values and the generation of boolean results. Java supports the following logical operators: logical AND (&amp;&amp;), logical OR (||), and logical NOT (!). \n\n
        •<b>Operators for Assignment:</b> Operators for Assignment are used to assign values to variables. The equals symbol (=) is used as the most frequent assignment operator. The assignment operation can be combined with another operation using compound assignment operators like +=, -=, *=, /=, and %=. \n\n
        •<b>Bitwise operators:</b> These operators work with the individual bits of numeric operands. These include left shift (), right shift (&gt;&gt;), and unsigned right shift (&gt;&gt;&gt;). They also include bitwise AND (&amp;), bitwise OR (|), bitwise XOR (), bitwise complement (), and left shift (). \n\n
        •<b>The ternary operator</b> (?:) is a conditional operator that accepts three operands and returns a value in response to a condition. It is applied to conditional phrases that are concise.</string>
    <string name="Alloperators"><b>Arithmetic Operators:</b> \n
        <b>+</b> Addition operator. \n
        int sum = 5 + 3; // sum = 8 \n\n
        <b>-</b> Subtraction operator. \n
        int difference = 7 - 2; // difference = 5 \n\n
        <b>*</b> Multiplication operator. \n
        int product = 4 * 6; // product = 24 - \n\n
        <b>/</b> Division operator. \n
        int quotient = 10 / 2; // quotient = 5 - \n\n
        <b>%</b> Modulus operator (remainder of division). \n
        int remainder = 15 % 4; // remainder = 3 2. \n\n
        <b>Assignment Operators:</b> \n
        <b>=</b> Simple assignment operator. \n
        int number = 10; \n\n
        <b>+=</b> Add and assign operator. \n
        int value = 5; value += 3; // value = 8 \n\n
        <b>-=</b> Subtract and assign operator. \n
        int value = 7; value -= 2; // value = 5 \n\n
        <b>*=</b> Multiply and assign operator. \n
        int value = 4; value *= 6; // value = 24 \n\n
        <b>/=</b> Divide and assign operator. \n
        int value = 10; value /= 2; // value = 5 3. \n\n
        <b>Comparison Operators:</b> \n
        <b>==</b> Equal to operator. \n
        boolean isEqual = (5 == 3); // isEqual = false \n\n
        <b>!=</b> Not equal to operator. \n
        boolean isNotEqual = (7 != 2); // isNotEqual = true \n\n
        <b>&gt;</b> Greater than operator. \n
        boolean isGreaterThan = (10 &gt; 5); // isGreaterThan = true \n\n
        <b>&lt;</b> Less than operator. \n
        boolean isLessThan = (4 &lt; 6); // isLessThan = true \n\n
        <b>&gt;=</b> Greater than or equal to operator. \n
        boolean isGreaterThanOrEqual = (7 &gt;= 5); // isGreaterThanOrEqual = true \n\n
        <b>&lt;=</b> Less than or equal to operator. \n
        boolean isLessThanOrEqual = (4 &lt;= 6); // isLessThanOrEqual = true</string>
    <string name="intro_array"><i>Normally, an array is a group of similar-type elements with a contiguous memory location.</i> \n\nJava Array is a data structure that is used to store multiple and fixed-size of sequence values of elements in a single variable of the same type, instead of declaring separate variables for each value. In short, it is a container object that holds a definite number of values of any Java elements and data types. \n\n
        <i>Arrays have these following distinct characteristics:</i> \n
        <b>•Fixed Size:</b> When an array is created, the allocation of size is fixed and cannot be changed so before declaring, specify the size that needs to be created before declaring the array. \n
        <b>•Indexed Elements:</b> All elements that is declared in array has a unique index starting from 0, and these indicates its position within the array. It can be accessible through their index. \n
        <b>•Contiguous Memory Allocation:</b> All elements of array are stored in contiguous memory locations which allows for a more efficient access when calling out the index of element values. \n
        In Java, array is an object of a dynamically generated class. Java array inherits the Object class, and implements the Serializable as well as Cloneable interfaces. We can also store primitive values or objects. Moreover, Java provides the feature of anonymous arrays. \n\n
        </string>
    <string name="stringvariables">When you declare an array, always define the variable type with square brackets, like this: \n
        <b>String [] variable;</b></string>
    <string name="stringvariable1">Now that we have declared a variable that holds an array objects, let’s insert some values! Just place the values in a comma-separated list inside curly braces that looks like this: \n
        <b>String[] variable = {“Object”, “Values”, “List”, “Variables”, “Characters”};</b></string>
    <string name="intvariable">If you want to create an array that consists of integers, you could do: \n
        <b>Int[] varNum = {1, 2, 3, 4, 5};</b></string>
    <string name="numberarray">Now, let’s try initializing the array and allocate memory for a specific number of elements, just use the keyword “new” and declare like this: \n
        <b>numbers = new int[5];</b></string>
    <string name="intnumbers">Alternatively, we can also declare an array and initialize its elements in a single line and it may come out like this: \n
        <b>int[] numbers = new int[] { 1, 2, 3, 4, 5 };</b></string>
    <string name="stringvariable4">String[] variable = {“Object”, “Values”, “List”, “Variables”, “Characters”}; \n
        System.out.println(variable[0]); \n
        <b>Output:</b> \n
        Object</string>
    <string name="stringvariable5">variable[0] = “subject”; \n
        String[] variable = {“Object”, “Values”, “List”, “Variables”, “Characters”}; \n
        variable[0] = “Subject”; \n
        System.out.println(variable[0]); \n
        <b>Output:</b> \n
        Subject\n\n
        <i>See the difference? The index 0 originally named <b>“Object”</b> was replaced with <b>“Subject”</b> upon changing the value.</i></string>
    <string name="singleArrayJava">It is also known as one-dimensional array, these are the simplest form of arrays that anyone can easily understand. It consists of a linear sequence of elements, all of the same type, and arranged in a single row. Commonly used to store and manipulate collection of values or objects, Single Dimensional Array is done using a single index. The declaration syntax is as follows:\n
        <b>dataType[] arrayName;</b></string>
    <string name="multiArrayJava">Multidimensional arrays are arrays inside of arrays, where elements can be an array itself. It is frequently used to represent multidimensional tabular or matrix-like data structures. Rows and columns in a 2D array and rows, columns, and layers in a 3D array are examples of this. To access elements, positions must be specified in multiple indices in each dimension. The declaration syntax is as follows:\n<b>dataType[][] arrayName;</b></string>
    <string name="twotypesofarray">• Single Dimensional Array
        \n• Multidimensional Array</string>
    <string name="Arraydifference">// Single-dimensional array\nint[] numbers = { 1, 2, 3, 4, 5 };\n\n
    // Accessing a single-dimensional array element\nint value = numbers[2];  // Retrieves the value 3\n\n
    // Multidimensional array (2D)\nint[][] matrix = { { 1, 2, 3 }, { 4, 5, 6 } };\n\n
    // Accessing a multidimensional array element\nint element = matrix[1][2];  // Retrieves the value 6\n\n
    In the above example, numbers is a single-dimensional array containing 5 elements, while matrix is a 2D array with 2 rows and 3 columns.
    Notice the difference in accessing elements: the single-dimensional array uses a single index (numbers[2]), while the 2D array requires two indices to specify the row and column (matrix[1][2]).
    \n\nMultidimensional arrays provide a way to organize and represent data in multiple dimensions, enabling the handling of more complex structures and relationships among elements.</string>

    <string name="forArray">
    for(data_type variable:array){\n
    \t//body of the loop\n
    }
</string>

    <string name="foreachlooparray">
        <b>Example:</b>
    //Java Program to print the array elements using for-each loop\n
    class Testarray1{\n
    \tpublic static void main(String args[]){\n
    \t\tint arr[]={33,3,4,5};\n
    \t\t//printing array using for-each loop\n
    \t\tfor(int i:arr)\n
    \t\t\tSystem.out.println(i);\n
    \t}\n
    }\n\n
        <b>Output:</b>\n
        33\n
        3\n
        4\n
        5
</string>
    <string name="passingarray">
    <b>Example:</b>\n
    //Java Program to demonstrate the way of passing an array\n
    //to method.\n
    class Testarray2{\n
    \t//creating a method which receives an array as a parameter\n
    \tstatic void min(int arr[]){\n
    \t\tint min=arr[0];\n
    \t\tfor(int i=1;i&#60;arr.length;i++)\n
    \t\t\tif(min&#62;arr[i])\n
    \t\t\t\tmin=arr[i];\n
    \t\tSystem.out.println(min);&#59;\n
    \t}\n
    \tpublic static void main(String args[]){\n
    \t\tint a[]={33,3,4,5}&#59; //declaring and initializing an array\n
    \t\tmin(a); //passing array to method\n
    \t}\n
    }\n\n
    <b>Output:</b>\n
    3\n
</string>
    <string name="anonymousarray">
    <b>Example:</b>\n
    //Java Program to demonstrate the way of passing an anonymous array\n
    //to method.\n
    public class TestAnonymousArray{\n
    \t//creating a method which receives an array as a parameter\n
    \tstatic void printArray(int arr[]){\n
    \t\tfor(int i=0;i&#60;arr.length;i++)\n
    \t\t\tSystem.out.println(arr[i]);\n
    \t}\n
    \tpublic static void main(String args[]){\n
    \t\tprintArray(new int[]{10,22,44,66}); //passing anonymous array to method\n
    \t}\n
    }\n\n
    <b>Output:</b>\n
    10\n
    22\n
    44\n
    66\n
</string>
    <string name="returnarray">
    <b>Example:</b>\n
    //Java Program to return an array from the method\n
    class TestReturnArray{\n
    \t//creating method which returns an array\n
    \tstatic int[] get(){\n
    \t\treturn new int[]{10,30,50,90,60};\n
    \t}\n
    \tpublic static void main(String args[]){\n
    \t\t//calling method which returns an array\n
    \t\tint arr[]=get();\n
    \t\t//printing the values of an array\n
    \t\tfor(int i=0;i&#60;arr.length;i++)\n
    \t\t\tSystem.out.println(arr[i]);\n
    \t}\n
    }\n\n
    <b>Output:</b>\n
    10\n
    30\n
    50\n
    90\n
    60\n
</string>

    <string name="java_array_exception_code">
    <![CDATA[
        <pre>
<font color="#000000"><tt><b>Example:</b></tt></font>
<font color="#000000"><tt>//Java Program to demonstrate the case of\n</tt></font>
<font color="#000000"><tt>//ArrayIndexOutOfBoundsException in a Java Array.\n</tt></font>
<font color="#0000FF"><tt>public class</tt></font> TestArrayException{\n
<font color="#008000"><tt>\tpublic static void</tt></font> main(String args[]){\n
<font color="#0000FF"><tt>\t\tint</tt></font> arr[]={50,60,70,80};\n
<font color="#0000FF"><tt>\t\tfor</tt></font>(<font color="#0000FF"><tt>int</tt></font> i=0;i&#60;=arr.length;i++){<font color="#808080"><tt>\t// Note: it should be i &#60; arr.length instead of i &#60;= arr.length</tt></font>\n
<font color="#0000FF"><tt>\t\t\tSystem.out.println</tt></font>(arr[i]);\n
<font color="#0000FF"><tt>\t\t}</tt></font>\n
<font color="#0000FF"><tt>\t}</tt></font>\n
<font color="#0000FF"><tt>}</tt></font>\n
        </pre>
<font color="#000000"><tt>\t<b>Output:</b></tt></font>
<font color="#0000FF"><tt>\tException in thread "main" java.lang.ArrayIndexOutOfBoundsException: 4\n</tt></font>
<font color="#808080"><tt>\t\tat TestArrayException.main(TestArrayException.java:5)</tt></font>\n
<font color="#0000FF"><tt>\t50\n</tt></font>
<font color="#0000FF"><tt>\t60\n</tt></font>
<font color="#0000FF"><tt>\t70\n</tt></font>
<font color="#0000FF"><tt>\t80\n</tt></font>
    ]]>
</string>
    <string name="jagged_array_code">
        <![CDATA[
            <pre>
        <font color="#000000"><tt><b>Example:</b></tt></font>
        <font color="#000000"><tt>//Java Program to illustrate the jagged array\n</tt></font>
        <font color="#0000FF"><tt>class</tt></font> TestJaggedArray {\n
        \t<font color="#008000"><tt>public static void</tt></font> main(String[] args) {\n
        \t\t<font color="#808080"><tt>//declaring a 2D array with odd columns\n</tt></font>
        \t\t<font color="#0000FF"><tt>int</tt></font> arr[][] = <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[3][];\n
        \t\t<font color="#0000FF"><tt>arr[0] =</tt></font> <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[3];\n
        \t\t<font color="#0000FF"><tt>arr[1] =</tt></font> <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[4];\n
        \t\t<font color="#0000FF"><tt>arr[2] =</tt></font> <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[2];\n
        \t\t<font color="#808080"><tt>//initializing a jagged array\n</tt></font>
        \t\t<font color="#0000FF"><tt>int</tt></font> count = 0;\n
        \t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> i = 0; i &lt; arr.length; i++) {\n
        \t\t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> j = 0; j &lt; arr[i].length; j++) {\n
        \t\t\t\t<font color="#0000FF"><tt>arr[i][j] = count++;</tt></font>\n
        \t\t\t}\n
        \t\t}\n\n
        \t\t<font color="#808080"><tt>//printing the data of a jagged array\n</tt></font>
        \t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> i = 0; i &lt; arr.length; i++) {\n
        \t\t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> j = 0; j &lt; arr[i].length; j++) {\n
        \t\t\t\t<font color="#0000FF"><tt>System.out.print(arr[i][j] + " ");</tt></font>\n
        \t\t\t}\n
        \t\t\t<font color="#0000FF"><tt>System.out.println();</tt></font> <font color="#808080"><tt>//new line</tt></font>\n
        \t\t}\n
        \t<font color="#0000FF"><tt>}</tt></font>\n
        <font color="#0000FF"><tt>}</tt></font>
                </pre>
                <br />
                <font color="#008000"><tt>Output:</tt></font>\n
                <font color="#008000"><tt>0 1 2 </tt></font>\n
                <font color="#008000"><tt>3 4 5 6 </tt></font>\n
                <font color="#008000"><tt>7 8 </tt></font>
            ]]>
    </string>


    <!--__________________________PYTHON STRINGS____________________________________-->
    <string name="codey_python_cut">codey_python_cut</string>
    <string name="let_s_begin_the_introduction_of_python_i_m_so_excited_to_learn_this_come_and_join_with_me">Let’s begin the introduction of Python. I’m so excited to learn this, come and join with me!</string>

    <!--______________________INTRODUCTIONS STRINGS PYTHON______________________-->>
    <string name="python_introduction">Python is a popular high-level programming language with clean syntax that is easy to learn. It was created by Guido van Rossum and first released in 1991. Python is known for its simplicity and readability, and ability to run on all desktop computers and even mobile devices! It is a versatile language that can be used on a wide range of applications, including web and software development, data analysis, artificial intelligence, scientific computing, automation, and more! Thus, it is dubbed as the “easiest programming language in the world!”</string>
    <string name="python_feature_simple_syntax"><b>Simple and clear syntax:</b> Python places a strong emphasis on the readability of its code. Instead of utilizing braces or keywords to separate pieces of code, it employs indentation.
    </string>
    <string name="python_feature_dynamic_typing"><b>Dynamic typing:</b> Python is dynamically typed, which implies that variable types are decided upon automatically while the program is running. The code is more versatile because variable types don\'t have to be declared explicitly.
    </string>
    <string name="python_feature_strong_standard_library"><b>Strong standard library:</b> Python has a sizable standard library that includes modules for a variety of needs, including file I/O, networking, regular expressions, and more. This enables developers to complete typical activities without depending on third-party libraries.
    </string>
    <string name="python_feature_versatile_libraries"><b>Versatile libraries:</b> Python has a robust ecosystem of third-party modules and frameworks that increase its functionality. Popular libraries include Pandas for data analysis, Django for web development, and TensorFlow for machine learning computing.
    </string>
    <string name="python">Python</string>
    <string name="python_features">Python Features:</string>
    <string name="python_features_1"><b><i>Web applications</i></b> can be developed on a server using Python.
        \n\n<b><i>Workflows</i></b> can be made withPython and other technologies.
        \n\n<b><i>Database systems</i></b> are connectable with Python. Files can also be read and changed by it.
        \n\n<b><i>Big data management</i></b> and <b><i>advanced mathematical operations</i></b> can both be done with Python.
        \n\n<b><i>Python</i></b> can be used to produce software that is ready for production or for rapid prototyping.
</string>

    <string name="python_compatibility"><b>• Python is compatible</b> with a number of operating systems, including Raspberry Pi, Mac, and Linux.
    \n\n<b>• Python has a straightforward syntax</b> that resembles that of English language.
    \n\n<b>• Python features a syntax</b> that makes it possible for programmers to write programs with less lines of code than with some other programming languages.
    \n\n<b>• Python runs on an interpreter system</b>, allowing code to be executed immediately after it has been written. Thus, prototyping can be completed extremely quickly.
    \n\n<b>• Python can be used in procedural, object-oriented, or functional programming environments.</b>
</string>

    <string name="python_compared_to_other_languages">• With influences from mathematics and a focus on readability, Python shares several characteristics with the English language.
    \n\n• In contrast to other programming languages, which frequently employ semicolons or parentheses, Python uses new lines to finish a command.
    \n\n• Indentation, which utilizes whitespace, is how Python defines scope, including the scope of loops, functions, and classes. Curly brackets are frequently used in other computer languages for this reason.
</string>
    <string name="P_Intro_btnQ1">What is Python known for?</string>
    <string name="P_Intro_btnQ2">What is the edge of Python compared to other programming languages?</string>
    <string name="P_Intro_btnQ3">What type of language does Python belong?</string>


    <!--______________________COMMENTS STRINGS PYTHON______________________-->>
    <string name="comments_python_codey_introduction">Have you ever wonder if you can put a text in Python that looks like a note to identify what kind of code is it without being interpreted by the compiler? Worry no more because I introduce to you the Python Comments! Let’s see what we’ve got here!</string>
    <string name="comments">Comments</string>
    <string name="p_comments">Comments in Python are the lines in the code that are ignored by the interpreter during the execution of the program. Comments enhance the readability of the code and help the programmers to understand the code very carefully.</string>
    <string name="p_types_of_comments">There are three types of comments in Python:</string>
    <string name="p_the_types_of_comments">• Single line Comments
        \n• Multiline Comments
        \n• Docstring Comments</string>

    <string name="p_single_line_comments"><b>Single-Line Comments in Python</b></string>
    <string name="python_single_line_comments">Python single-line comment starts with the hashtag symbol (#) with no white spaces and lasts till the end of the line. If the comment exceeds one line then put a hashtag on the next line and continue the Python Comments. Python’s single-line comments are proved useful for supplying short explanations for variables, function declarations, and expressions. See the following code snippet demonstrating single line comment:</string>
    <string name="P_comments_textview9">In the example, it can be seen that Python Comments are ignored by the interpreter during the execution of the program.</string>

    <string name="P_single_comment_1">
        <![CDATA[
        <pre><tt><font color="#007F00"># Print “Hello World” to console\n</font>
        <font color="#BA2121">print(<font color="#1A1AA6">"Hello World"</font>)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Hello World</font></font></pre>
        ]]>
    </string>

    <string name="p_multi_line_comments"><b>Multi-Line Comments in Python</b></string>
    <string name="p_multiline_comment">Python does not provide the option for multiline comments. However, there are different ways through which we can write multiline comments. Multiline comments using multiple hashtags (#), We can multiple hashtags (#) to write multiline comments in Python. Each and every line will be considered as a single-line comment.
</string>
    <string name="P_multi_line_comment">
        <![CDATA[
        <pre><tt><font color="#007F00"># Python program to demonstrate\n# multiline comments\n</font>
        <font color="#BA2121">print(<font color="#1A1AA6">"Hello World"</font>)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Hello World</font></font></pre>
        ]]>
    </string>
    <string name="P_docstring_in_python">Python docstring is the string literals with triple quotes that are appeared right after the function. It is used to associate documentation that has been written with Python modules, functions, classes, and methods. It is added right below the functions, modules, or classes to describe what they do. In Python, the docstring is then made available via the __doc__ attribute.</string>
    <string name="docstring_in_python">Docstring in Python</string>
    <string name="P_Docstring_comment">
        <![CDATA[
        <pre><tt><font color="#007F00">def multiply(a, b):\n    """Multiplies the value of a and b"""\n    return a*b\n</font>
        <font color="#BA2121"># Print the docstring of multiply function\n</font>
        <font color="#1A1AA6">print(multiply.__doc__)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Multiplies the value of a and b</font></font></pre>
        ]]>
    </string>
    <string name="string_literals_in_python">String Literals In Python</string>
    <string name="string_literals">
        <![CDATA[
        <pre><tt><font color="#007F00">&quot;&quot;&quot; Python program to demonstrate\n multiline comments&quot;&quot;&quot;\n</font>
        <font color="#BA2121">print(<font color="#1A1AA6">&quot;Multiline comments&quot;</font>)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Multiline comments</font></font></pre>
        ]]>
    </string>

    <!--______________________SYNTAX STRINGS PYTHON______________________-->>
    <string name="syntax_intro_codey">Let’s begin the Syntax of Python. I’m so excited to learn this, come and join with me!</string>
    <string name="python_identifier_description">A Python identifier is a name used to identify a variable, function, class, module, or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9).
</string>
    <string name="syntax">Syntax</string>
    <string name="python_syntax">The Python syntax defines a set of rules that are used to create Python statements while writing a Python Program. The Python Programming Language Syntax has many similarities to Perl, C, and Java Programming Languages. However, there are some definite differences between the languages.</string>
    <string name="Identifiers"><i>Python does not allow punctuation characters such as @, $, and % within identifiers.</i></string>
    <string name="P_Syntax_Text5">Here are naming conventions for Python identifiers</string>
    <string name="python_identifiers">• Python Class names start with an uppercase letter.
    \n\n• All other identifiers start with a lowercase letter.
    \n\n• Starting an identifier with a single leading underscore indicates that the identifier is private.
    \n\n• Starting an identifier with two leading underscores indicates a strongly private identifier.
    \n\n• If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.
</string>
    <string name="python_identifiers_1">Python identifiers</string>
    <string name="P_lines_Indention">Python programming provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.</string>
    <string name="python_lines_and_indentation">Python Lines and Indentation</string>
    <string name="if_else_example"><![CDATA[<pre><tt><font color="#007F00">if True:\n</font><font color="#BA2121">\tprint(<font color="#1A1AA6">"True"</font>)\n</font><font color="#007F00">else:\n</font><font color="#BA2121">\tprint(<font color="#1A1AA6">"False"</font>)</font></tt></pre>]]>
    </string>
    <string name="line_continuation_example">
        <![CDATA[
        <pre><tt><font color="#007F00">Total = item_one + \\\n\tItem_two + \\\n\tItem_three</font></tt></pre>
        ]]>
    </string>
    <string name="string_literals_example">
        <![CDATA[
        <pre><tt><font color="#007F00">word = \'word\'\n\nsentence = "This is a sentence."\n\nparagraph = """This is a paragraph. It is\n\tmade up of multiple lines and sentences."""</font></tt></pre>
        ]]>
    </string>
    <string name="P_syntax_quotations">Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character () to denote that the line should continue. For example –</string>
    <string name="P_syntax_quotations1">Python accepts single (\'), double (\") and triple (\'\'\' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string. The triple quotes are used to span the string across multiple lines.
        \n<i>For example, all the following are legal</i></string>
    <string name="P_Syntax_text1">The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example</string>
    <string name="python_multi_line_statements">Python Multi-Line Statements</string>
    <string name="quotations_in_python">Quotations in Python</string>
    <string name="identifier_1">Identifier</string>
    <string name="syntax_add">Python syntax can be executed by writing directly in the Command Line.A basic and simple way to execute code in Python goes like this:</string>
    <string name="print_hello_world">
        <![CDATA[
        <pre><tt><font color="#BA2121">print(<font color="#1A1AA6">"Hello World!"</font>)</font></tt></pre>
        <pre><font color="#795E26">Output:</font><tt><font color="#1A1AA6">\nHello World!</font></tt></pre>
        ]]>
    </string>

    <!--______________________OPERATORS STRINGS PYTHON______________________-->>
    <string name="P_Operator_syntax">Let’s start another lesson in Python which are Operators!</string>
    <string name="J_Operator_syntax">Let’s start another lesson in Java which are Operators!</string>
    <string name="operators_1">Operators</string>
    <string name="Operator_meaning">Symbols or special characters known as “operators” in Python programming language carry out specified operations on operands (variables, constants, or expressions) to create results. You may manipulate and calculate on data, compare values, assign values, and do many other things with operators.</string>
    <string name="P_Operators_codey1">Python has a broad variety of operators, which can be divided into various classes according to how they operate.</string>
    <string name="P_types_of_operator">These are the different types of operators:</string>

    <string name="operators_description"><b>Arithmetic Operators:</b> execute operations including addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and exponentiation (**) in elementary mathematics.
        \n\n<b>Relational Operators:</b> A boolean result of true or false is returned when a relational operator compares two values. The operators greater than (&gt;), less than (&lt;), greater than or equal to (>=), and less than or equal to (&lt;=) are among those mentioned. They are frequently employed in comparisons and circumstances.
    </string>
    <string name="logical_operators_description">
    In order to execute logical operations on boolean values and produce a boolean result, <b>logical operators</b> are used. The logical AND (<b>and</b>), logical OR (<b>or</b>), and logical NOT (<b>not</b>) operators are among the logical operators. They are frequently applied in boolean expressions and conditional statements.
    </string>

    <string name="operators_description_2"><b>Assignment Operators:</b> When assigning values to variables, assignment operators are utilized. The equals operator (=) is the most used assignment operator. Additionally, there are compound assignment operators that combine an assignment operation with another operation, such as +=, -=, *=, /=, and %=.
        \n\n<b>Bitwise Operators:</b> Bitwise operators change the values of each bit in a numeric operand. They consist of left shift (&lt;&lt;), right shift (&gt;&gt;), bitwise complement (~), bitwise XOR (^), bitwise AND (&amp;), and bitwise OR (|). Working with binary representations and low-level operations are two things they are utilized for.
</string>
    <string name="p_membership_operators">Using membership operators, you may determine whether a value is a part of a sequence or collection. The membership operators take into and out of account.</string>
    <string name="identity_operators_description"><b>Identity Operators:</b> When comparing the identities of two objects, identity operators are utilized. There are two identity operators: <b>is</b> and <b>is not</b>.
</string>
    <string name="codey_text">You may use a variety of operators in Python to carry out different actions on variables and values.</string>

    <string name="operators_description1">1. <b>Arithmetic Operators</b>\n
    \t\t+: Addition Operator\n
    \t\t\t\t\t\t\tsum = 5 + 3\n
    \t\t\t\t\t\t\tsum = 8\n\n

    \t\t-: Subtraction Operator\n
    \t\t\t\t\t\t\tdifference = 7 - 2\n
    \t\t\t\t\t\t\tdifference = 5\n\n

    \t\t*: Multiplication Operator\n
    \t\t\t\t\t\t\tproduct = 4 * 6\n
    \t\t\t\t\t\t\tproduct = 24\n\n

    \t\t/: Division Operator (returns a float)\n
    \t\t\t\t\t\t\tquotient = 10 / 2\n
    \t\t\t\t\t\t\tquotient = 5.0\n\n

    \t\t//: Floor Division Operator (returns an integer)\n
    \t\t\t\t\t\t\tquotient = 10 // 3\n
    \t\t\t\t\t\t\tquotient = 3\n\n

    \t\t%: Modulus Operator (remainder of division)\n
    \t\t\t\t\t\t\tremainder = 15 % 4\n
    \t\t\t\t\t\t\tremainder = 3\n\n2. <b>Assignment Operators</b>\n
    \t\t=: Simple Assignment Operator\n
    \t\t\t\t\t\t\tnumber = 10\n\n

    \t\t+=: Add and Assign Operator\n
    \t\t\t\t\t\t\tvalue = 5\n
    \t\t\t\t\t\t\tvalue += 3\n
    \t\t\t\t\t\t\tvalue = 8\n\n

    \t\t-=: Subtract and Assign Operator\n
    \t\t\t\t\t\t\tvalue = 7\n
    \t\t\t\t\t\t\tvalue -= 2\n
    \t\t\t\t\t\t\tvalue = 5\n\n

    \t\t*=: Multiply and assign Operator\n
    \t\t\t\t\t\t\tvalue = 4\n
    \t\t\t\t\t\t\tvalue *= 6\n
    \t\t\t\t\t\t\tvalue = 24\n\n

    \t\t/=: Divide and Assign Operator\n
    \t\t\t\t\t\t\tvalue = 10\n
    \t\t\t\t\t\t\tvalue /= 2\n
    \t\t\t\t\t\t\tvalue = 5.0\n\n3. <b>Comparison Operators</b>\n
    \t\t==: Equal to Operator\n
    \t\t\t\t\t\t\tisEqual = (5 == 3)\n
    \t\t\t\t\t\t\tisEqual = False\n\n

    \t\t!=: Not equal to Operator\n
    \t\t\t\t\t\t\tisNotEqual = (7 != 2)\n
    \t\t\t\t\t\t\tisNotEqual = True\n\n

    \t\t&gt;: Greater than Operator\n
    \t\t\t\t\t\t\tisGreaterThan = (10 &gt; 5)\n
    \t\t\t\t\t\t\tisGreaterThan = True\n\n

    \t\t&lt;: Less than Operator\n
    \t\t\t\t\t\t\tisLessThan = (4 &lt; 6)\n
    \t\t\t\t\t\t\tisLessThan = True\n\n

    \t\t&gt;=: Greater than or equal to Operator\n
    \t\t\t\t\t\t\tisGreaterThanOrEqual = (7 &gt;= 5)\n
    \t\t\t\t\t\t\tisGreaterThanOrEqual = True\n\n

    \t\t&lt;=: Less than or equal to Operator\n
    \t\t\t\t\t\t\tisLessThanOrEqual = (4 &lt;= 6)\n
    \t\t\t\t\t\t\tisLessThanOrEqual = True\n
</string>
    <string name="P_operator_frequently_used">Here are a few examples of Python operators that are frequently used:</string>

    <!--______________________DATA TYPES STRINGS PYTHON______________________-->>
    <string name="data_types">Data Types</string>
    <string name="p_datatypes_meaning">The numerous classes or kinds of values that variables can contain are referred to as \"data types\" in Python. Every data type specifies the types of data that may be stored, the operations that can be carried out on the data, and the amount of memory needed to store the data.</string>
    <string name="codey_introindatatypes">Let’s start learning the different Data Types that is being used in Python! Let’s start, shall we?</string>
    <string name="data_types_description">
    1. <b>Numeric Data Types</b>\n
    \t\t\t\tInt: Used to store integers (whole numbers).\n
    \t\t\t\t\t\tage = 25\n\n

    \t\t\t\tFloat: Used to store floating-point numbers (decimal numbers).\n
    \t\t\t\t\t\tweight = 65.5\n\n

    \t\t\t\tComplex: Used to store complex numbers.\n
    \t\t\t\t\t\tz = 3 + 4j\n\n

    2. <b>Boolean Data Type</b>\n
    \t\t\t\tBool: Used to store boolean values (True or False).\n
    \t\t\t\t\t\tis_valid = True\n\n

    3. <b>String Data Type</b>\n
    \t\t\t\tStr: Used to store sequences of characters (text).\n
    \t\t\t\t\t\tname = "John Doe"\n\n

    4. <b>List Data Type</b>\n
    \t\t\t\tList: Used to store an ordered collection of items.\n
    \t\t\t\t\t\tnumbers = [1, 2, 3, 4, 5]\n\n

    5. <b>Tuple Data Type</b>\n
    \t\t\t\tTuple: Used to store an ordered collection of items (immutable).\n
    \t\t\t\t\t\tcoordinates = (10, 20)\n\n

    6. <b>Set Data Type</b>\n
    \t\t\t\tSet: Used to store an unordered collection of unique items.\n
    \t\t\t\t\t\tfruits = {"apple", "banana", "orange"}\n\n

    7. <b>Dictionary Data Type</b>\n
    \t\t\t\tDict: Used to store key-value pairs.\n
    \t\t\t\t\t\tperson = {"name": "John", "age": 30, "city": "New York"}\n
</string>
    <string name="here_are_a_few_instances_of_frequently_used_python_data_types">Here are a few instances of frequently used Python data types:</string>
    <string name="ending">And that is all the data types of python. swipe right to see the questions you might asked.</string>


    <string name="codey_examples">Examples of declaring variables:\n\nRepresents integer values, such as 1, -5, or 1000.\nage = 25\n\nRepresents a sequence of characters enclosed in single quotes (\'\') or double quotes (").\nname = "John Doe"\n\nRepresents floating-point numbers, which include decimal points, such as 3.14 or -2.5\npi = 3.14159\n\nRepresents boolean values, either True or False\nis_student = True</string>
    <string name="codey_dialogue">Python cannot function without the use of variables so let’s read the different classifications and rules of Python variables!\n\nVariables\n\nVariables are used to store data values that can be accessed and manipulated throughout the code. They act as placeholders or containers for storing different types of information such as numbers, strings, lists, or objects.\n\nCodey: Python has no command for declaring a variable, it is only created the moment that you first assign a value to it!\n\nExamples of declaring variables include:\n\nRepresents integer values, such as 1, -5, or 1000.\nage = 25\n\nRepresents a sequence of characters enclosed in single quotes (\'\') or double quotes (").\nname = "John Doe"\n\nRepresents floating-point numbers, which include decimal points, such as 3.14 or -2.5\npi = 3.14159\n\nRepresents boolean values, either True or False\nis_student = True</string>

    <!--______________________Variables STRINGS PYTHON______________________-->>
    <string name="Variables_intro_codey">Let’s begin the Variables of Python. I’m so excited to learn this, come and join with me!</string>
    <string name="conversion_example">
    <![CDATA[
    <pre><tt><font color="#007F00">x = str(3)    # x will be \'3\'</font>
            \n<font color="#007F00">y = int(3)    # y will be 3</font>
            \n<font color="#007F00">z = float(3)  # z will be 3.0</font></tt>
    </pre>
    ]]>
</string>
    <string name="variable_names_description">• A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:
    \n\n• A variable name must start with a letter or the underscore character.
    \n\n• A variable name cannot start with a number.
    \n\n• A variable name can only contain alphanumeric characters and underscores (A-z, 0-9, and _).
    \n\n• Variable names are case-sensitive (age, Age, and AGE are three different variables).
    \n\n• A variable name cannot be any of the Python keywords.
</string>

    <string name="p_Variables_code"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">x</font> = 5
        \n\t<font color="#0000FF">y</font> = John
        \n\n<font color="#795E26">Output:</font>
        \n\t<font color="#BA2121">print</font>(<font color="#0000FF">x</font>)
        \n\t<font color="#BA2121">print</font>(<font color="#0000FF">y</font>)
        </pre>
]]>
</string>

    <string name="p_variable_naming">
    <![CDATA[
<pre><font color="#007F00">#Example\n</font>
\n<font color="#BA2121">myvar</font> = <font color="#1A1AA6">"John"</font>
\n<font color="#BA2121">my_var</font> = <font color="#1A1AA6">"John"</font>
\n<font color="#BA2121">_my_var</font> = <font color="#1A1AA6">"John"</font>
\n<font color="#BA2121">myVar</font> = <font color="#1A1AA6">"John"</font>
\n<font color="#BA2121">MYVAR</font> = <font color="#1A1AA6">"John"</font>
\n<font color="#BA2121">myvar2</font> = <font color="#1A1AA6">"John"</font></pre>
    ]]>
</string>

    <string name="camelCase_naming">
    <![CDATA[
<pre><tt><font color="#BA2121">myVariableName</font> = <font color="#1A1AA6">"John"</font></tt></pre>
    ]]>
</string>
    <string name="pascalCase_naming">
    <![CDATA[
<pre><tt><font color="#007F00">MyVariableName</font> = <font color="#1A1AA6">"John"</font></tt></pre>
    ]]>
</string>
    <string name="snake_case_naming">
    <![CDATA[
<pre><tt><font color="#007F00">my_variable_name</font> = <font color="#1A1AA6">"John"</font></tt></pre>
    ]]>
</string>

    <!--______________________Inputs STRINGS PYTHON______________________-->
    <string name="inputs_intro_codey">Let’s begin the Inputs of Python. I’m so excited to learn this, come and join with me!</string>

    <string name="python_input_example"><![CDATA[<pre><font color="#BA2121">print</font>(\'Enter your name:\')
<font color="#1A1AA6">\nx</font> = <font color="#BA2121">input</font>()
<font color="#BA2121">\nprint</font>(\'Hello, \' + <font color="#1A1AA6">x</font>)
<font color="#795E26">\n\nOutput:</font>
<font color="#1A1AA6">\nEnter your name:</font> <i>(User enters their name)</i>
<font color="#1A1AA6">\nHello, [user\'s input]</font></pre>
]]></string>

    <string name="python_input_prompt_example"><![CDATA[<pre><font color="#BA2121">input</font>(<font color="#1A1AA6">prompt</font>)</pre>
]]></string>

    <string name="python_input_with_output_example">
    <![CDATA[
    <pre><tt><font color="#007F00">//Use the prompt parameter to write a message before the input:</font>
<font color="#1A1AA6">\nx = input(\'Enter your name:\')</font>
<font color="#BA2121">\nprint</font>(<font color="#1A1AA6">\'Hello, \'</font> + <font color="#1A1AA6">x</font>)</tt>

<font color="#795E26">\n\nOutput:</font>
<tt><font color="#1A1AA6">\nEnter your name:</font> <font color="#1A1AA6">John</font></tt>
<font color="#795E26">\nHello, John</font></pre>
]]>
</string>


    <!--______________________CONDITIONAL STATEMENT STRINGS PYTHON______________________-->>
    <string name="comparison_operators_description">• Equals: a == b
    \n• <b>Not Equals:</b> a != b
    \n• <b>Less than:</b> a &lt; b
    \n• <b>Less than or equal to:</b> a &lt;= b
    \n• <b>Greater than:</b> a &gt; b
    \n• <b>Greater than or equal to:</b> a &gt;= b
</string>

    <string name="logical_operators_description_python">• <b>logical AND:</b> The "AND" operator is represented by "AND". It returns "True" if both the operands on its left and right evaluate to "True", otherwise, it returns "False".
    \n\n• <b>logical OR</b>: The "OR" operator is represented by "OR". It returns "True" if at least one of the operands on its left or right evaluates to "True". If both operands are "False", it returns "False".
    \n\n• <b>logical NOT:</b> The "NOT" operator is represented by "NOT". It returns the opposite boolean value of the operand. If the operand is "True", it returns "False", and if the operand is "False", it returns "True".
</string>
    <string name="conditional_statements_description">• <b>if statement:</b> It is used to execute a block of code if a condition is true.
    \n\n• <b>if-else statement:</b> It allows you to execute one block of code if a condition is true and another block of code if the condition is false.
    \n\n• <b>if-elif-else statement:</b> It allows you to test multiple conditions and execute different blocks of code based on the first condition that evaluates to true. The elif stands for "else if".
    \n\n• <b>nested if statement:</b> You can nest if statements within other if statements to create more complex conditions.
    \n\n• <b>ternary operator:</b> It is a compact way to write a simple if-else statement in a single line.
</string>

    <string name="p_if_condition">
    <![CDATA[
<pre><tt><font color="#007F00">if</font> condition:\n\t<font color="#BA2121"># code to execute if condition is true</font></tt></pre>
    ]]>
</string>


    <string name="p_if_condition1">
    <![CDATA[
<pre><font color="#000000">Example:\n</font><tt><font color="#1A1AA6">x = 5</font>\n<font color="#007F00">if</font> <font color="#1A1AA6">x > 0</font>:</tt>\n<tt>\t<font color="#BA2121">print(<font color="#1A1AA6">"x is positive"</font>)</font></tt><pre><font color="#795E26">Output:</font></pre><tt><font color="#1A1AA6">x is positive</font></tt></pre>
    ]]>
</string>
    <string name="p_condition_example1"><![CDATA[We assign the value 5 to the variable x. Then, we have an if statement with the condition x > 0, which checks if x is greater than 0. Since the value of x is 5, which is indeed greater than 0, the condition evaluates to True. As a result, the code block indented under the if statement is executed. The line print(\"x is positive\") is within the code block. Therefore, when the condition is true, it prints the string \"x is positive\" as output.]]></string>

    <string name="p_if_else_condition">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nif</font> condition:</tt>
<tt>    <font color="#BA2121">\n\t# code to execute if condition is true</font></tt>
<tt><font color="#007F00">\nelse:</font></tt>
<tt>    <font color="#BA2121">\n\t# code to execute if condition is false</font></tt></pre>
    ]]>
</string>

    <string name="p_if_else_condition1">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#1A1AA6">\nx = -3</font></tt>
<tt><font color="#007F00">\nif</font> <font color="#1A1AA6">x > 0</font>:</tt>
<tt>    <font color="#BA2121">\n\tprint(<font color="#1A1AA6">"x is positive"</font>)</font></tt>
<tt><font color="#007F00">\nelse:</font></tt>
<tt>    <font color="#BA2121">\n\tprint(<font color="#1A1AA6">"x is non-positive"</font>)</font></tt>
<pre><font color="#795E26">Output:</font></pre>
<tt><font color="#1A1AA6">x is non-positive</font></tt></pre>
    ]]>
</string>
    <string name="conditionexample1"><![CDATA[We assign the value -3 to the variable x. Then, we have an if statement with the condition x > 0, which checks if x is greater than 0. Since the value of x is -3, which is not greater than 0, the condition evaluates to False. As a result, the code block indented under the else statement is executed. The line print(\"x is non-positive\") is within the code block associated with the else statement. Therefore, when the condition is false, it prints the string \"x is non-positive\" as output.]]></string>

    <string name="p_if_elif_else_condition">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nif</font> condition1:</tt>
<tt>    <font color="#BA2121">\n\t# code to execute if condition1 is true</font></tt>
<tt><font color="#007F00">\nelif</font> condition2:</tt>
<tt>    <font color="#BA2121">\n\t# code to execute if condition1 is false and condition2 is true</font></tt>
<tt><font color="#007F00">\nelse:</font></tt>
<tt>    <font color="#BA2121">\n\t# code to execute if both condition1 and condition2 are false</font></tt></pre>
    ]]>
</string>

    <string name="p_if_elif_else_condition1">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt>\nx = 0</tt>
<tt><font color="#007F00">\nif</font> x > 0:</tt>
<tt>    <font color="#BA2121">\n\tprint(<font color="#1A1AA6">"x is positive"</font>)</font></tt>
<tt><font color="#007F00">\nelif</font> x < 0:</tt>
<tt>    <font color="#BA2121">\n\tprint(<font color="#1A1AA6">"x is negative"</font>)</font></tt>
<tt><font color="#007F00">\nelse:</font></tt>
<tt>    <font color="#BA2121">\n\tprint(<font color="#1A1AA6">"x is zero"</font>)</font></tt>
<pre><font color="#795E26">Output:</font></pre>
<tt>x is zero</tt></pre>
    ]]>
</string>
    <string name="code_snippet_description">
    In this code snippet, we initialize a variable x with the value of 0. Then we use an <b>if-elif-else statement</b> to check the value of x and print a corresponding message based on its value.

    Since x is equal to 0, the condition <b>x > 0</b> evaluates to false. Therefore, the code inside the if block is not executed.

    Next, we move to the <b>elif (else if) statement</b> which checks if x is less than 0 (<b>x &lt; 0</b>). Again, this condition evaluates to false since x is equal to 0. Hence, the code inside the elif block is also not executed.

    Since both the if and elif conditions are false, the program moves to the <b>else statement</b>. Here, we print the message "x is zero" since this block is executed when none of the previous conditions were true.
</string>

    <string name="p_nested_if_else_condition">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nif</font> condition1:</tt>
<tt>    <font color="#BA2121">\n# code to execute if condition1 is true</font></tt>
<tt>    <font color="#007F00">\n\tif</font> condition2:</tt>
<tt>        <font color="#BA2121">\n\t\t# code to execute if both condition1 and condition2 are true</font></tt>
<tt>    <font color="#007F00">\n\telse:</font></tt>
<tt>        <font color="#BA2121">\n\t\t# code to execute if condition1 is true but condition2 is false</font></tt>
<tt><font color="#007F00">\nelse:</font></tt>
<tt>    <font color="#BA2121">\n\t# code to execute if condition1 is false</font></tt></pre>
    ]]>
</string>

    <string name="p_nested_if_else_condition1">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#000000">\nx = 10</font></tt>
<tt><font color="#007F00">\nif <font color="#000000">x > 0</font>:</font></tt>
<tt><font color="#007F00">    \n\tif <font color="#000000">x % 2 == 0</font>:</font></tt>
<tt><font color="#BA2121">        \n\t\tprint(<font color="#1A1AA6">"x is a positive even number"</font>)</font></tt>
<tt><font color="#007F00">    \n\telse:</font></tt>
<tt><font color="#BA2121">        \n\t\tprint(<font color="#1A1AA6">"x is a positive odd number"</font>)</font></tt>
<tt><font color="#007F00">\nelse:</font></tt>
<tt><font color="#BA2121">    \n\tprint(<font color="#1A1AA6">"x is non-positive"</font>)</font></tt>
<pre><font color="#795E26">\nOutput:</font></pre>
<tt><font color="#1A1AA6">\nx is a positive even number</font></tt></pre>
    ]]>
</string>

    <string name="code_execution_description">
    We assign the value 10 to the variable x.

    The outer if statement checks if x is greater than 0. Since x is 10 (which is greater than 0), the condition evaluates to True, and we enter the block of code associated with it.

    Inside the outer if statement, we have another if statement. It checks if x modulo 2 is equal to 0, which means x is divisible by 2 and is even. Since 10 is divisible by 2, the condition evaluates to True, and we execute the code block associated with it.

    Inside the nested if statement, we print the message "x is a positive even number".

    After executing the code inside the nested if statement, we exit the inner if statement.

    Finally, we exit the outer if statement and continue with the rest of the code.
</string>
    <string name="p_conditional_expression">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#BA2121">\nvalue = true_value if condition else false_value</font></tt></pre>
    ]]>
</string>
    <string name="p_conditional_expression1">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nx = 7</font></tt>
<tt><font color="#BA2121">\nresult = <font color="#1A1AA6">"Even"</font> if x % 2 == 0 else <font color="#1A1AA6">"Odd"</font></font></tt>
<tt><font color="#BA2121">\nprint(<font color="#1A1AA6">f"The number is {result}"</font>)</font></tt></pre>
    ]]>
</string>

    <string name="ternary_operator_description">
    We have a variable x assigned the value of 7. The goal is to determine whether x is an even or odd number.

    The line <b>result = "Even" if x % 2 == 0 else "Odd"</b> uses a ternary operator to assign the value to the variable result.

    The expression <b>x % 2 == 0</b> checks if x is divisible by 2 without a remainder, which indicates an even number. If this condition is true, the value assigned to result is "Even". Otherwise, if the condition is false, the value assigned to result is "Odd".

    Finally, the line <b>print(f"The number is {result}")</b> prints the result using an f-string, where the value of result is inserted within the curly braces. In this case, since x is 7, which is an odd number.
</string>
    <!--_________________________LOOPING PYTHON____________________________-->
    <string name="loop_description">• <b>for loop:</b> The for loop is used to iterate over a sequence (such as a list, tuple, string, or range) or any iterable object.
    \n• <b>while loop:</b> The while loop is used to repeatedly execute a block of code as long as a condition is true.
    \n• <b>break statement:</b> The break statement is used to exit the current loop prematurely, regardless of the loop condition.
    \n• <b>continue statement:</b> The continue statement is used to skip the current iteration of a loop and move to the next iteration.
    \n• <b>else statement in loops:</b> Python allows an else block to be associated with a loop. The code inside the else block is executed when the loop completes normally, without any break statements.
</string>

    <string name="p_for_loop">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nfor item in iterable:</font></tt>
<tt>    <font color="#BA2121">\n\t# Code block to be executed</font></tt></pre>
    ]]>
</string>

    <string name="p_for_loop_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt>\nfruits = [<font color="#1A1AA6">"apple"</font>, <font color="#1A1AA6">"banana"</font>, <font color="#1A1AA6">"cherry"</font>, <font color="#1A1AA6">"date"</font>]</tt>
<tt><font color="#007F00">\nfor fruit in fruits:</font></tt>
<tt>    <font color="#BA2121">\n\tprint(fruit)</font></tt>
<pre><font color="#795E26">Output:</font></pre><tt><font color="#1A1AA6">apple</font></tt>
<tt><font color="#1A1AA6">\nbanana</font></tt>
<tt><font color="#1A1AA6">\ncherry</font></tt>
<tt><font color="#1A1AA6">\ndate</font></tt></pre>
    ]]>
</string>

    <string name="p_while_loop">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nwhile condition:</font></tt>
<tt>    <font color="#BA2121">\n\t# Code block to be executed</font></tt></pre>
    ]]>
</string>
    <string name="p_while_loop_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt>count = 0</tt>
<tt><font color="#007F00">\nwhile count < 5:</font></tt>
<tt>    <font color="#BA2121">\n\tprint(<font color="#1A1AA6">"Count:"</font>, count)</font></tt>
<tt>    \n\tcount += 1</tt>
<pre><font color="#795E26">Output:</font></pre><tt><font color="#1A1AA6">Count: 0</font></tt>
<tt><font color="#1A1AA6">\nCount: 1</font></tt>
<tt><font color="#1A1AA6">\nCount: 2</font></tt>
<tt><font color="#1A1AA6">\nCount: 3</font></tt>
<tt><font color="#1A1AA6">\nCount: 4</font></tt></pre>
    ]]>
</string>
    <string name="example_explained_p"><![CDATA[The variable count is initialized to 0. The while loop continues as long as the condition count < 5 is true. Inside the loop, the current value of count is printed using the print() function. After each iteration, the value of count is incremented by 1 using the count += 1 shorthand for count = count + 1.]]></string>

    <string name="p_for_loop_with_condition">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nfor item in iterable:</font></tt>
<tt>    <font color="#007F00">\n\tif condition:</font></tt>
<tt>        <font color="#BA2121">\n\t\t# Code to execute when condition is true</font></tt>
<tt>        <font color="#BA2121">\n\t\tBreak</font></tt></pre>
    ]]>
</string>

    <string name="p_for_loop_with_break_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt>\nnumbers = [<font color="#1A1AA6">1</font>, <font color="#1A1AA6">2</font>, <font color="#1A1AA6">3</font>, <font color="#1A1AA6">4</font>, <font color="#1A1AA6">5</font>]</tt>
<tt><font color="#007F00">\nfor num in numbers:</font></tt>
<tt>    <font color="#007F00">\n\tif num == 3:</font></tt>
<tt>        <font color="#BA2121">\n\t\tbreak</font></tt>
<tt>    <font color="#BA2121">\n\tprint(num)</font></tt>
<tt><font color="#BA2121">\nprint(<font color="#1A1AA6">"Loop ended"</font>)</font></tt>
<pre><font color="#795E26">Output:</font></pre>
<tt><font color="#1A1AA6">\n1</font></tt>
<tt><font color="#1A1AA6">\n2</font></tt>
<tt><font color="#BA2121">\nLoop ended</font></tt></pre>
    ]]>
</string>

    <string name="p_for_loop_with_continue">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nfor item in iterable:</font></tt>
<tt>    <font color="#007F00">\n\tif condition:</font></tt>
<tt>        <font color="#BA2121">\n\t\t# Code to execute when condition is true</font></tt>
<tt>        <font color="#BA2121">\n\t\tcontinue</font></tt>
<tt>    <font color="#BA2121">\n\t# Code to execute for other iterations</font></tt></pre>
    ]]>
</string>
    <string name="p_for_loop_with_continue_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nfor num in range(1, 6):</font></tt>
<tt>    <font color="#007F00">\n\tif num == 3:</font></tt>
<tt>        <font color="#BA2121">\n\t\tcontinue</font></tt>
<tt>    <font color="#BA2121">\n\tprint(num)</font></tt>
<pre><font color="#795E26">Output:</font></pre>
<tt><font color="#1A1AA6">\n1</font></tt>
<tt><font color="#1A1AA6">\n2</font></tt>
<tt><font color="#1A1AA6">\n4</font></tt>
<tt><font color="#1A1AA6">\n5</font></tt></pre>
    ]]>
</string>

    <string name="p_if_else_statement">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nif condition:</font></tt>
<tt>    <font color="#BA2121">\n\t# Code to execute when the condition is true</font></tt>
<tt><font color="#007F00">\nelse:</font></tt>
<tt>    <font color="#BA2121">\t# Code to execute when the condition is false</font></tt></pre>
    ]]>
</string>

    <string name="p_if_else_statement_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt>x = 5</tt>
<tt><font color="#007F00">if x > 10:</font></tt>
<tt>    <font color="#BA2121">print(<font color="#1A1AA6">"x is greater than 10"</font>)</font></tt>
<tt><font color="#007F00">else:</font></tt>
<tt>    <font color="#BA2121">print(<font color="#1A1AA6">"x is less than or equal to 10"</font>)</font></tt>
<pre><font color="#795E26">Output:</font></pre>
<tt><font color="#1A1AA6">x is less than or equal to 10</font></tt></pre>
    ]]>
</string>
    <!--____________________ARRAY PYTHON___________________-->
    <string name="p_array_import_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nimport array</font></tt>
<tt><font color="#BA2121">\nmy_array = array.array(\'i\', [1, 2, 3, 4, 5])</font></tt></pre>
    ]]>
</string>
    <string name="p_numpy_import_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nimport numpy as np</font></tt>
<tt><font color="#BA2121">\nmy_array = np.array([1, 2, 3, 4, 5])</font></tt></pre>
    ]]>
</string>

    <string name="p_array_indexing_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt>\nx = <font color="#1A1AA6">flowers[0]</font></tt>
<tt><font color="#007F00">\n#To modify, place a value to the first array item:</font></tt>
<tt><font color="#1A1AA6">\nflowers[0] = "Roses"</font></tt></pre>
    ]]>
</string>


    <string name="p_array_length_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt>\nx = <font color="#1A1AA6">len(flowers)</font></tt></pre>
    ]]>
</string>

    <string name="p_for_loop_iteration_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nfor x in flowers:</font></tt>
<tt>    <font color="#BA2121">\n\tprint(x)</font></tt></pre>
    ]]>
</string>

    <string name="p_array_append_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nflowers.append(<font color="#1A1AA6">"Sampaguita"</font>)</font></tt></pre>
    ]]>
</string>

    <string name="p_array_pop_remove_example">
    <![CDATA[
<pre><font color="#000000">Example:</font>
<tt><font color="#007F00">\nflowers.pop(<font color="#1A1AA6">1</font>)</font></tt>
<tt><font color="#007F00">\nflowers.remove(<font color="#1A1AA6">"Roses"</font>)</font></tt></pre>
    ]]>
</string>

    <string name="python_list_methods_example1"><![CDATA[
<font color="#007F00">Example:</font>\n
<pre><tt><font color="#1A1AA6">fruits = ["apple", "banana", "cherry"]</font></tt>
<tt><font color="#BA2121">\nfruits.append("orange")</font></tt>
<tt><font color="#BA2121">\nprint(fruits)</font></tt></pre>
<font color="#795E26">Output:</font>\n
<pre><tt><font color="#1A1AA6">[\'apple\', \'banana\', \'cherry\', \'orange\']</font></tt></pre>
]]></string>

    <string name="python_list_methods_example2"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = ["apple", "banana", "cherry"]</font></tt>
<tt><font color="#BA2121">\nfruits.clear()</font></tt>
<tt><font color="#BA2121">\nprint(fruits)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[]</font></tt></pre>
]]></string>
    <string name="python_list_methods_example3"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = ["apple", "banana", "cherry"]</font></tt>
<tt><font color="#BA2121">\nx = fruits.copy()</font></tt>
<tt><font color="#BA2121">\nprint(x)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[\'apple\', \'banana\', \'cherry\']</font></tt></pre>
]]></string>

    <string name="python_list_methods_example4"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = ["apple", "banana", "cherry"]</font></tt>
<tt><font color="#BA2121">\nx = fruits.count("cherry")</font></tt>
<tt><font color="#BA2121">\nprint(x)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">1</font></tt></pre>
]]></string>

    <string name="python_list_methods_example5"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = [\'apple\', \'banana\', \'cherry\']</font></tt>
<tt><font color="#1A1AA6">\ncars = [\'Ford\', \'BMW\', \'Volvo\']</font></tt>
<tt><font color="#BA2121">\nfruits.extend(cars)</font></tt>
<tt><font color="#BA2121">\nprint(fruits)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[\'apple\', \'banana\', \'cherry\', \'Ford\', \'BMW\', \'Volvo\']</font></tt></pre>
]]></string>

    <string name="python_list_methods_example6"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = [\'apple\', \'banana\', \'cherry\']</font></tt>
<tt><font color="#BA2121">\nx = fruits.index("cherry")</font></tt>
<tt><font color="#BA2121">\nprint(x)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">2</font></tt></pre>
]]></string>

    <string name="python_list_methods_example7"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = [\'apple\', \'banana\', \'cherry\']</font></tt>
<tt><font color="#BA2121">\nfruits.insert(1, "orange")</font></tt>
<tt><font color="#BA2121">\nprint(fruits)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[\'apple\', \'orange\', \'banana\', \'cherry\']</font></tt></pre>
]]></string>

    <string name="python_list_methods_example8"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = [\'apple\', \'banana\', \'cherry\']</font></tt>
<tt><font color="#BA2121">\nfruits.pop(1)</font></tt>

<tt><font color="#BA2121">\nprint(fruits)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[\'apple\', \'cherry\']</font></tt></pre>
]]></string>

    <string name="python_list_methods_example9"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = [\'apple\', \'banana\', \'cherry\']</font></tt>
<tt><font color="#BA2121">\nfruits.remove("banana")</font></tt>
<tt><font color="#BA2121">\nprint(fruits)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[\'apple\', \'cherry\']</font></tt></pre>
]]></string>

    <string name="python_list_methods_example10"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\nfruits = [\'apple\', \'banana\', \'cherry\']</font></tt>
<tt><font color="#BA2121">\nfruits.reverse()</font></tt>
<tt><font color="#BA2121">\nprint(fruits)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[\'cherry\', \'banana\', \'apple\']</font></tt></pre>
]]></string>

    <string name="python_list_methods_example11"><![CDATA[
<font color="#007F00">Example:</font>
<pre><tt><font color="#1A1AA6">\ncars = [\'Ford\', \'BMW\', \'Volvo\']</font></tt>
<tt><font color="#BA2121">\ncars.sort()</font></tt>
<tt><font color="#BA2121">\nprint(cars)</font></tt></pre>
<font color="#795E26">Output:</font>
<pre><tt><font color="#1A1AA6">[\'BMW\', \'Ford\', \'Volvo\']</font></tt></pre>
]]></string>


    <!--___________________________OOP PYTHON_____________________________-->
    <string name="note">Note!</string>
    <string name="tip">Tip!</string>
    <string name="Encap_p"><b><i>Classes</i></b> and <b><i>Objects</i></b> play an important role in encapsulation, which is one of the core ideas of object-oriented programming (OOP). Encapsulation is the practice of grouping data and methods into a class and controlling access to them from outside the class.</string>
    <string name="Inheritance_python">One of the core ideas of object-oriented programming (OOP), inheritance, is implemented in large part via <b><i>classes</i></b> and <b><i>objects</i></b>. A class can take on traits and behaviors from another class, known as the superclass or base class, through inheritance. The term \"subclass\" or \"derived class\" refers to the class that derives from the superclass.</string>
    <string name="Polymorphism_Python">The implementation of polymorphism, one of the core concepts of object-oriented programming (OOP), depends heavily on <b><i>classes</i></b> and <b><i>objects</i></b>. When something is polymorphic, it can change its appearance or behave in a different way depending on the situation.</string>
    <string name="poly_python"><b><i>Classes</i></b>  and <b><i>Objects</i></b> play a role in implementing abstraction, which is one of the fundamental principles of object-oriented programming (OOP). Abstraction involves representing essential features of an object while hiding unnecessary details. It allows you to create abstract classes or interfaces that define a common set of methods without providing their implementation. Subclasses can then inherit from these abstract classes or implement these interfaces to provide their own specific implementation.</string>

    <string name="python_car_class_example"><![CDATA[
<font color="#007F00">class Car:</font>
<pre><tt><font color="#BA2121">\tdef __init__(self, brand, model, year):</font></tt>
<tt><font color="#BA2121">\n\t\tself.brand = brand</font></tt>
<tt><font color="#BA2121">\n\t\tself.model = model</font></tt>
<tt><font color="#BA2121">\n\t\tself.year = year</font></tt>

<tt><font color="#BA2121">\n\tdef accelerate(self):</font></tt>
<tt><font color="#BA2121">\n\t\tprint(f"The {self.brand} {self.model} is accelerating.")</font></tt>

<tt><font color="#BA2121">\n\tdef brake(self):</font></tt>
<tt><font color="#BA2121">\n\t\tprint(f"The {self.brand} {self.model} is braking.")</font></tt></pre>
]]></string>
    <string name="c_1"><b>Classes</b> and <b>Objects</b> are fundamental components of encapsulation, which is one of the core principles of object-oriented programming (OOP). Encapsulation involves bundling data and methods together within a class and controlling their access from outside the class.</string>
    <string name="c_2">Inheritance is one of the core ideas of object-oriented programming (OOP), and it is strongly related to <b>Classes</b> and <b>Objects.</b> The ability to inherit from another class enables for code reuse and the development of specialized classes based on preexisting ones.</string>

    <string name="car_code">
<![CDATA[
<pre>
<font color="#0000FF">public class</font> <font color="#FF00FF">Car</font>
{
    <font color="#008000">\n\tpublic string</font> Brand { <font color="#0000FF">get;</font> <font color="#0000FF">set;</font> }
    <font color="#008000">\n\tpublic string</font> Model { <font color="#0000FF">get;</font> <font color="#0000FF">set;</font> }
    <font color="#008000">\n\tpublic int</font> Year { <font color="#0000FF">get;</font> <font color="#0000FF">set;</font> }

    <font color="#0000FF">\n\n\tpublic Car</font>(<font color="#008000">string</font> brand, <font color="#008000">string</font> model, <font color="#008000">int</font> year)
    {
        \n\t\tBrand = brand;
        \n\t\tModel = model;
        \n\t\tYear = year;
    \n\t}

    <font color="#0000FF">\n\n\tpublic void</font> Accelerate()
    {
        <font color="#800000">\n\t\tConsole.WriteLine</font>(<font color="#FF0000">$"The {Brand} {Model} is accelerating."</font>);
    \n\t}

    <font color="#0000FF">\n\n\tpublic void</font> Brake()
    {
        <font color="#800000">\n\t\tConsole.WriteLine</font>(<font color="#FF0000">$"The {Brand} {Model} is braking."</font>);
   \n\t}
\n}
</pre>
]]>
</string>

    <!--___________________________________JAVA OOP______________________________-->
    <string name="Java_oop1">A <b>Class</b> is a blueprint or template that defines the properties (attributes) and behaviors (methods) that objects of that class will have. It serves as a blueprint for creating objects. On the other hand, an <b>Object</b> is an instance of a class, representing a specific entity in memory.</string>

    <string name="car_code_java">
<![CDATA[
<pre>
<font color="#0000FF">public class</font> <font color="#FF00FF">Car</font> {
    <font color="#008000">\n\tprivate String</font> brand;
    <font color="#008000">\n\tprivate String</font> model;
    <font color="#008000">\n\tprivate int</font> year;

    <font color="#0000FF">\n\n\tpublic Car</font>(<font color="#008000">String</font> brand, <font color="#008000">String</font> model, <font color="#008000">int</font> year) {
        <font color="#800000">\n\tthis</font>.brand = brand;
        <font color="#800000">\n\tthis</font>.model = model;
        <font color="#800000">\n\tthis</font>.year = year;
   \n\t}

    <font color="#0000FF">\n\n\tpublic void</font> accelerate() {
        <font color="#800000">\n\tSystem.out.println</font>(<font color="#FF0000">"The " + brand + " " + model + " is accelerating."</font>);
    \n\t}

    <font color="#0000FF">\n\n\tpublic void</font> brake() {
        <font color="#800000">\n\t\tSystem.out.println</font>(<font color="#FF0000">"The " + brand + " " + model + " is braking."</font>);
    \n\t}
\n}
</pre>
]]>
</string>

    <!--________________________C Sharp LOOPING STATEMENT______________________-->
    <string name="c_logical_operators_description">
    • \<b>Logical AND (&amp;&amp;):</b> The logical AND operator returns true if both the left and right operands are true.\n
    • \<b>Logical OR (||):</b> The logical OR operator returns true if at least one of the left or right operands is true.\n
    • \<b>Logical NOT (!):</b> The logical NOT operator is a unary operator that reverses the logical state of its operand. If the operand is true, it returns false, and if the operand is false, it returns true.
</string>

    <string name="loop_types_description">
    • \<b>"for"</b> loop: A "for" loop is used to iterate over a sequence of values for a specified number of times. It consists of three parts: initialization, condition, and iteration.\n
    • \<b>"while"</b> loop: A "while" loop is used to repeatedly execute a block of code as long as a given condition remains true. The condition is checked before each iteration.\n
    • \<b>"do-while"</b> loop: A "do-while" loop is similar to a "while" loop, but the condition is checked after each iteration. This means that the code block is executed at least once, even if the condition is initially false.
</string>

    <string name="c_for_loop_code">
<![CDATA[
<pre>
<font color="#0000FF">for</font> (<font color="#008000">int</font> i = 0; i < 5; i++) {
    <font color="#008000">\n\t// Code to be executed in each iteration</font>
\n}
</pre>]]>
</string>

    <string name="example_code">
        <![CDATA[
        <pre>Example:
        <font color="#0000FF">\nfor</font> (<font color="#008000">int</font> i = 0; i < 5; i++) {
            <font color="#008000">\n\tSystem.out.println</font>(i);
        \n}
        <font color="#008000">\nOutput:</font>
        <font color="#FF0000">\n0</font>
        <font color="#FF0000">\n1</font>
        <font color="#FF0000">\n2</font>
        <font color="#FF0000">\n3</font>
        <font color="#FF0000">\n4</font>
        </pre>
        ]]>
</string>
    <string name="c_while_loop_code">
<![CDATA[
<pre>
<font color="#0000FF">while</font> (condition){
    <font color="#008000">\n\t// Code to be executed while the condition is true</font>
\n}
</pre>
]]>
</string>
    <string name="c_while_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> count = 0;
<font color="#0000FF">\nwhile</font> (count < 5){
    \n\t<font color="#800000">Console.WriteLine</font>(count);
    \n\tcount++;
\n}
\nOutput:
<font color="#FF0000">\n0</font>
<font color="#FF0000">\n1</font>
<font color="#FF0000">\n2</font>
<font color="#FF0000">\n3</font>
<font color="#FF0000">\n4</font>
</pre>
]]>
</string>
    <string name="c_while"><![CDATA[The loop starts with the initial value of count as 0. The condition count < 5 is checked at the beginning of each iteration. If the condition is true, the code block inside the loop is executed, which prints the value of count and increments it by 1. This process continues until count becomes 5, at which point the condition becomes false, and the loop terminates.]]></string>

    <string name="c_do_while_loop_code">
<![CDATA[
<pre><font color="#0000FF">do</font>{
    <font color="#008000">\n\t// Code to be executed</font>
\n}
<font color="#0000FF">\nwhile</font> (condition);
</pre>
]]>
</string>

    <string name="c_do_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> i = 0;
<font color="#0000FF">\nwhile</font> (i < 5){
    <font color="#800000">\n\tConsole.WriteLine</font>(i);
    \n\ti++;
\n}
\nOutput:
<font color="#FF0000">\n0</font>
<font color="#FF0000">\n1</font>
<font color="#FF0000">\n2</font>
<font color="#FF0000">\n3</font>
<font color="#FF0000">\n4</font>
</pre>
]]>
</string>
    <string name="c_do_example"><![CDATA[The \"do-while\" loop first executes the code block, which prints the value of count. Then, it evaluates the condition count < 5. If the condition is true, the loop continues to execute, and the value of count is incremented. This process repeats until the condition becomes false. Since count starts at 0 and increments up to 4, the loop executes five times.]]></string>


    <!--__________________CONDITIONAL STATEMENT___________________________-->

    <string name="c_comparison_operators_description">
    • \<b>Less than:</b> &lt; \n
    • \<b>Less than or equal to:</b> &lt;= \n
    • \<b>Greater than:</b> &gt; \n
    • \<b>Greater than or equal to:</b> &gt;= \n
    • \<b>Equal to:</b> == \n
    • \<b>Not Equal to:</b> != \n
</string>

    <string name="c_conditional_statements_description">
    • \<b>Use if:</b> to specify a block of code to be executed, if a specified condition is true \n
    • \<b>Use else:</b> to specify a block of code to be executed, if the same condition is false \n
    • \<b>Use else if:</b> to specify a new condition to test, if the first condition is false \n
    • \<b>The ternary operator:</b> provides a concise way to express conditional statements. \n
    • \<b>Switch statement:</b> Choose one of the many code blocks to run. \n
</string>


    <string name="c_if_code">
<![CDATA[
<pre>
<font color="#0000FF">if</font> (condition){
    <font color="#008000">\n\t// Code to be executed while the condition is true</font>
\n}
</pre>
]]>
</string>

    <string name="c_if_code1">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> number = 10;
<font color="#0000FF">\nif</font> (number > 0){
    <font color="#800000">\n\tConsole.WriteLine</font>("The number is positive.");
\n}
\nOutput:
<font color="#800000">\nThe number is positive.</font
</pre>
]]>
</string>
    <string name="c_condition1"><![CDATA[If the value of the number variable is greater than 0, the message \"The number is positive.\" will be displayed. If the condition is false (number <= 0), the code block inside the if statement is not executed, and the program continues to the next statement.]]></string>

    <string name="c_else_code">
<![CDATA[
<pre>
<font color="#0000FF">if</font> (condition){
    <font color="#008000">\n\t// Code to be executed if the condition is true</font>
\n}
<font color="#0000FF">\nelse</font>{
    <font color="#008000">\n\t// Code to be executed if the condition is false</font>
\n}
</pre>
]]>
</string>

    <string name="c_else_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> num = 10;
<font color="#0000FF">\nif</font> (num > 5){
    <font color="#800000">\n\tConsole.WriteLine</font>("The number is greater than 5.");
\n}
<font color="#0000FF">\nelse</font>{
    <font color="#800000">\n\tConsole.WriteLine</font>("The number is less than or equal to 5.");
\n}
\nOutput:
<font color="#800000">\nThe number is greater than 5.</font>
</pre>
]]>
</string>

    <string name="c_else_if_code">
<![CDATA[
<pre>
<font color="#0000FF">if</font> (condition1){
    <font color="#008000">\n\t// Code to be executed if condition1 is true</font>
\n}
<font color="#0000FF">\nelse if</font> (condition2){
    <font color="#008000">\n\t// Code to be executed if condition2 is true and condition1 is false</font>
\n}
<font color="#0000FF">\nelse if</font> (condition3){
    <font color="#008000">\n\t// Code to be executed if condition3 is true and both condition1 and condition2 are false</font>
\n}
<font color="#0000FF">\nelse</font>{
    <font color="#008000">\n\t// Code to be executed if all previous conditions are false</font>
\n}
</pre>
]]>
</string>

    <string name="c_else_if_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> time = 22;
<font color="#0000FF">\nif</font> (time < 10) {
  <font color="#800000">\n\tConsole.WriteLine</font>("Good morning.");
\n}
<font color="#0000FF">\nelse if</font> (time < 20) {
  <font color="#800000">\n\tConsole.WriteLine</font>("Good day.");
\n}
<font color="#0000FF">\nelse</font> {
  <font color="#800000">\n\tConsole.WriteLine</font>("Good evening.");
\n}
\nOutput:
<font color="#800000">\nGood evening.</font>
</pre>
]]>
</string>

    <string name="c_ter_example_code">
<![CDATA[
<pre>
<font color="#0000FF">condition</font> ? <font color="#FF0000">value1</font> : <font color="#FF0000">value2</font>
</pre>
]]>
</string>

    <string name="c_ter_example_code1">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> num = 7;
<font color="#008000">\nstring</font> result = (num > 5) ? <font color="#FF0000">"Number is greater than 5"</font> : <font color="#FF0000">"Number is less than or equal to 5"</font>;
<font color="#800000">\nConsole.WriteLine</font>(result);
\nOutput:
<font color="#800000">\nNumber is greater than 5</font>
</pre>
]]>
</string>


    <string name="switch_statement_description">
        • The <b>switch</b> expression is only ever evaluated once.\n
        • The value of the expression is contrasted with the values in each <b>case</b>.\n
        • If a match is found, the corresponding piece of code is gonna run.\n
</string>

    <string name="c_switch_example_code">
<![CDATA[
<pre>
<font color="#0000FF">switch</font> (expression) {
  <font color="#0000FF">\n\tcase</font> x:
    <font color="#008000">\n\t\t// code here</font>
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> y:
    <font color="#008000">\n\t\t// code here</font>
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tdefault:</font>
    <font color="#008000">\n\t\t// code here</font>
    <font color="#0000FF">\n\t\tbreak;</font>
\n}
</pre>
]]>
</string>


    <string name="c_switch_break_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> day = 4;
<font color="#0000FF">\nswitch</font> (day) {
  <font color="#0000FF">\n\tcase</font> 1:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Monday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 2:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Tuesday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 3:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Wednesday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 4:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Thursday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 5:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Friday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 6:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Saturday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 7:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Sunday");
    <font color="#0000FF">\n\t\tbreak;</font>
\n}\nOutput:
<font color="#800000">\nThursday</font>
</pre>
]]>
</string>

    <string name="j_switch_break_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> day = 4;
<font color="#0000FF">\nswitch</font> (day) {
  <font color="#0000FF">\n\tcase</font> 1:
    <font color="#800000">\n\t\tSystem.out.println</font>("Monday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 2:
    <font color="#800000">\n\t\tSystem.out.println</font>("Tuesday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 3:
    <font color="#800000">\n\t\tSystem.out.println</font>("Wednesday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 4:
    <font color="#800000">\n\t\tSystem.out.println</font>("Thursday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 5:
    <font color="#800000">\n\t\tSystem.out.println</font>("Friday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 6:
    <font color="#800000">\n\t\tSystem.out.println</font>("Saturday");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 7:
    <font color="#800000">\n\t\tSystem.out.println</font>("Sunday");
    <font color="#0000FF">\n\t\tbreak;</font>
\n}\nOutput:
<font color="#800000">\nThursday</font>
</pre>
]]>
</string>

    <string name="c_default_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> world = 4;
<font color="#0000FF">\nswitch</font> (world) {
  <font color="#0000FF">\n\tcase</font> 6:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Hello World");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 7:
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Hi! World");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tdefault:</font>
    <font color="#800000">\n\t\tConsole.WriteLine</font>("Welcome to Hello World");
    <font color="#0000FF">\n\t\tbreak;</font>
\n}\nOutput:
<font color="#800000">\nWelcome to Hello World</font>
</pre>
]]>
</string>

    <string name="j_default_example_code">
<![CDATA[
<pre>Example:
<font color="#008000">\nint</font> world = 4;
<font color="#0000FF">\nswitch</font> (world) {
  <font color="#0000FF">\n\tcase</font> 6:
    <font color="#800000">\n\t\tSystem.out.println</font>("Hello World");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tcase</font> 7:
    <font color="#800000">\n\t\tSystem.out.println</font>("Hi! World");
    <font color="#0000FF">\n\t\tbreak;</font>
  <font color="#0000FF">\n\tdefault:</font>
    <font color="#800000">\n\t\tSystem.out.println</font>("Welcome to Hello World");
    <font color="#0000FF">\n\t\tbreak;</font>
\n}\nOutput:
<font color="#800000">\nWelcome to Hello World</font>
</pre>
]]>
</string>


    <string name="csharp_description">Microsoft created the object-oriented programming language C#, which is pronounced "C sharp." It was first presented as a component of the .NET Framework in the early 2000s, and since then, it has grown to be one of the most popular programming languages within the Microsoft ecosystem.\n\nC# is frequently used to create a variety of applications, including desktop, web, mobile, and game development applications. Strong typing, automatic memory management via garbage collection, and comprehensive support for object-oriented programming concepts like classes, inheritance, and polymorphism are just a few of the many language features it offers.\n\nThe .NET Framework (and later .NET Core and .NET 5) provides a broad array of libraries and APIs for developing many types of applications, and one of C#\'s primary strengths is its interaction with this framework. The .NET runtime can then execute C# code that has been compiled into the intermediate language known as Common Intermediate Language (CIL).\n\nBecause C#\'s syntax is comparable to other C-style languages like C, C++, and Java, learning and using C# is very simple for those who are already familiar with other languages. Async/await for asynchronous programming, LINQ (Language-Integrated Query), and other new language features have also been added to C# throughout time.\n\n
</string>

    <string name="csharp_features_description">\<b>Type Safety:</b> C# is a strongly typed language, meaning that it enforces type checking during compile-time. This helps catch errors early and promotes code reliability.
    \n\n<b>Garbage Collection:</b> C# utilizes automatic memory management through garbage collection. Developers do not need to manually allocate and deallocate memory, reducing the risk of memory leaks and improving productivity.
    \n\n<b>Generics:</b> C# supports generics, allowing the creation of reusable code by writing classes and methods that work with different types. Generics improve type safety and performance.
    \n\n<b>Delegates and Events:</b> C# supports delegates, which are type-safe function pointers that enable event-driven programming. Events allow objects to communicate and respond to actions or changes.
    \n\n<b>Asynchronous Programming:</b> C# has built-in support for asynchronous programming using the async and await keywords. This simplifies writing code that performs asynchronous operations, such as network requests or file operations, in a more readable and maintainable manner.
    \n\n<b>Reflection:</b> C# supports reflection, which allows developers to inspect and manipulate types, classes, methods, and other entities at runtime. This enables dynamic code generation and introspection.
</string>

    <string name="csharp_advantages_description"><b>Widely Used:</b> C# is among the most widely used programming languages worldwide.
    \n\n<b>Easy to Use and Learn:</b> C# is simple to use and simple to learn.
    \n\n<b>Strong Community Support:</b> Huge community support exists for C#.
    \n\n<b>Object-Oriented:</b> C# is an object-oriented language that provides programs with a clear structure and enables code reuse, which lowers development costs.
    \n\n<b>Easy Transition:</b> Because C# is so similar to C, C++, and Java, programmers can easily switch from one to the other.
</string>

    <string name="csharp_applications_description">
    • \<b>Mobile applications</b>\n
    • \<b>Desktop applications</b>\n
    • \<b>Web applications</b>\n
    • \<b>Web services</b>\n
    • \<b>Web sites</b>\n
    • \<b>Games</b>\n
    • \<b>VR</b>\n
    • \<b>Database applications</b>\n
    • \<b>And much, much more!</b>\n
</string>

    <string name="c_the_types_of_comments">• Single line Comments
        \n• Multiline Comments
        \n• XML Comments</string>
    <string name="j_the_types_of_comments">• Single line Comments
        \n• Multiline Comments
        \n• Javadoc Comments</string>

    <string name="c_comments_textview9">In the example, it can be seen that C# Comments are ignored by the interpreter during the execution of the program.</string>

    <string name="code_with_output">
<![CDATA[
<pre>
<font color="#0000FF">using</font> System;
<font color="#0000FF">\n\tpublic class</font> CommentExample{
    <font color="#0000FF">\n\t\tpublic static void</font> Main(string[] args){
        <font color="#800000">\n\t\t\tint</font> x = 10;<font color="#008000">// Here, x is a variable.</font>
        <font color="#800000">\n\t\t\tConsole.WriteLine</font>(x);
    \n\t\t}
\n\t}

<font color="#008000">\n// Output:</font>
<font color="#FF0000">\n10</font>
</pre>
]]>
</string>

    <string name="code_with_output_multi">
<![CDATA[
<pre>
<font color="#0000FF">using</font> System;
<font color="#0000FF">\n\tpublic class</font> CommentExample{
    <font color="#0000FF">\n\t\tpublic static void</font> Main(string[] args){
        <font color="#008000">\n\t\t\t/* Let\'s declare and
          \n\t\t\tprint variable in C#. */</font>
        <font color="#800000">\n\t\t\tint</font> x = 20;
        <font color="#800000">\n\t\t\tConsole.WriteLine</font>(x);
    \n\t\t}
\n\t}

<font color="#008000">\n// Output:</font>
<font color="#FF0000">\n20</font>
</pre>
]]>
</string>
    <string name="code_with_comments">
<![CDATA[
<pre><font color="#008000">/// &lt;summary&gt;
\n/// Adds two integers and returns the result.
\n/// &lt;/summary&gt;
\n/// <param name="a">The first integer.</param>
\n/// <param name="b">The second integer.</param>
\n/// <returns>The sum of <paramref name="a"/> and <paramref name="b"/>.</returns></font>
<font color="#0000FF">\npublic int</font> Add(int a, int b){
    <font color="#0000FF">\n\treturn</font> a + b;
\n}
</pre>
]]>
</string>


    <string name="csharp_data_types_description"><b>1. Value Types:</b>
    \n\t• Integral Types: byte, sbyte, short, ushort, int, uint, long, ulong
    \n\t• Floating-Point Types: float, double
    \n\t• Decimal Type: decimal
    \n\t• Character Type: char
    \n\t• Boolean Type: bool

    <b>\n\n2. Reference Types:</b>
    \n\t• Class Types: class
    \n\t• Struct Types: struct
    \n\t• Array Types: array
    \n\t• Enum Types: enum
    \n\t• Delegate Types: delegate
    \n\t• Interface Types: interface

    <b>\n\n3. Pointer Types:</b>
    \n\t• Pointer Types: The pointer types are used to store the memory addresses of other types.

    <b>\n\n4. Special Types:</b>
    \n\t• String Type: string
    \n\t• Object Type: object
    \n\t• Dynamic Type: dynamic
    \n\t• Void Type: void
</string>

    <string name="csharp_data_types_description_ex">1. <b>Primitive Data Types:</b>
    \n\t\t\t\t<b>int:</b> Used to store whole numbers.
      \n\t\t\t\tint myNumber = 42;

    \n\n\t\t\t\t<b>double:</b> Used to store decimal numbers.
      \n\t\t\t\tdouble myDecimalNumber = 3.14159;

    \n\n\t\t\t\t<b>bool:</b> Used to store true/false values.
      \n\t\t\t\tbool isTrue = true;

    \n\n\t\t\t\t<b>char:</b> Used to store a single character.
      \n\t\t\t\tchar myChar = \'A\';

\n\n2. <b>String:</b> Used to store sequences of characters.
    \n\t\t\t\tstring myName = "Hello World";

\n\n3. <b>Array:</b> Used to store a collection of elements of the same type.
    \n\t\t\t\tint[] numbers = { 1, 2, 3, 4, 5 };

\n\n4. <b>Object:</b> Used to store instances of classes or as a base type for all other types in C#.
    \n\t\t\t\tobject myObject = "Hello World";
</string>
    <string name="c_data_5_class">5. <b>Class:</b> Used to define a blueprint for creating objects.</string>

    <string name="c_class_code_example">
<![CDATA[
<pre>
<font color="#0000FF">public class</font> MyClass{
    <font color="#008000">\n\t// class members and methods</font>
\n}
\nMyStruct myStructInstance;
</pre>
]]>
</string>

    <string name="c_struc_code_example">
<![CDATA[
<pre>
<font color="#0000FF">\npublic struct</font> MyStruct{
    <font color="#008000">\n\t// struct members</font>
\n}
\nMyStruct myStructInstance;
</pre>
]]>
</string>
    <string name="enum_c">7. <b>Enum:</b> Used to define a set of named values.</string>
    <string name="c_struct">6. <b>Struct:</b> Used to define a lightweight structure that can contain data members.</string>

    <string name="c_enum_code_example">
<![CDATA[
<pre>
<font color="#0000FF">enum</font> DaysOfWeek{
    \n\tMonday,
    \n\tTuesday,
    \n\tWednesday,
    \n\tThursday,
    \n\tFriday,
    \n\tSaturday,
    \n\tSunday
\n}
\nDaysOfWeek today = DaysOfWeek.Wednesday;
</pre>
]]>
</string>

    <string name="c_nullable">8. <b>Nullable Types:</b> Used to represent value types that can be assigned null.</string>
    <string name="c_nullable_code_example">
<![CDATA[
<pre>
<font color="#0000FF">int?</font> nullableNumber = <font color="#FF0000">null</font>;
</pre>
]]>
</string>

    <string name="c_operators_description"><b>Arithmetic operators</b> execute operations such addition (+), subtraction (-), multiplication (*), division (/), and modulus (%) in elementary mathematics. They can be applied to data types having numbers.
    \n\n<b>Relational Operators</b>: A boolean result of true or false is returned when a relational operator compares two values. The operators greater than (>), less than (&lt;), greater than or equal to (>=), and less than or equal to (&lt;=) are among those mentioned. They are frequently employed in comparisons and circumstances.
    \n\n<b>Boolean Operators</b>: In order to execute logical operations on boolean values and produce a boolean result, logical operators are used. The logical AND (&amp;&amp;), logical OR (||), and logical NOT (!) are examples of logical operators. They are frequently applied in boolean expressions and conditional statements.
    \n\n<b>Operators for Assignment</b>: Operators for Assignment are used to assign values to variables. The equals symbol (=) is used as the most frequent assignment operator. The assignment operation can be combined with another operation using compound assignment operators like +=, -=, *=, /=, and %=.
    \n\n<b>Bitwise operators</b>: These operators work with the individual bits of numeric operands. These include left shift (&lt;&lt;), right shift (>>), and unsigned right shift (>>>). They also include bitwise AND (&amp;), bitwise OR (|), bitwise XOR (^), bitwise complement (~), and left shift (&lt;&lt;). They are employed for low-level tasks and when dealing with binary representations.
    \n\n<b>Ternary Operator</b>: The ternary operator (?:) returns a value in response to a condition and accepts three operands. Compact conditional expressions are utilized with it.
</string>

    <string name="c_operators_example">
    <b>1. Arithmetic Operators:</b>\n
    \t\t <b>+ : Addition operator.</b>\n
    \t\t\t\t\t\tint sum = 5 + 3;  // sum = 8\n\n
    \t\t <b>- : Subtraction operator.</b>\n
    \t\t\t\t\t\tint difference = 7 - 2;  // difference = 5\n\n
    \t\t <b>* : Multiplication operator.</b>\n
    \t\t\t\t\t\tint product = 4 * 6;  // product = 24\n\n
    \t\t <b>/ : Division operator.</b>\n
    \t\t\t\t\t\tint quotient = 10 / 2;  // quotient = 5\n\n
    \t\t <b>% : Modulus operator (remainder of division).</b>\n
    \t\t\t\t\t\tint remainder = 15 % 4;  // remainder = 3\n\n

    <b>2. Assignment Operators:</b>\n
    \t\t <b>= : Simple assignment operator.</b>\n
    \t\t\t\t\t\tint number = 10;\n\n
    \t\t <b>+= : Add and assign operator.</b>\n
    \t\t\t\t\t\tint value = 5;\n
    \t\t\t\t\t\tvalue += 3;  // value = 8\n\n
    \t\t <b>-= : Subtract and assign operator.</b>\n
    \t\t\t\t\t\tint value = 7;\n
    \t\t\t\t\t\tvalue -= 2;  // value = 5\n\n
    \t\t <b>*= : Multiply and assign operator.</b>\n
    \t\t\t\t\t\tint value = 4;\n
    \t\t\t\t\t\tvalue *= 6;  // value = 24\n\n
    \t\t <b>/= : Divide and assign operator.</b>\n
    \t\t\t\t\t\tint value = 10;\n
    \t\t\t\t\t\tvalue /= 2;  // value = 5\n\n

    <b>3. Comparison Operators:</b>\n
    \t\t <b>== : Equal to operator.</b>\n
    \t\t\t\t\t\tbool isEqual = (5 == 3);  // isEqual = false\n\n
    \t\t <b>!= : Not equal to operator.</b>\n
    \t\t\t\t\t\tbool isNotEqual = (7 != 2);  // isNotEqual = true\n\n
    \t\t <b>&gt; : Greater than operator.</b>\n
    \t\t\t\t\t\tbool isGreaterThan = (10 &gt; 5);  // isGreaterThan = true\n\n
    \t\t <b>&lt; : Less than operator.</b>\n
    \t\t\t\t\t\tbool isLessThan = (4 &lt; 6);  // isLessThan = true\n\n
    \t\t <b>&gt;= : Greater than or equal to operator.</b>\n
    \t\t\t\t\t\tbool isGreaterThanOrEqual = (7 &gt;= 5);  // isGreaterThanOrEqual = true\n\n
    \t\t <b>&lt;= : Less than or equal to operator.</b>\n
    \t\t\t\t\t\tbool isLessThanOrEqual = (4 &lt;= 6);  // isLessThanOrEqual = true\n
</string>


    <string name="c_array_1code_example">
<![CDATA[
<pre><font color="#008000">// Creating an array of integers with a size of 5</font>
<font color="#0000FF">\nint</font>[] myArray = <font color="#0000FF">new int</font>[5];

<font color="#008000">\n\n// Initializing an array with values</font>
<font color="#0000FF">\nint</font>[] myNumbers = <font color="#0000FF">new int</font>[] { 1, 2, 3, 4, 5 };
</pre>
]]>
</string>

    <string name="c_array_2code_example">
<![CDATA[
<pre><font color="#0000FF">int[]</font> myNumbers = <font color="#0000FF">new int</font>[] { 10, 20, 30, 40, 50 };
<font color="#0000FF">\n\nint</font> firstNumber = myNumbers[0]; <font color="#008000">// Accessing the first element (10)</font>
<font color="#0000FF">\nint</font> thirdNumber = myNumbers[2]; <font color="#008000">// Accessing the third element (30)</font>
</pre>
]]>
</string>

    <string name="c_array_3code_example">
<![CDATA[
<pre><font color="#0000FF">int[]</font> myNumbers = <font color="#0000FF">new int</font>[] { 10, 20, 30, 40, 50 };

\n\nmyNumbers[1] = 25; <font color="#008000">// Changing the second element to 25</font>
</pre>
]]>
</string>


    <string name="c_array_4code_example">
<![CDATA[
<pre><font color="#0000FF">int[]</font> myNumbers = <font color="#0000FF">new int</font>[] { 10, 20, 30, 40, 50 };

<font color="#008000">\n// Using for loop</font>
<font color="#0000FF">\nfor</font> (int i = 0; i &lt; myNumbers.Length; i++){
    <font color="#800000">\n\tConsole.WriteLine</font>(myNumbers[i]);
\n\n}

<font color="#008000">\n// Using foreach loop (preferred when you don\'t need the index)</font>
<font color="#0000FF">\nforeach</font> (int number <font color="#0000FF">in</font> myNumbers){
    <font color="#800000">\n\tConsole.WriteLine</font>(number);
\n}
</pre>
]]>
</string>

    <string name="c_array_5code_example">
<![CDATA[
<pre><font color="#008000">// 2D array (matrix)</font>
<font color="#0000FF">\nint</font>[,] matrix = <font color="#0000FF">new int</font>[3, 3] { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };

<font color="#008000">\n\n// 3D array</font>
<font color="#0000FF">\nint</font>[,,] cube = <font color="#0000FF">new int</font>[2, 2, 2] { { { 1, 2 }, { 3, 4 } }, { { 5, 6 }, { 7, 8 } } };
</pre>
]]>
</string>

    <string name="c_array_6code_example">
<![CDATA[
<pre><font color="#0000FF">int[]</font> myNumbers = <font color="#0000FF">new int</font>[] { 5, 2, 7, 1, 4 };
<font color="#0000FF">\nint</font> arrayLength = myNumbers.Length; <font color="#008000">// 5</font>

<font color="#0000FF">\n\nint[]</font> copyArray = <font color="#0000FF">new int</font>[5];
\nmyNumbers.CopyTo(copyArray, 0);

<font color="#0000FF">\n\nArray.Sort</font>(myNumbers); <font color="#008000">// Sorts the array in ascending order</font>
</pre>
]]>
</string>


    <string name="c_syntax_intro_codey">Let’s begin the Syntax of C#. I’m so excited to learn this, come and join with me!</string>


    <string name="c_syntax_code_example">
<![CDATA[
<pre><font color="#008000">using</font> System;

<font color="#008000">\n\tnamespace</font> RectangleApplication {
    <font color="#008000">\n\t\tclass</font> Rectangle {
        <font color="#008000">\n\t\t\t// member variables</font>
        <font color="#0000FF">\n\t\t\tdouble</font> length;
        <font color="#0000FF">\n\t\t\tdouble</font> width;

        <font color="#008000">\n\t\t\tpublic void</font> Acceptdetails() {
            \n\t\t\t\tlength = 4.5;
            \n\t\t\t\twidth = 3.5;
        \n\t\t\t}
        <font color="#008000">\n\t\t\tpublic double</font> GetArea() {
            <font color="#008000">\n\t\t\t\treturn</font> length * width;
        \n\t\t\t}
        <font color="#008000">\n\t\t\tpublic void</font> Display() {
            <font color="#800000">\n\t\t\t\tConsole.WriteLine</font>("Length: {0}", length);
            <font color="#800000">\n\t\t\t\tConsole.WriteLine</font>("Width: {0}", width);
            <font color="#800000">\n\t\t\t\tConsole.WriteLine</font>("Area: {0}", GetArea());
        \n\t\t\t}
    \n\t\t}

    <font color="#008000">\n\t\t\tclass</font> ExecuteRectangle {
        <font color="#008000">\n\t\t\t\tstatic void</font> Main(string[] args) {
            \n\t\t\t\t\tRectangle r = <font color="#0000FF">new</font> Rectangle();
            \n\t\t\t\t\tr.Acceptdetails();
            \n\t\t\t\t\tr.Display();
            <font color="#800000">\n\t\t\t\t\tConsole.ReadLine</font>();
        \n\t\t\t\t}
    \n\t\t\t}
\n\t\t}
</pre>
]]>
</string>

    <string name="c_using_code_example">
<![CDATA[
<pre><font color="#008000">using</font> System;
</pre>
]]>
</string>

    <string name="c_class_code_example1">
<![CDATA[<pre><font color="#008000">class</font> Rectangle {
\n}
</pre>
]]>
</string>

    <string name="c_variable_code_example">
<![CDATA[
<pre><font color="#008000">// member variables</font>
<font color="#0000FF">\ndouble</font> length;
<font color="#0000FF">\ndouble</font> width;
</pre>
]]>
</string>


    <string name="c_var_func_code_example">
<![CDATA[
<pre><font color="#0000FF">public void</font> Acceptdetails() {
    \n\tlength = 4.5;
    \n\twidth = 3.5;
\n}
<font color="#0000FF">\npublic double</font> GetArea() {
    <font color="#0000FF">\n\treturn</font> length * width;
\n}
<font color="#0000FF">\npublic void</font> Display() {
    <font color="#800000">\n\tConsole.WriteLine</font>("Length: {0}", length);
    <font color="#800000">\n\tConsole.WriteLine</font>("Width: {0}", width);
    <font color="#800000">\n\tConsole.WriteLine</font>("Area: {0}", GetArea());
\n}
</pre>
]]>
</string>

    <string name="c_class_2_code_example">
<![CDATA[
<pre><font color="#008000">class</font> ExecuteRectangle {
    <font color="#008000">\n\tstatic void</font> Main(string[] args) {
        \n\t\tRectangle r = <font color="#0000FF">new</font> Rectangle();
        \n\t\tr.Acceptdetails();
        \n\t\tr.Display();
        <font color="#800000">\n\t\tConsole.ReadLine</font>();
    \n\t}
\n}
</pre>
]]>
</string>
    <string name="c_syn"><![CDATA[• A name must begin with a letter that could be followed by a sequence of letters, digits (0 – 9) or underscore. The first character in an identifier cannot be a digit.
     \n\n• It must not contain any embedded space or symbol such as? - + ! @ # % ^ & * ( ) [ ] { } . ; : “ ‘ / and . However, an underscore ( _ ) can be used.
     \n\n• It should not be a C# keyword.]]></string>


    <string name="c_Variables_intro_codey">Let’s begin the Variables of C#. I’m so excited to learn this, come and join with me!</string>

    <string name="c_variables"><b>int</b> - stores integers (whole numbers), without decimals, such as 123 or -123
    \n<b>double</b> - stores floating point numbers, with decimals, such as 19.99 or -19.99
    \n<b>char</b> - stores single characters, such as \'a\' or \'B\'. Char values are surrounded by single quotes
    \n<b>string</b> - stores text, such as "Hello World". String values are surrounded by double quotes
    \n<b>bool</b> - stores values with two states: true or false</string>

    <string name="c_syn_code_example">
<![CDATA[
<pre><font color="#0000FF">type</font> variableName = value;
</pre>
]]>
</string>
    <string name="c_var_string_code_example"><![CDATA[<pre><font color="#0000FF">string</font> name = "John";
<font color="#800000">\nConsole.WriteLine</font>(name);
\n\nOutput:
<font color="#800000">\nJohn</font></pre>
]]>
</string>
    <string name="c_var_int_code_example"><![CDATA[<pre><font color="#0000FF">int</font> myNum = 15;
<font color="#800000">\nConsole.WriteLine</font>(myNum);
\n\nOutput:
<font color="#800000">\n15</font></pre>
]]>
</string>
    <string name="var_c">int myNum = 5;
        \ndouble myDoubleNum = 5.99D;
        \nchar myLetter = \'D\';
        \nbool myBool = true;
        \nstring myText = \"Hello\";</string>

    <string name="c_inputs_intro_codey">Let’s begin the Inputs of C#. I’m so excited to learn this, come and join with me!</string>

    <string name="c_input_code_example"><![CDATA[
<pre>
<font color="#008000">// Type your username and press enter</font>
<font color="#800000">\nConsole.WriteLine</font>("Enter username:");
</pre>]]></string>

    <string name="c_input_code_example1"><![CDATA[
<pre>
<font color="#008000">// Create a string variable and get user input from the keyboard and store it in the variable</font>
<font color="#0000FF">\nstring</font> userName = <font color="#800000">Console.ReadLine</font>();
</pre>]]>
</string>

    <string name="c_input_code_example2"><![CDATA[
<pre>
<font color="#008000">// Print the value of the variable (userName), which will display the input value</font>
<font color="#800000">\nConsole.WriteLine</font>("Username is: " + userName);
</pre>]]>
</string>


    <string name="java_code_syn1">
    <![CDATA[
    <pre><tt><font color="#795E26">public</font> <font color="#BA2121">void</font> <font color="#007F00">calculateTotal</font><font color="#007F00">();</font></tt>
<tt><font color="#795E26">\nprivate</font> <font color="#795E26">int</font> <font color="#007F00">findMax</font><font color="#007F00">(</font><font color="#795E26">int</font><font color="#007F00">[] numbers)</font><font color="#007F00">;</font></tt>
</pre>
    ]]>
</string>
    <string name="java_code_syn2">
    <![CDATA[
    <pre><tt><font color="#007F00">class</font> <font color="#BA2121">Car</font> <font color="#007F00">{</font>
<font color="#007F00">\n\t// class body</font>
<font color="#007F00">\n}</font></tt>
</pre>
    ]]>
</string>

    <string name="java_code_syn3">
    <![CDATA[
    <pre><tt><font color="#007F00">final</font> <font color="#007F00">int</font> <font color="#BA2121">MAX_VALUE</font> <font color="#007F00">=</font> <font color="#1A1AA6">100</font><font color="#007F00">;</font>
<font color="#007F00">\nfinal</font> <font color="#007F00">double</font> <font color="#BA2121">PI</font> <font color="#007F00">=</font> <font color="#1A1AA6">3.14159</font><font color="#007F00">;</font></tt>
</pre>
    ]]>
</string>

    <string name="java_code_syn4">
    <![CDATA[
    <pre><tt><font color="#007F00">Car</font> <font color="#BA2121">myCar</font> <font color="#007F00">=</font> <font color="#007F00">new</font> <font color="#007F00">Car</font><font color="#007F00">();</font></tt>
</pre>
    ]]>
</string>
    <string name="java_code_syn5">
    <![CDATA[
    <pre><tt><font color="#007F00">public void</font> <font color="#BA2121">printName</font>(<font color="#001080">String</font> <font color="#BA2121">name</font>) <font color="#007F00">{</font>
        <font color="#008080">\n\t// method body</font>
    <font color="#007F00"\n}</font></tt>
</pre>
    ]]>
</string>

    <string name="java_code_syn6">
    <![CDATA[
    <pre><tt><font color="#0000C0">package</font> <font color="#BA2121">com.example.mypackage;</font></tt>
</pre>
    ]]>
</string>

    <string name="java_code_syn7">
    <![CDATA[
    <pre><tt><font color="#0000C0">enum</font> <font color="#BA2121">DayOfWeek</font> {
        \n<font color="#1A1AA6">MONDAY</font>, <font color="#1A1AA6">TUESDAY</font>, <font color="#1A1AA6">WEDNESDAY</font>,
        <font color="#1A1AA6">THURSDAY</font>, <font color="#1A1AA6">FRIDAY</font>, <font color="#1A1AA6">SATURDAY</font>,
        <font color="#1A1AA6">SUNDAY</font>
    \n}</tt>
</pre>
    ]]>
</string>
    <string name="java_code_syn_1_1">
    <![CDATA[
    <pre><tt><font color="#0000C0">public class</font> <font color="#BA2121">Main</font> {
    <font color="#0000C0">\n\tpublic static void</font> <font color="#BA2121">main</font>(<font color="#0000C0">String</font>[] args) {
        \n\t\t//using System.out.println
        <font color="#007F00">\n\t\t\tSystem.out.println</font>(<font color="#1A1AA6">"Hi"</font>);
        <font color="#007F00">\n\t\t\tSystem.out.println</font>(<font color="#1A1AA6">"Hello"</font>);
        \n
        \n\t\t//using System.out.printf
        \n\t\t\t<font color="#007F00">double</font> pi = 3.14159;
        <font color="#007F00">\n\t\t\tSystem.out.printf</font>(<font color="#1A1AA6">"The value of pi is %.2f%n", pi</font>);
        \n
        \n\t\t//using System.out.format()
        \n\t\t\t<font color="#007F00">int</font> num = 42;
        <font color="#007F00">\n\t\t\tSystem.out.printformat</font>(<font color="#1A1AA6">"The answer is %d%n", num</font>);
        \n
        \n\t\t//using System.out.println() with Escape Sequences
        <font color="#007F00">\n\t\t\tSystem.out.println</font>(<font color="#1A1AA6">"First line&bsol;tSecond line"</font>);
        <font color="#007F00">\n\t\t\tSystem.out.println</font>(<font color="#1A1AA6">"Line 1&bsol;nLine 2"</font>);
        \n
        \n\t\t//using System.out.print
        <font color="#007F00">\n\t\t\tSystem.out.print</font>(<font color="#1A1AA6">"Hello,"</font>);
        <font color="#007F00">\n\t\t\tSystem.out.print</font>(<font color="#1A1AA6">"World!"</font>);
        <font color="#007F00">\n\t\t\tSystem.out.println</font>(<font color="#1A1AA6"></font>);
        \n
        <font color="#007F00">\n\t\t\tSystem.out.println</font>(<font color="#1A1AA6"></font>);
        \n
        \n\t\t//using System.out.write()
        \n\t\t\t<font color="#007F00">char</font> ch = \'A\';
        <font color="#007F00">\n\t\t\tSystem.out.write</font>(<font color="#1A1AA6">ch</font>);



    \n\t}
\n}</tt>
</pre>
    ]]>
</string>

    <string name="java_terms"><b>class method -</b> A class is a blueprint for creating objects. It defines the properties and behaviors that an object of that class will possess. Each program must have a class name and should always start with an uppercase first letter and must match the file name of the program.
    \n\n<b>main method -</b> Each program processing starts from the main() method, which is a mandatory part of every Java program. All method names should start with a lowercase letter. If several words are used to form the name of the method, then each inner word’s first letter should be in uppercase.
    \n\n<b>System.out.println() -</b> This method is used to print text or values followed by a newline character, effectively moving to the next line after printing.
    \n\n<b>System.out.printf() -</b> This method is used to format and print text with specified format specifiers, similar to the printf function in C. It allows you to control the formatting of output, such as specifying decimal places for floating-point numbers.
    \n\n<b>System.out.printformat() -</b> This method is similar to printf() and is used for formatted printing. It provides more control over the formatting of output.
    \n\n<b>System.out.println() with Escape Sequences -</b> You can also use escape sequences to print special characters like tabs (\t) or newlines (\n) within your output.
    \n\n<b>System.out.print() -</b> This method is used to print text or values without adding a newline character at the end. Multiple calls to this method will result in consecutive output on the same line.
    \n\n<b>System.out.write() -</b> This method is used to write a single character to the output stream.
</string>

    <string name="java_system_println"><b>System</b> is a built-in Java class that contains useful members, such as <b>out</b>, which is short for "output". The <b>println()</b> method, short for "print line", is used to print a value to the screen (or a file).
    \n\nLastly, each code statement must end with a semicolon (<b>;</b>).
</string>

    <string name="python_terms1"><b>Basic print() -</b> The print() function is used to output text or values to the console. By default, it adds a newline character at the end of the output.
        </string>
    <string name="python_terms2"><b>Print without newline -</b> You can use the end parameter to modify the ending character for the print statement, allowing you to suppress the newline character.
        </string>
    <string name="python_terms3"><b>Formatted print -</b> Python\'s str.format() method is used for string formatting, allowing you to insert values into a string at specified locations.
        </string>
    <string name="python_terms4"><b>Formatted print using f-strings (Python 3.6+) -</b>  F-strings provide a concise way to format strings with embedded expressions. They are enclosed in curly braces {} and prefixed with the letter \'f\'.
        </string>
    <string name="python_terms5"><b>Printing multiple values -</b> You can pass multiple arguments to the print() function, and they will be printed with spaces in between.
        </string>
    <string name="python_terms6"><b>Printing with sep parameter -</b> The sep parameter specifies the separator between values when printing multiple items.
        </string>

    <string name="java_code_single_line_comment">
    <![CDATA[Example
    <pre><tt><font color="#008000">\n//This comment just has one line.</font></tt></pre>
    ]]>
</string>

    <string name="java_code_multi_line_comment">
    <![CDATA[
    <pre><tt>Example:
<font color="#000000">\n/*</font>
<font color="#008000">\nThis comment consists of several lines.</font>
<font color="#008000">\nIt may vary according to the preference of the developer.</font>
<font color="#000000">\n*/</font></tt></pre>
    ]]>
</string>

    <string name="java_code_square_function">
    <![CDATA[
    <pre><tt>Example:
<font color="#008000">\n/**
 \n* Calculates and returns the square of a given number.
 \n*
 \n* @param number the input number
 \n* @return the square of the number
 \n* @throws IllegalArgumentException if the number is negative
 \n*/</font>
\npublic int calculateNum(int number) {
    \n\tif (number != 0) {
        \n\t\t<font color="#FF0000">throw new IllegalArgumentException("Error! Number must be equal to 0");</font>
    \n\t}
    \n\treturn number * number;
\n}</tt></pre>
    ]]>
</string>

    <string name="java_variable_example">
    <![CDATA[
    <pre><tt><font color="#000000">Example</font>.
<font color="#267F99">\ntype</font> <font color="#BA2121">variableName</font> = <font color="#1A1AA6">value</font>;</tt></pre>
    ]]></string>

    <string name="java_code_example1">
    <![CDATA[
    <pre><tt><font color="#000000">Example</font>
<font color="#267F99">\nint</font> <font color="#BA2121">myNum</font> = <font color="#1A1AA6">15</font>;
<font color="#267F99">\nSystem</font>.<font color="#267F99">out</font>.<font color="#267F99">println</font>(<font color="#BA2121">myNum</font>);</tt></pre>
    ]]></string>

    <string name="java_variable_example1">
    <![CDATA[
    <pre><tt><font color="#000000">Example</font>
<font color="#267F99">\nint</font> <font color="#BA2121">myNum</font>;
<font color="#BA2121">\nmyNum</font> = <font color="#1A1AA6">15</font>;
<font color="#267F99">\nSystem</font>.<font color="#267F99">out</font>.<font color="#267F99">println</font>(<font color="#BA2121">myNum</font>);</tt></pre>
     ]]></string>

    <string name="java_variable_example2">
    <![CDATA[
    <pre><tt><font color="#000000">Example</font>
<font color="#267F99">\nint</font> <font color="#BA2121">myNum</font> = <font color="#1A1AA6">5</font>;
<font color="#267F99">\nfloat</font> <font color="#BA2121">myFloatNum</font> = <font color="#1A1AA6">5.99f</font>;
<font color="#267F99">\nchar</font> <font color="#BA2121">myLetter</font> = \'<font color="#1A1AA6">D</font>\';
<font color="#267F99">\nboolean</font> <font color="#BA2121">myBool</font> = <font color="#007400">true</font>;
<font color="#267F99">\nString</font> <font color="#BA2121">myText</font> = "<font color="#1A1AA6">Hello</font>";</tt></pre>
    ]]></string>

    <string name="java_example8">
    <![CDATA[
    <pre><tt><font color="#267F99">import</font> <font color="#267F99">java.util.Scanner;</font>  <font color="#60A48F">// Import the Scanner class</font>
<font color="#267F99">class</font> <font color="#BA2121">Main</font> {
  <font color="#267F99">\n\tpublic static void</font> <font color="#BA2121">main</font>(<font color="#267F99">String</font>[] <font color="#BA2121">args</font>) {
    <font color="#267F99">\n\tScanner</font> <font color="#BA2121">myObj</font> = <font color="#267F99">new</font> <font color="#267F99">Scanner</font>(<font color="#267F99">System.in</font>);  <font color="#60A48F">// Create a Scanner object</font>
    <font color="#267F99">\n\tSystem.out.println</font>("Enter username");

    <font color="#267F99">\n\tString</font> <font color="#BA2121">userName</font> = <font color="#BA2121">myObj</font>.<font color="#267F99">nextLine</font>();  <font color="#60A48F">// Read user input</font>
    <font color="#267F99">\n\tSystem.out.println</font>("Username is: " + <font color="#BA2121">userName</font>);  <font color="#60A48F">// Output user input</font>
  \n\t}
\n}</tt></pre>
    ]]></string>

    <string name="method_description"><b>Method and its description</b>
    \n<b>nextBoolean():</b> Reads a boolean value from the user.
    \n\n<b>nextByte():</b> Reads a byte value from the user.
    \n\n<b>nextDouble():</b> Reads a double value from the user.
    \n\n<b>nextFloat():</b> Reads a float value from the user.
    \n\n<b>nextInt():</b> Reads an int value from the user.
    \n\n<b>nextLine():</b> Reads a String value from the user.
    \n\n<b>nextLong():</b> Reads a long value from the user.
    \n\n<b>nextShort():</b> Reads a short value from the user.
</string>

    <string name="java_example9">
    <![CDATA[
    <pre><tt><font color="#267F99">import</font> <font color="#267F99">java.util.Scanner;</font>
<font color="#267F99">\nclass</font> <font color="#BA2121">Main</font> {
  <font color="#267F99">\n\tpublic static void</font> <font color="#BA2121">main</font>(<font color="#267F99">String</font>[] <font color="#BA2121">args</font>) {
    <font color="#267F99">\n\t\tScanner</font> <font color="#BA2121">myObj</font> = <font color="#267F99">new</font> <font color="#267F99">Scanner</font>(<font color="#267F99">System.in</font>);

    <font color="#267F99">\n\t\tSystem.out.println</font>("Enter name, age and salary:");

    <font color="#60A48F">\n\t\t// String input</font>
    <font color="#267F99">\n\t\tString</font> <font color="#BA2121">name</font> = <font color="#BA2121">myObj</font>.<font color="#267F99">nextLine</font>();

    <font color="#60A48F">\n\t\t// Numerical input</font>
    <font color="#267F99">\n\t\tint</font> <font color="#BA2121">age</font> = <font color="#BA2121">myObj</font>.<font color="#267F99">nextInt</font>();
    <font color="#267F99">\n\t\tdouble</font> <font color="#BA2121">salary</font> = <font color="#BA2121">myObj</font>.<font color="#267F99">nextDouble</font>();

    <font color="#60A48F">\n\t\t// Output input by user</font>
    <font color="#267F99">\n\t\tSystem.out.println</font>("Name: " + <font color="#BA2121">name</font>);
    <font color="#267F99">\n\t\tSystem.out.println</font>("Age: " + <font color="#BA2121">age</font>);
    <font color="#267F99">\n\t\tSystem.out.println</font>("Salary: " + <font color="#BA2121">salary</font>);
  \n\t}
\n}</tt></pre>
    ]]></string>

    <string name="java_primitive_data_types">
    <b>1. Primitive Data Types:</b>
    \n\t\t\t\t<b>int:</b> Used to store whole numbers.
    \n\t\t\t\t\t\tint myNumber = 42;

    \n\n\t\t\t\t<b>double:</b> Used to store decimal numbers.
    \n\t\t\t\t\t\tdouble myDecimalNumber = 3.14159;

    \n\n\t\t\t\t<b>boolean:</b> Used to store true/false values.
    \n\t\t\t\t\t\tboolean isTrue = true;

    \n\n\t\t\t\t<b>char:</b> Used to store a single character.
    \n\t\t\t\t\t\tchar myChar = \'A\';
</string>

    <string name="java_example10">
    <![CDATA[
    <pre><tt><font color="#267F99">interface</font> <font color="#BA2121">MyInterface</font> {
         <font color="#267F99">\n\tvoid</font> <font color="#BA2121">myMethod</font>();
     \n}</tt></pre>
    ]]></string>
    <string name="class_myclass_myclass_class"><![CDATA[Class<?> myClass = MyClass.class;]]></string>
    <string name="dt_a"><b>A. int:</b> Used to store whole numbers.</string>
    <string name="dt_b"><b>B. double:</b> Used to store decimal numbers.</string>
    <string name="dt_c"><b>C. boolean:</b> Used to store true/false values.</string>
    <string name="dt_d"><b>D. char:</b> Used to store a single character.</string>
    <string name="dt1_a"><b>A. String:</b> Used to store sequences of characters.</string>
    <string name="dt1_b"><b>B. Array:</b> Used to store a collection of elements of the same type.</string>
    <string name="dt1_c"><b>C. Object:</b> Used to store instances of user-defined classes.</string>
    <string name="dt1_d"><b>D. Class:</b> Used to store the definition of a class.</string>
    <string name="dt1_e"><b>E. Interface:</b> Used to store the definition of an interface.</string>

    <string name="java_arithmetic_logical_operators"><b>Arithmetic operators: </b>Arithmetic operators, such as addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and unary operators like increment (++), decrement (--), and negation (-), are used to do mathematical computations.\n\n<b>Logical operators:</b> The employment of logical operators allows for the logical manipulation of boolean values and the generation of boolean results. Java supports the following logical operators: logical AND (&amp;&amp;), logical OR (||), and logical NOT (!).</string>

    <string name="java_assignment_bitwise_operators"><b>Operators for Assignment:</b> Operators for Assignment are used to assign values to variables. The equals symbol (<b>=</b>) is used as the most frequent assignment operator. The assignment operation can be combined with another operation using compound assignment operators like <b>+=</b>, <b>-=</b>, <b>*=</b>, <b>/=</b>, and <b>%=</b>.
    \n\n<b>Bitwise operators:</b> These operators work with the individual bits of numeric operands. These include left shift (<b>&lt;&lt;</b>), right shift (<b>&gt;&gt;</b>), and unsigned right shift (<b>&gt;&gt;&gt;</b>). They also include bitwise AND (<b>&amp;</b>), bitwise OR (<b>|</b>), bitwise XOR (<b>^</b>), bitwise complement (<b>~</b>), and left shift (<b>&lt;&lt;</b>).
    \n\n<b>The ternary operator (?:):</b> is a conditional operator that accepts three operands and returns a value in response to a condition. It is applied to conditional phrases that are concise.
</string>
    <string name="op1"><b>A. ==:</b> Equal to operator.</string>
    <string name="op2"><b>B. !=:</b> Not equal to operator.</string>
    <string name="op3"><b>C. >:</b> Greater than operator.</string>
    <string name="op4"><b>D. \u003c:</b> Less than operator.</string>
    <string name="op5"><b>E. >=:</b> Greater than or equal to operator.</string>
    <string name="op6"><b>F. \u003c=:</b> Less than or equal to operator.</string>
    <string name="ope1"><b>A. +:</b> Addition operator.</string>
    <string name="ope2"><b>B. -:</b> Subtraction operator.</string>
    <string name="ope3"><b>C. *:</b> Multiplication operator.</string>
    <string name="ope4"><b>D. /:</b> Division operator.</string>
    <string name="ope6"><b>E. %:</b> Modulus operator (remainder of division).</string>
    <string name="ope7"><b>A. =:</b> Simple assignment operator.</string>
    <string name="ope8"><b>B. +=:</b> Add and assign operator.</string>
    <string name="ope9"><b>C. -=:</b> Subtract and assign operator.</string>
    <string name="ope10"><b>D. *=:</b> Multiply and assign operator.</string>
    <string name="ope11"><b>E. /=:</b> Divide and assign operator.</string>

    <string name="j_operators_description">• Less than:  &lt;
    \n• Less than or equal to:  &lt;=
    \n• Greater than: a &gt; b
    \n• Greater than or equal to: &gt;=
    \n• Equal to:  ==
    \n• Not Equal to:  !=
</string>
    <string name="j_operators_description1">• logical AND: &amp;&amp;
    \n• logical OR: ||
    \n• logical NOT: !
</string>

    <string name="j_loop_description">• The <b>for loop</b> is commonly used when you know the number of iterations in advance.
    \n• The <b>while loop</b> is suitable when the number of iterations is not known in advance, and the loop continues until a specified condition becomes false.
    \n• The <b>do-while loop</b> is similar to the while loop, but it guarantees that the loop body is executed at least once.
    \n• The <b>foreach loop</b> is specifically designed for iterating over elements of an array or a collection.
</string>
    <string name="java_example11">
    <![CDATA[
    <pre><tt><font color="#267F99">for</font> (<font color="#BA2121">initialization</font>; <font color="#BA2121">condition</font>; <font color="#BA2121">iteration</font>) {
        <font color="#008000">\n\t// code to be executed in each iteration</font>
    \n}</tt></pre>
    ]]></string>

    <string name="java_example12">
    <![CDATA[
    <pre><tt><font color="#267F99">Example:</font>
    <font color="#267F99">\nfor</font> (<font color="#0000C8">int</font> i = 1; i <= 5; i++) {
        <font color="#267F99">\n\tSystem.out.println</font>("Iteration: " + i);
    \n}
    <font color="#267F99">\n\nOutput:</font>
    \nIteration: 1
    \nIteration: 2
    \nIteration: 3
    \nIteration: 4
    \nIteration: 5</tt></pre>
    ]]></string>
    <string name="j_loop"><![CDATA[In this example, the for loop iterates from i = 1 to i <= 5, incrementing i by 1 after each iteration. The loop body consists of a single statement that prints the iteration number.]]></string>
    <string name="java_example13">
    <![CDATA[
    <pre><tt><font color="#267F99">while</font> (condition) {
        <font color="#7F0055">\n\t// code to be executed in each iteration</font>
    \n}</tt></pre>
    ]]></string>


    <string name="java_example14">
    <![CDATA[<pre><tt><font color="#267F99">int</font> count = 1;
    <font color="#267F99">\nwhile</font> (count <= 5) {
        \n\tSystem.out.println("Count: " + count);
        \n\tcount++;
    \n}</tt></pre>
    ]]></string>

    <string name="java_example_code"><![CDATA[<pre><code><font color="#267F99">int</font> count = 1;
        \n<font color="#267F99">while</font> (count <= 5) {
            \n\t<font color="#267F99">System.out.println</font>("Count: " + count);
            \n\tcount++;
        \n}

        \n\n<font color="#267F99">Output:</font>
        \nCount: 1
        \nCount: 2
        \nCount: 3
        \nCount: 4
        \nCount: 5
    </code></pre>
    ]]>
</string>
    <string name="do_while_example_code">
    <![CDATA[
    <pre><code><font color="#267F99">do</font> {
            <font color="#A9A2A2">\n\t// code to be executed in each iteration</font>
        \n} <font color="#267F99">while</font> (condition);
    </code></pre>
    ]]>
</string>
    <string name="while_j"><![CDATA[The while loop starts with the condition count <= 5. The loop body will execute as long as the condition is true. Inside the loop, the current value of count is printed using System.out.println(), and then count is incremented by 1 (count++). This ensures that the loop will eventually terminate when count becomes greater than 5.]]></string>
    <string name="do_while_j1"><![CDATA[The while loop starts with the condition count <= 5. The loop body will execute as long as the condition is true. Inside the loop, the current value of count is printed using System.out.println(), and then count is incremented by 1 (count++). This ensures that the loop will eventually terminate when count becomes greater than 5.]]></string>


    <string name="do_while_loop_example">
    <![CDATA[
    <pre><code><font color="#0000FF">import</font> java.util.Scanner;

        <font color="#267F99">\n\npublic class</font> <font color="#FF5733">DoWhileLoopExample</font> {
            <font color="#00A300">\n\tpublic static void</font> main(String[] args) {
                \n\t\tScanner scanner = <font color="#0000FF">new</font> Scanner(System.in);
                \n\t\tint number;

                <font color="#267F99">\n\t\t\tdo</font> {
                    \n\t\t\t\tSystem.out.print("<font color="#00A300">Enter a positive number (0 to exit):</font> ");
                    \n\t\t\t\tnumber = scanner.nextInt();

                    <font color="#00A300">\n\t\t\t\tif</font> (number > 0) {
                        \n\t\t\t\t\tSystem.out.println("You entered: " + number);
                    \n\t\t\t\t} <font color="#00A300">else</font> {
                        \n\t\t\t\t\tSystem.out.println("Invalid number!");
                    \n\t\t\t\t}
                \n\t\t\t} <font color="#267F99">while</font> (number != 0);

                \n\t\t\tSystem.out.println("<font color="#00A300">Loop exited. Goodbye!</font>");
                \n\t\t\tscanner.close();
            \n\t\t}
        \n\t}

        <font color="#267F99">\n\nOutput:</font>
        <font color="#00A300">\nEnter a positive number (0 to exit):</font> 5
        <font color="#267F99">\nYou entered:</font> 5
        <font color="#00A300">\nEnter a positive number (0 to exit):</font> -2
        <font color="#267F99">\nInvalid number!</font>
        <font color="#00A300">\nEnter a positive number (0 to exit):</font> 10
        <font color="#267F99">\nYou entered:</font> 10
        <font color="#00A300">\nEnter a positive number (0 to exit):</font> 0
        <font color="#267F99">\nLoop exited. Goodbye!</font>
    </code></pre>
    ]]>
</string>

    <string name="for_each_loop_example"><![CDATA[
    <pre><code><font color="#267F99">for</font> (<font color="#0000FF">elementDataType</font> element : <font color="#FF5733">collection</font>) {
            <font color="#A9A2A2">\n\t// code to be executed in each iteration</font>
        \n}
    </code></pre>
    ]]>
</string>

    <string name="for_each_array_example">
    <![CDATA[
    <pre><code><font color="#0000FF">int</font>[] numbers = {<font color="#000000">1</font>, <font color="#000000">2</font>, <font color="#000000">3</font>, <font color="#000000">4</font>, <font color="#000000">5</font>};
        <font color="#267F99">\nfor</font> (<font color="#0000FF">int</font> number : numbers) {
            \n\tSystem.out.println(number);
        \n}

        <font color="#267F99">\n\nOutput:</font>
        <font color="#000000">\n1</font>
        <font color="#000000">\n2</font>
        <font color="#000000">\n3</font>
        <font color="#000000">\n4</font>
        <font color="#000000">\n5</font>
    </code></pre>
    ]]>
</string>
    <string name="control_flow_description">• Use <b>if</b> to specify a block of code to be executed, if a specified condition is true.
    \n• Use <b>else</b> to specify a block of code to be executed, if the same condition is false.
    \n• Use <b>else if</b> to specify a new condition to test, if the first condition is false.
    \n• Use <b>Nested if statements</b> to specify multiple conditions and control the flow of your program.
    \n• Use  <b>switch</b> to specify many alternative blocks of code to be executed

</string>


    <string name="if_statement_example">
    <![CDATA[
    <pre><code><font color="#267F99">if</font> (<font color="#FF5733">condition</font>) {
            <font color="#A9A2A2">\n\t// block of code to be executed if the condition is true</font>
        \n}
    </code></pre>
    ]]>
</string>

    <string name="if_statement_example1"><![CDATA[
    <pre><code><font color="#267F99">if</font> (<font color="#0000FF">20</font> > <font color="#0000FF">18</font>) {
            \n\tSystem.out.println("20 is greater than 18");
        \n}

        <font color="#267F99">\n\nOutput:</font>
        <font color="#000000">\n20 is greater than 18</font>

    </code></pre>
    ]]>
</string>

    <string name="if_statement_example2"><![CDATA[
    <pre><code><font color="#0000FF">int</font> x = <font color="#0000FF">20</font>;
        \n<font color="#0000FF">int</font> y = <font color="#0000FF">18</font>;
        \n<font color="#267F99">if</font> (x > y) {
            \n\tSystem.out.println("x is greater than y");
        \n}

        <font color="#267F99">\n\nOutput:</font>
        <font color="#000000">\nx is greater than y</font>
    </code></pre>
    ]]>
</string>


    <string name="if_else_statement_example"><![CDATA[<pre><code><font color="#267F99">if</font> (<font color="#FF5733">condition</font>) {
            \n\t<font color="#A9A2A2">// block of code to be executed if the condition is true</font>
        \n} <font color="#267F99">else</font> {
            \n\t<font color="#A9A2A2">// block of code to be executed if the condition is false</font>
        \n}
    </code></pre>
    ]]>
</string>

    <string name="if_else_statement_example1"><![CDATA[<pre><code><font color="#0000FF">int</font> x = <font color="#0000FF">5</font>;
        \n<font color="#267F99">if</font> (x > <font color="#000000">0</font>) {
            \n\tSystem.out.println("x is positive");
        \n} <font color="#267F99">else</font> {
            \n\tSystem.out.println("x is not positive");
        \n}

        \n\n<font color="#
        ">Output:</font>
        \nx is positive
    </code></pre>
    ]]>
</string>

    <string name="if_else_if_else_statement_example"><![CDATA[<pre><code><font color="#267F99">if</font> (<font color="#FF5733">condition1</font>) {
            \n\t<font color="#A9A2A2">// block of code to be executed if condition1 is true</font>
        \n} <font color="#267F99">else if</font> (<font color="#FF5733">condition2</font>) {
            \n\t<font color="#A9A2A2">// block of code to be executed if condition1 is false and condition2 is true</font>
        \n} <font color="#267F99">else</font> {
            \n\t<font color="#A9A2A2">// block of code to be executed if condition1 is false and condition2 is false</font>
        \n}
    </code></pre>
    ]]>
</string>

    <string name="if_else_if_else_statement_example1"><![CDATA[<pre><code><font color="#0000FF">int</font> x = <font color="#0000FF">5</font>;
        \n<font color="#267F99">if</font> (x > <font color="#000000">0</font>) {
            \n\tSystem.out.println("x is positive");
        \n} <font color="#267F99">else if</font> (x < <font color="#000000">0</font>) {
            \n\tSystem.out.println("x is negative");
        \n} <font color="#267F99">else</font> {
            \n\tSystem.out.println("x is zero");
        \n}

        <font color="#267F99">\n\nOutput:</font>
        \nx is positive
    </code></pre>
    ]]>
</string>

    <string name="nested_if_else_example"><![CDATA[<pre><code><font color="#267F99">if</font> (<font color="#FF5733">condition1</font>) {
            \n\t<font color="#A9A2A2">// code to execute if condition1 is true</font>

            \n\t<font color="#267F99">if</font> (<font color="#FF5733">condition2</font>) {
                \n\t\t<font color="#A9A2A2">// code to execute if both condition1 and condition2 are true</font>
            \n\t} <font color="#267F99">else</font> {
                \n\t\t<font color="#A9A2A2">// code to execute if condition1 is true but condition2 is false</font>
            \n\t}
        \n} <font color="#267F99">else</font> {
            \n\t<font color="#A9A2A2">// code to execute if condition1 is false</font>
        \n}
    </code></pre>
    ]]>
</string>

    <string name="nested_if_else_example1"><![CDATA[<pre><code><font color="#0000FF">int</font> age = <font color="#0000FF">20</font>;
        \n<font color="#0000FF">boolean</font> hasLicense = <font color="#0000FF">true</font>;

        \n<font color="#267F99">if</font> (age >= <font color="#000000">18</font>) {
            \n\tSystem.out.println("You are eligible to apply for a driving license.");

            \n\t<font color="#267F99">if</font> (hasLicense) {
                \n\t\tSystem.out.println("You already have a driving license.");
            \n\t} <font color="#267F99">else</font> {
                \n\t\tSystem.out.println("You don't have a driving license yet.");
            \n\t}
        \n} <font color="#267F99">else</font> {
            \n\tSystem.out.println("You are not eligible to apply for a driving license.");
        \n}

        <font color="#267F99">\n\nOutput:</font>
        \nYou are eligible to apply for a driving license.
        \nYou already have a driving license.
    </code></pre>
    ]]>
</string>

    <string name="array_description">• <b>Fixed Size:</b> When an array is created, the allocation of size is fixed and cannot be changed, so before declaring, specify the size that needs to be created.
    \n• <b>Indexed Elements:</b> All elements that are declared in an array have a unique index starting from 0, which indicates their position within the array. They can be accessed through their index.
    \n• <b>Contiguous Memory Allocation:</b> All elements of the array are stored in contiguous memory locations, allowing for more efficient access when referencing element values.
</string>

    <string name="string_array_declaration">
    <![CDATA[
    <pre><code><font color="#0000FF">String</font>[] variable;
    </code></pre>
    ]]>
</string>

    <string name="string_array_initialization">
    <![CDATA[
    <pre><code><font color="#0000FF">String</font>[] variable = {&quot;Object&quot;, &quot;Values&quot;, &quot;List&quot;, &quot;Variables&quot;, &quot;Characters&quot;};
    </code></pre>
    ]]>
</string>

    <string name="integer_array_initialization">
    <![CDATA[
    <pre><code><font color="#0000FF">int</font>[] varNum = {1, 2, 3, 4, 5};
    </code></pre>
    ]]>
</string>

    <string name="integer_array_declaration">
    <![CDATA[
    <pre><code>numbers = <font color="#0000FF">new</font> int[5];
    </code></pre>
    ]]>
</string>

    <string name="integer_array_initialization1">
    <![CDATA[
    <pre><code><font color="#0000FF">int</font>[] numbers = <font color="#0000FF">new</font> int[] { 1, 2, 3, 4, 5 };
    </code></pre>
    ]]>
</string>

    <string name="string_array_and_output"><![CDATA[<pre><code><font color="#0000FF">String</font>[] variable = {<font color="#000000">&quot;Object&quot;</font>, <font color="#000000">&quot;Values&quot;</font>, <font color="#000000">&quot;List&quot;</font>, <font color="#000000">&quot;Variables&quot;</font>, <font color="#000000">&quot;Characters&quot;</font>};
        \n<font color="#267F99">System.out.println</font>(variable[<font color="#000000">0</font>]);

        \n\n<font color="#267F99">Output:</font>
        \n<font color="#000000">Object</font>
    </code></pre>
    ]]>
</string>
    <string name="string_array_update">
    <![CDATA[
    <pre><code>variable[<font color="#000000">0</font>] = <font color="#000000">&quot;subject&quot;</font>;
    </code></pre>
    ]]>
</string>

    <string name="string_array_example_and_output">
    <![CDATA[
    <pre><code><font color="#0000FF">String</font>[] variable = {<font color="#000000">&quot;Object&quot;</font>, <font color="#000000">&quot;Values&quot;</font>, <font color="#000000">&quot;List&quot;</font>, <font color="#000000">&quot;Variables&quot;</font>, <font color="#000000">&quot;Characters&quot;</font>};
        \nvariable[<font color="#000000">0</font>] = <font color="#FF0000">&quot;Subject&quot;</font>;
        \n<font color="#267F99">System.out.println</font>(variable[<font color="#000000">0</font>]);

        \n\n<font color="#267F99">Output:</font>
        \n<font color="#000000">Subject</font>
    </code></pre>
    ]]>
</string>

    <string name="integer_array_example">
    <![CDATA[
    <pre><code>
        <font color="#0000FF">int</font>[] numbers = { <font color="#000000">1</font>, <font color="#000000">2</font>, <font color="#000000">3</font>, <font color="#000000">4</font>, <font color="#000000">5</font> };
    </code></pre>
    ]]>
</string>

    <string name="integer_array_access">
    <![CDATA[
    <pre><code>
        <font color="#0000FF">int</font> value = numbers[<font color="#FF5733">2</font>];  <font color="#A9A2A2">// Retrieves the value <font color="#267F99">3</font></font>
    </code></pre>
    ]]>
</string>

    <string name="two_dimensional_array_example">
    <![CDATA[
    <pre><code>
        <font color="#0000FF">int</font>[][] matrix = {
            { <font color="#000000">1</font>, <font color="#000000">2</font>, <font color="#000000">3</font> },
            { <font color="#000000">4</font>, <font color="#000000">5</font>, <font color="#000000">6</font> }
        };
    </code></pre>
    ]]>
</string>

    <string name="two_dimensional_array_access">
    <![CDATA[
    <pre><code>
        <font color="#0000FF">int</font> element = matrix[<font color="#FF5733">1</font>][<font color="#FF5733">2</font>];  <font color="#A9A2A2">// Retrieves the value <font color="#267F99">6</font></font>
    </code></pre>
    ]]>
</string>

    <string name="java_program_output">
    <![CDATA[
    <pre><code>
        <font color="#008000">// Java Program to print the array elements using for-each loop</font>
        <font color="#0000FF">\nclass</font> Testarray1 {
            <font color="#0000FF">\n\tpublic static void main</font>(<font color="#0000FF">String</font> args[]) {
                <font color="#0000FF">\n\t\tint</font> arr[] = { <font color="#000000">33</font>, <font color="#000000">3</font>, <font color="#000000">4</font>, <font color="#000000">5</font> };

                <font color="#008000">\n\t\t// printing array using for-each loop</font>
                <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> i : arr) {
                    <font color="#267F99">\n\t\t\tSystem.out.println</font>(i);
                \n\t\t}
                \n\t}
            \n}


        <font color="#267F99">\n\nOutput:</font>
        <font color="#000000">\n33</font>
        <font color="#000000">\n3</font>
        <font color="#000000">\n4</font>
        <font color="#000000">\n5</font>
    </code></pre>
    ]]>
</string>

    <string name="java_program_output1">
    <![CDATA[
    <pre><code><font color="#008000">// Java Program to demonstrate the way of passing an array</font>
<font color="#0000FF">\nclass</font> Testarray2 {
    <font color="#008000">\n\t// creating a method which receives an array as a parameter</font>
    <font color="#0000FF">\n\tstatic void</font> min(int arr[]) {
        <font color="#0000FF">\n\t\tint</font> min = arr[<font color="#000000">0</font>];
        <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> i = <font color="#000000">1</font>; i < <font color="#0000FF">arr.length</font>; i++)
            <font color="#267F99">\n\t\t\tif</font> (min > arr[i])
                \n\t\t\t\tmin = arr[i];

        <font color="#267F99">\n\t\tSystem.out.println</font>(min);
    \n\t}

    <font color="#0000FF">\npublic static void</font> main(<font color="#0000FF">String</font> args[]) {
        <font color="#0000FF">\n\tint</font> a[] = { <font color="#000000">33</font>, <font color="#000000">3</font>, <font color="#000000">4</font>, <font color="#000000">5</font> }; <font color="#008000">// declaring and initializing an array</font>
        <font color="#267F99">\n\tmin</font>(a); <font color="#008000">// passing array to method</font>
    \n\t}
\n}

<font color="#267F99">\n\nOutput:</font>
<font color="#000000">\n3</font>
    </code></pre>
    ]]>
</string>

    <string name="java_program_output2">
    <![CDATA[
    <pre><code>
<font color="#008000">// Java Program to demonstrate the way of passing an anonymous array</font>
<font color="#0000FF">\npublic class</font> TestAnonymousArray {
    <font color="#008000">\n\t// creating a method which receives an array as a parameter</font>
    <font color="#0000FF">\n\tstatic void</font> printArray(int arr[]) {
        <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> i = <font color="#000000">0</font>; i < <font color="#0000FF">arr.length</font>; i++)
            <font color="#267F99">\n\t\t\tSystem.out.println</font>(arr[i]);
    \n\t\t}
    \n\t}

    <font color="#0000FF">\n\tpublic static void</font> main(<font color="#0000FF">String</font> args[]) {
        <font color="#267F99">\n\t\tprintArray</font>(<font color="#008000">new int[]{10,22,44,66}</font>); <font color="#008000">// passing anonymous array to method</font>
    \n\t}
\n}

<font color="#267F99">\n\nOutput:</font>
<font color="#000000">\n10</font>
<font color="#000000">\n22</font>
<font color="#000000">\n44</font>
<font color="#000000">\n66</font>
    </code></pre>
    ]]>
</string>

    <string name="java_program_output3">
    <![CDATA[
    <pre><code>
<font color="#008000">// Java Program to demonstrate the way of passing an anonymous array</font>
<font color="#0000FF">\npublic class</font> TestAnonymousArray {
    <font color="#008000">\n\t// creating a method which receives an array as a parameter</font>
    <font color="#0000FF">\n\tstatic void</font> printArray(int arr[]) {
        <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> i = <font color="#000000">0</font>; i < <font color="#0000FF">arr.length</font>; i++)
            <font color="#267F99">System.out.println</font>(arr[i]);
    }

    <font color="#0000FF">public static void</font> main(<font color="#0000FF">String</font> args[]) {
        <font color="#267F99">printArray</font>(<font color="#0000FF">new int</font>[] { <font color="#000000">10</font>, <font color="#000000">22</font>, <font color="#000000">44</font>, <font color="#000000">66</font> }); <font color="#008000">// passing anonymous array to method</font>
    }
}

<font color="#267F99">Output:</font>
<font color="#000000">10</font>
<font color="#000000">22</font>
<font color="#000000">44</font>
<font color="#000000">66</font>
    </code></pre>
    ]]>
</string>

    <string name="java_program_output4">
    <![CDATA[
    <pre><code>
<font color="#008000">// Java Program to return an array from the method</font>
<font color="#0000FF">\nclass</font> TestReturnArray {
    <font color="#008000">\n\t// creating method which returns an array</font>
    <font color="#0000FF">\n\tstatic int</font>[] get() {
        <font color="#267F99">\n\t\treturn new int</font>[] { <font color="#000000">10</font>, <font color="#000000">30</font>, <font color="#000000">50</font>, <font color="#000000">90</font>, <font color="#000000">60</font> };
    \n\t}

    <font color="#0000FF">\n\n\tpublic static void</font> main(<font color="#0000FF">String</font> args[]) {
        <font color="#008000">\n\t\t// calling method which returns an array</font>
        <font color="#0000FF">\n\t\tint</font>[] arr = <font color="#267F99">get</font>();
        <font color="#008000">\n\t\t// printing the values of an array</font>
        <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> i = <font color="#000000">0</font>; i < <font color="#0000FF">arr.length</font>; i++)
            <font color="#267F99">\n\t\t\tSystem.out.println</font>(arr[i]);
    \n\t}
\n}

<font color="#267F99">\n\nOutput:</font>
<font color="#000000">\n10</font>
<font color="#000000">\n30</font>
<font color="#000000">\n50</font>
<font color="#000000">\n90</font>
<font color="#000000">\n60</font>
    </code></pre>
    ]]>
</string>


    <string name="java_program_output5">
    <![CDATA[
    <pre><code>
<font color="#008000">// Java Program to demonstrate the case of</font>
<font color="#267F99">\n// ArrayIndexOutOfBoundsException in a Java Array.</font>
<font color="#0000FF">\npublic class</font> TestArrayException {
    <font color="#0000FF">\n\tpublic static void</font> main(<font color="#0000FF">String</font> args[]) {
        <font color="#0000FF">\n\t\tint</font> arr[] = { <font color="#000000">50</font>, <font color="#000000">60</font>, <font color="#000000">70</font>, <font color="#000000">80</font> };
        <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> i = <font color="#000000">0</font>; i <= <font color="#0000FF">arr.length</font>; i++) {
            <font color="#267F99">\n\t\t\tSystem.out.println</font>(arr[i]);
        \n\t\t}
    \n\t}
\n}

<font color="#267F99">\n\nOutput:</font>
<font color="#000000">\n50</font>
<font color="#000000">\n60</font>
<font color="#000000">\n70</font>
<font color="#000000">\n80</font>
<font color="#000000">\nException in thread "main"</font>
<font color="#000000">\njava.lang.ArrayIndexOutOfBoundsException: 4</font>
<font color="#000000">\nat TestArrayException.main(TestArrayException.java:</font> <font color="#000000">5)</font>
    </code></pre>
    ]]>
</string>


    <string name="java_program_output6">
    <![CDATA[
    <pre><code>
<font color="#008000">// <span style="color: #008000;">Java Program to illustrate the jagged array</span></font>
<font color="#0000FF">\nclass</font> <font color="#800080">TestJaggedArray</font> {
    <font color="#0000FF">\n\tpublic static void</font> <font color="#800080">main</font>(<font color="#0000FF">String</font>[] <font color="#800080">args</font>) {
        <font color="#008000">\n\t\t// declaring a 2D array with odd columns</font>
        <font color="#0000FF">\n\t\tint</font> <font color="#800080">arr</font>[][] = <font color="#000000">new int</font>[<font color="#000000">3</font>][];

        <font color="#800080">\n\t\tarr</font>[<font color="#000000">0</font>] = <font color="#000000">new int</font>[<font color="#000000">3</font>];
        <font color="#800080">\n\t\tarr</font>[<font color="#000000">1</font>] = <font color="#000000">new int</font>[<font color="#000000">4</font>];
        <font color="#800080">\n\t\tarr</font>[<font color="#000000">2</font>] = <font color="#000000">new int</font>[<font color="#000000">2</font>];

        <font color="#008000">\n\t\t// initializing a jagged array</font>
        <font color="#0000FF">\n\t\tint</font> <font color="#800080">count</font> = <font color="#000000">0</font>;
        <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> <font color="#800080">i</font> = <font color="#000000">0</font>; <font color="#800080">i</font> < <font color="#0000FF">arr.length</font>; <font color="#800080">i</font>++)
            <font color="#267F99">\n\t\t\tfor</font> (<font color="#0000FF">int</font> <font color="#800080">j</font> = <font color="#000000">0</font>; <font color="#800080">j</font> < <font color="#0000FF">arr[i].length</font>; <font color="#800080">j</font>++)
                <font color="#800080">\n\t\t\t\tarr</font>[<font color="#800080">i</font>][<font color="#800080">j</font>] = <font color="#800080">count</font>++;

        <font color="#008000">\n\t\t// printing the data of a jagged array</font>
        <font color="#267F99">\n\t\tfor</font> (<font color="#0000FF">int</font> <font color="#800080">i</font> = <font color="#000000">0</font>; <font color="#800080">i</font> < <font color="#0000FF">arr.length</font>; <font color="#800080">i</font>++) {
            <font color="#267F99">\n\t\t\tfor</font> (<font color="#0000FF">int</font> <font color="#800080">j</font> = <font color="#000000">0</font>; <font color="#800080">j</font> < <font color="#0000FF">arr[i].length</font>; <font color="#800080">j</font>++) {
                <font color="#267F99">\n\t\t\t\tSystem.out.print</font>(<font color="#800080">arr</font>[<font color="#800080">i</font>][<font color="#800080">j</font>] + " ");
            \n\t\t\t}
            <font color="#267F99">\n\t\t\tSystem.out.println</font>(); <font color="#008000">// new line</font>
        \n\t\t}
    \n\t}
\n}

<font color="#267F99">\n\nOutput:</font>
<font color="#000000">\n0 1 2</font>
<font color="#000000">\n3 4 5 6</font>
<font color="#000000">\n7 8</font>
    </code></pre>
    ]]>
</string>
    <string name="exit">Exit</string>
    <string name="c">C#</string>
    <string name="back_button">TODO</string>
    <string name="score_0">Score: 0</string>
    <string name="difficulty">Difficulty:</string>
    <string name="question_1_x">Question: 1/x</string>
    <string name="category">Category:</string>
    <string name="_00_30">00:30</string>
    <string name="questions_here_nquestions_here_nquestions_here">QUESTIONS HERE\nQUESTIONS HERE\nQUESTIONS HERE</string>
    <string name="option_1">Option 1</string>
    <string name="option_2">Option 2</string>
    <string name="option_3">Option 3</string>
    <string name="option_4">Option 4</string>
    <string name="confirm">Confirm</string>
    <string name="a">A.</string>
    <string name="b">B.</string>
    <string name="cc">C.</string>
    <string name="d">D.</string>

    <string name="identifier_rules"><b>Valid Characters:</b> Identifiers can consist of letters (A-Z, a-z), digits (0-9), underscores (_), and dollar signs ($). They must start with a letter, an underscore, or a dollar sign.
    \n\n<b>Length:</b> Identifiers can be of any length. However, it\'s good practice to keep them meaningful and not excessively long.
    \n\n<b>Java Keywords:</b> You cannot use Java reserved keywords (e.g., if, else, for, class, etc.) as identifiers.
    \n\n<b>Unicode Support:</b> Java allows the use of Unicode characters in identifiers, but it is generally recommended to use standard ASCII characters for code readability and compatibility.
</string>

    <string name="p_syn1"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#BA2121">print</font>("Hello, world!")
        \n\n<font color="#795E26">Output:</font>
        \nHello, world!
        </pre>]]>
</string>
    <string name="p_syn2"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#BA2121">print</font>("Hello", end=\' \')
        \n\t<font color="#BA2121">print</font>("World")
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">Hello World</font>
        </pre>]]>
</string>
    <string name="p_syn3"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">name</font> = "Alice"
		\n\t<font color="#0000FF">age</font> = 30
        \n\t<font color="#BA2121">print</font>("My name is {} and I am {} years old.".format(name, age))
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">My name is Alice and I am 30 years old.</font>
        </pre>]]>
</string>
    <string name="p_syn4"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">name</font> = "Bob"
		\n\t<font color="#0000FF">age</font> = 25
        \n\t<font color="#BA2121">print</font>(f"My name is {name} and I am {age} years old.")
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">My name is Bob and I am 25 years old.</font>
        </pre>]]>
</string>
    <string name="p_syn5"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">x</font> = 10
		\n\t<font color="#0000FF">y</font> = 20
        \n\t<font color="#BA2121">print</font>("The values of x and y are:", x, y)
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">The values of x and y are: 10 20</font
        </pre>]]>
</string>
    <string name="p_syn6"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">a</font> = 5
		\n\t<font color="#0000FF">b</font> = 7
		\n\t<font color="#0000FF">c</font> = 9
        \n\t<font color="#BA2121">print</font>(a, b, c, sep=\':\')
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">5:7:9</font>
        </pre>]]>
</string>


    <string name="c_terms1"><b>Console.WriteLine() -</b> This method is used to output text or values to the console, followed by a newline character.
        </string>
    <string name="c_terms2"><b>Console.Write() -</b> This method is similar to Console.WriteLine(), but it doesn\'t add a newline character at the end. Multiple calls to Console.Write() will result in consecutive output on the same line.
        </string>
    <string name="c_terms3"><b>String Interpolation -</b> C# supports string interpolation, which allows you to embed expressions directly within strings using the $ character.
        </string>
    <string name="c_terms4"><b>Formatting with Composite Formatting -</b>  Similar to string interpolation, you can format strings using placeholders and indexed arguments.
        </string>
    <string name="c_terms5"><b>Custom Formatting with String.Format() -</b> The string.Format() method allows you to create formatted strings before printing them using Console.WriteLine().
        </string>
    <string name="c_terms6"><b>Console.SetOut() -</b> You can redirect the standard output stream to a different TextWriter using Console.SetOut(). This can be useful for saving console output to a file or another destination.
        </string>


    <string name="c_syn1"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#BA2121">Console.WriteLine</font>("Hello, world!");
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">Hello, world!</font>
        </pre>]]>
</string>
    <string name="c_syn2"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#BA2121">Console.Write</font>("Hello, ");
        \n\t<font color="#BA2121">Console.Write</font>("world!");
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">Hello, world!</font>
        </pre>]]>
</string>

    <string name="c_syn3"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">string</font> name = "Alice";
		\n\t<font color="#0000FF">int</font> age = 30;
        \n\t<font color="#BA2121">Console.WriteLine</font>($"My name is {name} and I am {age} years old.");
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">My name is Alice and I am 30 years old.</font>
        </pre>]]>
</string>

    <string name="c_syn4"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">string</font> item = "apple";
		\n\t<font color="#0000FF">double</font> price = 1.25;
        \n\t<font color="#BA2121">Console.WriteLine</font>("The price of {0} is ${1:F2}", item, price);
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">The price of apple is $1.25</font>
        </pre>]]>
</string>
    <string name="c_syn5"><![CDATA[<pre><font color="#008000">Example:</font>
        \n\t<font color="#0000FF">string</font> formattedString  = string.Format("Today is {0:D}, the {1} day of the week.", DateTime.Now, 3);
		\n\t<font color="#0000FF">double</font> price = 1.25;
        \n\t<font color="#BA2121">Console.WriteLine</font>(formattedString);
        \n\n<font color="#795E26">Output:</font>
        \n<font color="#0000FF">Today is Monday, the 3 day of the week.</font>
        </pre>]]>
</string>


</resources>