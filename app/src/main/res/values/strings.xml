<resources>
    <string name="app_name">Care_Prototype_01</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="codey_image">codey_image</string>
    <string name="java_button">java_button</string>
    <string name="c_button">c_button</string>
    <string name="python_button">python_button</string>
    <!-- Strings used for fragments for navigation -->


    <string name="_1_introduction">1.Introduction</string>
    <string name="_2_syntax">2.Syntax</string>
    <string name="_3_comments">3.Comments</string>
    <string name="_4_variables">4.Variables</string>
    <string name="_5_inputs">5.Inputs</string>
    <string name="_6_data_types">6.Data Types</string>
    <string name="_7_operators">7.Operators</string>
    <string name="_8_conditional_statements">8.Conditional Statements</string>
    <string name="_9_looping_statements">9.Looping Statements</string>
    <string name="_10_arrays">10.Arrays</string>
    <string name="introductions">Introduction</string>
    <string name="codey_s_trivia_sentence">Codey\'s Trivia Sentence</string>
    <string name="let_s_start_the_introduction_of_java_lesson_feel_free_to_ask_questions_or_request_clarification_at_the_end_of_the_discussion">Let’s start the Introduction of Java lesson. Feel free to ask questions or request clarification at the end of the discussion!</string>
    <string name="java">JAVA</string>
    <string name="here_s_a_quick_overview_of_some_key_concepts_in_java">Here\'s a quick overview of some key concepts in Java:</string>
    <string name="IntroBullet_1"><b>•Platform Independence:</b> Java is a write once, run anywhere language. This means that once you write a Java program, you can run it on any platform that has a Java Virtual Machine (JVM). The JVM acts as an interpreter, allowing the Java code to be executed on different operating systems.</string>
    <string name="IntroBullet_2"><b>•Object-Oriented Programming:</b> Java is an object-oriented programming (OOP) language. This means that it revolves around the concept of objects, which are instances of classes. Objects have attributes (variables) and behavior (methods), and they interact with each other through method calls.</string>
    <string name="IntroBullet_3"><b>•Syntax:</b> Java has a syntax similar to other programming languages like C and C++. It uses semicolons to end statements and curly braces to define code blocks. The code is organized into classes, and each class can have methods and variables.</string>
    <string name="IntroBullet_4"><b>•Garbage Collection:</b> Java has automatic memory management through a process called garbage collection. It takes care of allocating and deallocating memory for objects, so developers don\'t have to explicitly manage memory resources. This helps in preventing memory leaks and makes Java programs more robust.</string>
    <string name="IntroBullet_5"><b>•Standard Library:</b> Java provides a rich set of libraries and APIs (Application Programming Interfaces) that simplify common programming tasks. These libraries cover areas such as input/output, networking, data structures, graphics, and more. They save developers time and effort by providing pre-built functionality.</string>
    <string name="IntroBullet_6"><b>•Exception Handling:</b> Java has a built-in exception handling mechanism that allows you to catch and handle errors and exceptional situations in your code. This helps in writing more reliable and robust programs by gracefully handling unexpected situations.</string>
    <string name="questions_you_might_asked">Questions you might asked.</string>
    <string name="is_java_a_programming_or_scripting_language">Is Java a programming or scripting language?</string>
    <string name="what_makes_java_so_unique">What makes Java so unique?</string>
    <string name="what_makes_java_different_to_other_languages">What makes JAVA different to other languages?</string>


    <string name="Variables"><b>String</b> - stores text, such as "HelloWorld". Double quotes are used to enclose string values.\n<b>Ex. String myText = "Hello";\n\n</b><b>int</b> - stores integers or whole numbers, without decimals, such as 246 or -246.\n<b>Ex.<b>int</b> myNum = 5;\n</b>\n<b>float</b> - stores floating point numbers, with decimals, such as 3.99 or -3.99.\n<b>Ex. float myFloatNum = 5.99f;\n\n</b><b>char</b> - stores single characters, such as \'a\' or \'B\'. Single quotes are used to enclose char values.\n<b>Ex char myLetter = \'D\';\n\n</b><b>boolean</b> - stores values with two states: true or false.\n<b>Ex. boolean myBoolean = true;</b></string>
    <string name="variables">Variables</string>
    <string name="variables_1">Variables</string>
    <string name="variable_types">Variable Types:</string>
    <string name="a_variable_is_a_named_storage_location_that_holds_a_value_of_a_particular_type_it_allows_you_to_store_and_manipulate_data_within_a_program_before_using_a_variable_you_need_to_declare_it_specifying_its_type_and_name">A variable is a named storage location that holds a value of a particular type. It allows you to store and manipulate data within a program. Before using a variable, you need to declare it, specifying its type and name.</string>
    <string name="refers_to_the_process_of_accepting_data_or_information_from_a_user_during_the_execution_of_a_java_program_it_allows_users_to_interact_with_a_program">refers to the process of accepting data or information from a user during the execution of a Java program. It allows users to interact with a program.</string>
    <string name="the_java_util_package_contains_the_scanner_class_which_is_used_to_gather_user_input">The java.util package contains the Scanner class, which is used to gather user input.</string>
    <string name="you_can_utilize_any_of_the_various_methods_listed_in_the_scanner_class_documentation_by_creating_an_object_of_the_class_and_using_it_the_nextline_method_which_is_used_to_read_strings_will_be_utilized_in_our_example">You can utilize any of the various methods listed in the Scanner class documentation by creating an object of the class and using it. The nextLine() method, which is used to read strings, will be utilized in our example:</string>
    <string name="java_user_input">Java User Input</string>
    <string name="let_s_start_the_inputs_of_java_lesson">Let\'s start the Inputs of Java lesson.</string>
    <string name="inputs">Inputs</string>
    <string name="welcome_to_care_i_m_codey_your_virtual_assistant_app_guide">Welcome to CARE! I\'m Codey, your virtual assistant app guide!</string>
    <string name="to_continue_kindly_choose_your_desired_programming_language_that_you_want_to_learn_and_let_s_get_started">To continue, kindly choose your desired programming language that you want to learn and let\'s get started!</string>

    <string name="Scanner">import java.util.Scanner; // import the Scanner class\n\n
                            class Main {\n
                              \tpublic static void main(String[] args) {\n
                                \t\tScanner myObj = new Scanner(System.in);\n
                                \t\tString userName;\n\n

                                \t\t// Enter username and press Enter\n
                                \t\tSystem.out.println("Enter username");\n
                                \t\tuserName = myObj.nextLine();\n\n

                                \t\tSystem.out.println("Username is: " + userName);\n
                              }\n
                            }
</string>
    <string name="input_methods">
        Method				\t\t\t\t\t\t\tDescription\n\n

        nextBoolean()	    \tReads a boolean value from the user\n
        nextByte()	        \t\t\t\tReads a byte value from the user\n
        nextDouble()	    \t\t\tReads a double value from the user\n
        nextFloat()	        \t\t\tReads a float value from the user\n
        nextInt()	        \t\t\tReads a int value from the user\n
        nextLine()	        \t\t\tReads a String value from the user\n
        nextLong()	        \t\t\tReads a long value from the user\n
        nextShort()	        \t\t\tReads a short value from the user\n

    </string>
    <string name="the_nextline_method_which_is_used_to_read_strings_was_utilized_in_the_example_above_look_at_the_table_below_these_are_other_types_of_inputs_to_read">The nextLine() method, which is used to read strings, was utilized in the example above. Look at the table below; these are other types of inputs to read.</string>
    <string name="SetGuideline">Let’s now start studying the different syntax inside Java!</string>
    <string name="syntaxtIntro">The set of guidelines governing the creation and interpretation of a Java program is known as the Java syntax. When creating a Java program, take into consideration that every code has its own identifier and no one can make its own syntax code.</string>
    <string name="identifier">Identifier</string>
    <string name="identifierDefinition">An identifier is the name of an element in the code. There are certain standard naming conventions to follow when selecting names for elements.</string>
    <string name="dyk">Did you know?</string>
    <string name="TypesOfIdentifier">These are some of the identifiers in Java:</string>
    <string name="TypesOFIdentifier"><b>Class Identifiers:\n</b>
                                        class Car {\n \t// class body\n}\n\n<b>Constant Identifiers (Final Variables):</b>\nfinal int MAX_VALUE = 100;\nfinal double PI = 3.14159;\n\n<b>Object Identifiers:</b>
                                        \nCar myCar = new Car();\n\n<b>Parameter Identifiers:</b>
                                        \npublic void printName(String name) {\n \t// method body\n}\n\n<b>Package Identifiers:</b>
                                        \npackage com.example.mypackage;\n\n<b>Enum Identifiers:</b>
                                        \nenum DayOfWeek {\n MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY \n}
    </string>
    <string name="firstjavaprogram">public class Main {\n
                                  \tpublic static void main(String[] args) {\n
                                    \t\tSystem.out.println("Hello World");\n
                                  \t}\n
                                }
</string>
    <string name="SynExplainMethods"><b>class method</b> - A class is a blueprint for creating objects. It defines the properties and behaviors that an object of that class will possess. Each program must have a class name and should always start with an uppercase first letter and must match the file name of the program.
        \n<b>main method</b> - Each program processing starts from the main() method which is a mandatory part of every Java program. All method names should start with a lowercase letter. If several words are used to form the name of the method, then each inner word’s first letter should be in uppercase.
        \n<b>System.out.println</b> - It is use to print and display an output to the user.
</string>
    <string name="now_why_don_t_we_create_our_first_java_program_shall_we_i_ll_explain_further_the_meaning_of_each_code">Now, why don’t we create our first Java program, shall we? I’ll explain further the meaning of each code.</string>
    <string name="guess_right">Now let’s print the output of the program! I’m very excited to see the result, did you guessed it right?</string>
    <string name="answer">Answer</string>
    <string name="SyntaxSystem"><b>System</b> is a built-in Java class that contains useful members, such as out, which is short for \"output\". The println() method, short for \"print line\", is used to print a value to the screen (or a file).\nLastly, each code statement must end with a semicolon (;).</string>
    <string name="great_you_guessed_it_right_the_output_to_the_code_is_hello_world_it_s_fun_learning_java_isn_t_it_let_s_keep_learning">Great! You guessed it right! The output to the code is “Hello World”. It’s fun learning Java, isn’t it? Let’s keep learning!</string>
    <string name="always_remember_that_the_curly_braces_marks_the_beginning_and_the_end_of_a_block_of_code">Always remember that the curly braces {} marks the beginning and the end of a block of code.</string>
    <string name="what_will_happen_if_i_declare_two_variables_with_same_spelling_but_different_values">What will happen if I declare two variables with same spelling but different values?</string>
    <string name="can_i_make_a_program_without_using_an_identifier">Can I make a program without using an identifier?</string>
    <string name="what_is_the_difference_of_identifier_to_keyword">What is the difference of identifier to keyword?</string>
    <string name="javadoc">* Calculates and returns the square of a given number. \n* \n* @param number the input number \n* @return the square of the number \n* @throws IllegalArgumentException if the number is negative \n*/ \npublic int calculateNum(int digit) { \n\tif (digit != 0) { \n\t\tthrow new IllegalArgumentException(\"Error! Number must be equal to 0\"); \n\t}\n return number * number; \n}</string>
    <string name="javaintrodullets">• Java works on different operating platforms. (Windows, Mac, Linux, Raspberry Pi, etc.) \n• Java is one of the most popular programming languages in the world. \n• Java is open-source, free, simple, and easy to learn and use that everyone can enjoy developing their own software. \n• Java has a large demand of jobs in the current market.</string>
    <string name="have_you_ever_wonder_if_you_can_put_a_text_in_java_that_looks_like_a_note_to_identify_what_kind_of_code_is_it_without_being_interpreted_by_the_compiler_worry_no_more_because_i_introduce_to_you_the_java_comments_let_s_see_what_we_ve_got_here">Have you ever wonder if you can put a text in Java that looks like a note to identify what kind of code is it without being interpreted by the compiler? Worry no more because I introduce to you the Java Comments! Let’s see what we’ve got here!</string>
    <string name="in_java_comments_are_non_executable_lines_of_code_that_provide_explanations_annotations_or_disable_codes_temporarily_they_are_essential_for_code_documentation_readability_and_collaboration_there_are_three_types_of_comments_in_java_single_line_comments_multi_line_comments_and_javadoc_comments">In Java, comments are non-executable lines of code that provide explanations, annotations, or disable codes temporarily. They are essential for code documentation, readability, and collaboration. There are three types of comments in Java: single-line comments, multi-line comments, and Javadoc comments.</string>
    <string name="single_line_comments">Single-Line Comments</string>
    <string name="here_is_an_example_of_a_single_line_comment">Here is an example of a single-line comment:</string>
    <string name="this_comment_just_has_one_line">//This comment just has one line.</string>
    <string name="multi_line_comments">Multi-Line Comments</string>
    <string name="javadoc_comments">Javadoc comments</string>
    <string name="a_single_line_of_code_can_be_transformed_into_a_comment_to_provide_a_brief_explanation_it_is_considered_a_comment_and_will_not_be_processed_if_text_is_added_to_a_line_after">A single line of code can be transformed into a comment to provide a brief explanation. It is considered a comment and will not be processed if text is added to a line after //.</string>
    <string name="a_multi_line_comments_can_occupy_at_least_2_lines_of_code_and_more_that_depends_to_the_preference_of_the_programmer_or_developer_it_can_also_disregard_codes_and_transform_into_comments_by_clicking_ctrl_on_the_keyboard_and_simultaneously">A multi-line comments can occupy at least 2 lines of code and more that depends to the preference of the programmer or developer. It can also disregard codes and transform into comments by clicking “ctrl” on the keyboard and “/” simultaneously.</string>
    <string name="here_is_an_example_of_a_multi_line_comment">Here is an example of a multi-line comment:</string>
    <string name="javadoc_comments_usually_begin_with_and_end_with_and_can_include_various_tags_and_annotations_that_provides_detailed_information_about_the_documented_elements">Javadoc comments usually begin with “/**” and end with “*/” and can include various tags and annotations that provides detailed information about the documented elements.</string>
    <string name="this_comment_consists_of_several_lines_it_may_vary_according_to_the_preference_of_the_developer">/* This comment consists of several lines. It may vary according to the preference of the developer. */</string>
    <string name="a_javadoc_comments_are_special_type_of_comments_that_is_used_in_java_to_generate_automatic_documentation_it_is_usually_written_in_a_specific_format_that_can_be_used_to_document_program_elements_such_as_classes_interfaces_methods_fields_etc_this_is_then_processed_by_the_javadoc_tool_which_later_on_creates_html_based_documentation_files">A Javadoc comments are special type of comments that is used in Java to generate automatic documentation. It is usually written in a specific format that can be used to document program elements such as classes, interfaces, methods, fields, etc. This is then processed by the Javadoc tool, which later on creates HTML-based documentation files.</string>
    <string name="here_is_an_example_of_a_javadoc_comment">Here is an example of a javadoc comment:</string>
    <string name="always_remember_that_it_is_a_good_practice_to_include_comments_in_the_code_to_improve_its_readability_and_maintainability_as_well_as_easily_identify_the_errors_when_the_program_stops_producing_output_and_needs_to_be_debug_by_the_developer">Always remember that it is a good practice to include comments in the code to improve its readability and maintainability as well as easily identify the errors when the program stops producing output and needs to be debug by the developer!</string>
    <string name="what_is_the_purpose_of_comments_in_java">What is the purpose of comments in Java?</string>
    <string name="what_is_the_difference_of_a_single_line_vs_multi_line_comment">What is the difference of a single-line vs multi-line comment?</string>
    <string name="can_comments_slow_down_a_program_s_execution">Can comments slow down a program’s execution?</string>
    <string name="operators"><b>Comparison operators:</b>\n
•	Less than:   \u003c \n
•	Less than or equal to:   \u003c= \n
•	Greater than: > \n
•	Greater than or equal to: >= \n
•	Equal to:  == \n
•	Not Equal to:  != \n
\n
<b>Logical operators:</b>\n
•	logical AND: &amp;&amp;\n
•	logical OR: ||\n
•	logical NOT: !\n
</string>
    <string name="followingcondition">•	Use <b>if</b> to specify a block of code to be executed, if a specified condition is true\n
•	Use <b>else</b> to specify a block of code to be executed, if the same condition is false\n
•	Use <b>else if</b> to specify a new condition to test, if the first condition is false\n
•	Use <b>Nested if</b> statements to specify multiple conditions and control the flow of your program.\n
</string>
    <string name="if_simple"> <b>Here\'s the basic syntax:</b>\n

if (condition) {\n
  \t// block of code to be executed if the condition is true\n
}
        </string>
    <string name="ifexample1"><b><i>Here\'s and example for if statements:</i></b>\nif (20 > 18) {\n\tSystem.out.println("20 is greater than 18");\n}\n\n<b>Output:</b>\n20 is greater than 18\n\n<b>Example explained</b>\nIn the example above, we test two values to find out if 20 is greater than 18. If the condition is true, print some text.\n\n<b>We can also test variables:</b>\n<b>Example:</b>\nint x = 20;\nint y = 18;\nif (x > y) {\n\tSystem.out.println("x is greater than y");\n}\n\n<b>Output:</b>\nx is greater than y\n\n<b>Example explained</b>\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that "x is greater than y".
</string>
    <string name="elseExample"><b>Here\&#39;s the basic syntax:</b>
        \nif (condition) { \n
        \t// block of code to be executed if the condition is true \n
        } else { \n
        \t// block of code to be executed if the condition is false \n
        } \n\n
        <i>it is a construct that enables you to specify what should happen when the condition of the if statement is false.</i> \n\n
        <b>Example:</b> \n
        int x = 5; \n
        if (x &gt; 0) {\n
        \tSystem.out.println(\&quot;x is positive\&quot;); \n
        } else { \n
        \tSystem.out.println(\&quot;x is not positive\&quot;); \n} \n\n
        <b>Output:</b> \n
        x is positive \n\n
        <b>Example explained:</b> \n
        In this example, if the condition x &gt; 0 is true, \&quot;x is positive\&quot; is printed. Otherwise, \&quot;x is not positive\&quot; is printed.</string>
    <string name="elseif"><b>Here\&#39;s the basic syntax:</b> \nif (condition1) { \n
        \t// block of code to be executed if condition1 is true \n
        } else if (condition2) { \n
        \t// block of code to be executed if the condition1 is false and condition2 is true \n
        } else { \n
        \t// block of code to be executed if the condition1 is false and condition2 is false \n
        } \n\n
        <i>You can have multiple else if statements to check additional conditions in a sequential manner.</i> \n\n
        <b>Example:</b> \n
        int x = 5; \n
        if (x &gt; 0) { \n
        \tSystem.out.println(\&quot;x is positive\&quot;); \n
        } else if (x &lt; 0) { \n
        \tSystem.out.println(\&quot;x is negative\&quot;); \n
        } else { \n
        \tSystem.out.println(\&quot;x is zero\&quot;); \n
        } \n\n
        <b>Output:</b> \n
        x is positive \n\n
        <b>Example explained:</b> \n
        In this example, if x is greater than 0, \&quot;x is positive\&quot; is printed. If x is less than 0, \&quot;x is negative\&quot; is printed. Otherwise, \&quot;x is zero\&quot; is printed.</string>
    <string name="nestedif"><b>Here\&#39;s the basic syntax:</b> \n
        if (condition1) { \n
        \t// code to execute if condition1 is true \n
        \tif (condition2) { \n
        \t// code to execute if both condition1 and condition2 are true \n
        } else { \n
        \t// code to execute if condition1 is true but condition2 is false } \n
        } else { \n
        \t// code to execute if condition1 is false \n
        } \n\n<i>It allows you to create more complex conditional structures by checking multiple conditions and executing different blocks of code based on those conditions.</i> \n\n
        <b>Example:</b> \n
        int age = 20; \n
        boolean hasLicense = true; \n
        if (age &gt;= 18) { \n
        \tSystem.out.println(\&quot;You are eligible to apply for a driving license.\&quot;); \n
        \t\tif (hasLicense) { \n
        \t\t\tSystem.out.println(\&quot;You already have a driving license.\&quot;); \n
        \t\t} else { \n
        \t\t\tSystem.out.println(\&quot;You don\&#39;t have a driving license yet.\&quot;); \n
        \t}\n
        } else { \n
        \tSystem.out.println(\&quot;You are not eligible to apply for a driving license.\&quot;); \n
        } \n\n<b>Output:</b> \nYou are eligible to apply for a driving license. \nYou already have a driving license. \n\n<b>Example explained:</b>\nIn this example, we have a nested if statement. The outer if statement checks if the age is greater than or equal to 18. If the condition is true, it prints the message \&quot;You are eligible to apply for a driving license.\&quot; Then, it enters the inner if statement. The inner if statement checks if the boolean variable hasLicense is true or false. If hasLicense is true, it prints the message \&quot;You already have a driving license.\&quot; If hasLicense is false, it prints the message \&quot;You don\&#39;t have a driving license yet.\&quot; If the age condition in the outer if statement is false, it skips the inner if statement and executes the code in the else block of the outer if statement, printing the message \&quot;You are not eligible to apply for a driving license.\&quot;</string>
    <string name="three_primary_loop">• The <b>for</b> loop is commonly used when you know the number of iterations in advance. \n
        • The <b>while</b> loop is suitable when the number of iterations is not known in advance, and the loop continues until a specified condition becomes false. \n
        • The <b>do-while</b> loop is similar to the while loop, but it guarantees that the loop body is executed at least once. \n
        • The <b>foreach</b> loop is specifically designed for iterating over elements of an array or a collection.</string>
    <string name="forloop"><b>Here\'s the basic syntax:</b> \n
        for (initialization; condition; iteration) {\n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="iterate"><b>Example:</b> \n
        for (int i = 1; i &lt;= 5; i++) { \n
        \tSystem.out.println(\&quot;Iteration: \&quot; + i);\n
        }\n
        \n
        <b>Output:</b> \n
        Iteration: 1 \n
        Iteration: 2 \n
        Iteration: 3 \n
        Iteration: 4 \n
        Iteration: 5 \n\n
        <b>Example explained:</b>
        In this example, the for loop iterates from i = 1 to i \u003c= 5, incrementing i by 1 after each iteration. The loop body consists of a single statement that prints the iteration number.</string>
    <string name="while_loop"><b>Here\'s the basic syntax:</b> \n(condition) {\n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="whileloopex"><b>Example:</b> \n
        int count = 1; \n
        while (count &lt;= 5) { \n
        \tSystem.out.println(\&quot;Count: \&quot; + count);\n
        \tcount++; \n
        }\n
        \n
        <b>Output:</b> \n
        Count: 1 \n
        Count: 2 \n
        Count: 3 \n
        Count: 4 \n
        Count: 5 \n
        \n
        <b>Example explained:</b> \n
        the while loop starts with the condition count &lt;= 5. The loop body will execute as long as the condition is true. Inside the loop, the current value of count is printed using System.out.println(), and then count is incremented by 1 (count++). This ensures that the loop will eventually terminate when count becomes greater than 5.</string>
    <string name="do_while"><b>Here\'s the basic syntax:</b> \n
        do { \n
        \t// code to be executed in each iteration \n
        }while (condition</string>
    <string name="do_while_ex"><b>Example:</b> \n
        import java.util.Scanner; \n\n
        public class DoWhileLoopExample { \n
        \tpublic static void main(String[] args) { \n
        \t\tScanner scanner = new Scanner(System.in); \n
        \t\tint number; \n\n
        \t\tdo { \n
        \t\t\tSystem.out.print(\&quot;Enter a positive number (0 to exit): \&quot;); \n
        \t\t\tnumber = scanner.nextInt(); \n\n
        \t\t\tif (number &gt; 0) { \n
        \t\t\t\tSystem.out.println(\&quot;You entered: \&quot; + number); \n
        \t\t\t} else { \n
        \t\t\t\tSystem.out.println(\&quot;Invalid number!\&quot;); \n
        \t\t} \n
        \t} while (number != 0); \n\n
        \t\tSystem.out.println(\&quot;Loop exited. Goodbye!\&quot;); \n
        \t\tscanner.close(); \n
        \t} \n
        } \n\n
        <b>Output:</b> \n
        Enter a positive number (0 to exit): 5 \n
        You entered: 5 \n
        Enter a positive number (0 to exit): -2 \n
        Invalid number! \n
        Enter a positive number (0 to exit): 10 \n
        You entered: 10 \n
        Enter a positive number (0 to exit): 0 \n
        Loop exited. Goodbye! \n\n
        <b>Example explained:</b> \n
        We use a do-while loop to repeatedly prompt the user to enter a positive number. The loop continues until the user enters 0 to exit the program.</string>
    <string name="foreach"><b>Here\'s the basic syntax: </b>\n
        for (elementDataType element : collection) { \n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="foreach_example"><b>Example:</b> \n
        int[] numbers = {1, 2, 3, 4, 5}; \n
        for (int number : numbers) { \n
        \tSystem.out.println(number); \n
        } \n\n
        <b>Output:</b> \n
        1 \n
        2 \n
        3 \n
        4 \n
        5 \n
        \n
        <b>Example explained:</b> \n
        We have an array called numbers containing integers. The foreach loop iterates over each element in the array, assigning it to the variable number. The loop body then executes, which in this case simply prints the value of number using System.out.println().</string>
    <string name="TwoTypesOfDataTypes"><b><i>Primitive data types include the following:</i></b> \n
        byte, short, int, long, float, double, boolean, and char. \n<b><i>Non-Primitive data types include the following:</i></b> \n
        Strings, Arrays, Object, Interface, and Classes.</string>
    <string name="DataTypesTwoCategories"><b>Primitive Data Types:</b>\n
        <i><b>int:</b> Used to store whole numbers.</i> \n
        int myNumber = 42; \n\n
        <i><b>double:</b> Used to store decimal numbers.</i> \n
        double myDecimalNumber = 3.14159; \n\n
        <i><b>boolean:</b> Used to store true/false values.</i> \n
        boolean isTrue = true; \n\n
        <i><b>char:</b> Used to store a single character.</i>\n
        char myChar = \&#39;A\&#39;; \n\n<b>Reference Data Types:</b>\n
        <i><b>String:</b> Used to store sequences of characters. </i>\n
        String myName = \&quot;John Doe\&quot;; \n\n
        <i><b>Array:</b> Used to store a collection of elements of the same type. </i>\n
        int[] numbers = {1, 2, 3, 4, 5}; \n\n
        <i><b>Object:</b> Used to store instances of user-defined classes.</i> \n
        Date today = new Date(); \n\n
        <i><b>Class:</b> Used to store the definition of a class. </i>\n
        Class&lt;?&gt; myClass = MyClass.class; \n\n
        <i><b>Interface:</b> Used to store the definition of an interface. </i>\n
        interface MyInterface { \n
        \tvoid myMethod(); \n
        }</string>
    <string name="operatorstypes">•<b>Arithmetic operators</b>, such as addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and unary operators like increment (++), decrement (--), and negation (-), are used to do mathematical computations. \n\n
        •The employment of <b>logical operators</b> allows for the logical manipulation of boolean values and the generation of boolean results. Java supports the following logical operators: logical AND (&amp;&amp;), logical OR (||), and logical NOT (!). \n\n
        •<b>Operators for Assignment:</b> Operators for Assignment are used to assign values to variables. The equals symbol (=) is used as the most frequent assignment operator. The assignment operation can be combined with another operation using compound assignment operators like +=, -=, *=, /=, and %=. \n\n
        •<b>Bitwise operators:</b> These operators work with the individual bits of numeric operands. These include left shift (), right shift (&gt;&gt;), and unsigned right shift (&gt;&gt;&gt;). They also include bitwise AND (&amp;), bitwise OR (|), bitwise XOR (), bitwise complement (), and left shift (). \n\n
        •<b>The ternary operator</b> (?:) is a conditional operator that accepts three operands and returns a value in response to a condition. It is applied to conditional phrases that are concise.</string>
    <string name="Alloperators"><b>Arithmetic Operators:</b> \n
        <b>+</b> Addition operator. \n
        int sum = 5 + 3; // sum = 8 \n\n
        <b>-</b> Subtraction operator. \n
        int difference = 7 - 2; // difference = 5 \n\n
        <b>*</b> Multiplication operator. \n
        int product = 4 * 6; // product = 24 - \n\n
        <b>/</b> Division operator. \n
        int quotient = 10 / 2; // quotient = 5 - \n\n
        <b>%</b> Modulus operator (remainder of division). \n
        int remainder = 15 % 4; // remainder = 3 2. \n\n
        <b>Assignment Operators:</b> \n
        <b>=</b> Simple assignment operator. \n
        int number = 10; \n\n
        <b>+=</b> Add and assign operator. \n
        int value = 5; value += 3; // value = 8 \n\n
        <b>-=</b> Subtract and assign operator. \n
        int value = 7; value -= 2; // value = 5 \n\n
        <b>*=</b> Multiply and assign operator. \n
        int value = 4; value *= 6; // value = 24 \n\n
        <b>/=</b> Divide and assign operator. \n
        int value = 10; value /= 2; // value = 5 3. \n\n
        <b>Comparison Operators:</b> \n
        <b>==</b> Equal to operator. \n
        boolean isEqual = (5 == 3); // isEqual = false \n\n
        <b>!=</b> Not equal to operator. \n
        boolean isNotEqual = (7 != 2); // isNotEqual = true \n\n
        <b>&gt;</b> Greater than operator. \n
        boolean isGreaterThan = (10 &gt; 5); // isGreaterThan = true \n\n
        <b>&lt;</b> Less than operator. \n
        boolean isLessThan = (4 &lt; 6); // isLessThan = true \n\n
        <b>&gt;=</b> Greater than or equal to operator. \n
        boolean isGreaterThanOrEqual = (7 &gt;= 5); // isGreaterThanOrEqual = true \n\n
        <b>&lt;=</b> Less than or equal to operator. \n
        boolean isLessThanOrEqual = (4 &lt;= 6); // isLessThanOrEqual = true</string>
    <string name="intro_array"><i>Normally, an array is a group of similar-type elements with a contiguous memory location.</i> \n\nJava Array is a data structure that is used to store multiple and fixed-size of sequence values of elements in a single variable of the same type, instead of declaring separate variables for each value. In short, it is a container object that holds a definite number of values of any Java elements and data types. \n\n
        <i>Arrays have these following distinct characteristics:</i> \n
        <b>•Fixed Size:</b> When an array is created, the allocation of size is fixed and cannot be changed so before declaring, specify the size that needs to be created before declaring the array. \n
        <b>•Indexed Elements:</b> All elements that is declared in array has a unique index starting from 0, and these indicates its position within the array. It can be accessible through their index. \n
        <b>•Contiguous Memory Allocation:</b> All elements of array are stored in contiguous memory locations which allows for a more efficient access when calling out the index of element values. \n
        In Java, array is an object of a dynamically generated class. Java array inherits the Object class, and implements the Serializable as well as Cloneable interfaces. We can also store primitive values or objects. Moreover, Java provides the feature of anonymous arrays. \n\n
        </string>
    <string name="stringvariables">When you declare an array, always define the variable type with square brackets, like this: \n
        <b>String [] variable;</b></string>
    <string name="stringvariable1">Now that we have declared a variable that holds an array objects, let’s insert some values! Just place the values in a comma-separated list inside curly braces that looks like this: \n
        <b>String[] variable = {“Object”, “Values”, “List”, “Variables”, “Characters”};</b></string>
    <string name="intvariable">If you want to create an array that consists of integers, you could do: \n
        <b>Int[] varNum = {1, 2, 3, 4, 5};</b></string>
    <string name="numberarray">Now, let’s try initializing the array and allocate memory for a specific number of elements, just use the keyword “new” and declare like this: \n
        <b>numbers = new int[5];</b></string>
    <string name="intnumbers">Alternatively, we can also declare an array and initialize its elements in a single line and it may come out like this: \n
        <b>int[] numbers = new int[] { 1, 2, 3, 4, 5 };</b></string>
    <string name="stringvariable4">String[] variable = {“Object”, “Values”, “List”, “Variables”, “Characters”}; \n
        System.out.println(variable[0]); \n
        <b>Output:</b> \n
        Object</string>
    <string name="stringvariable5">variable[0] = “subject”; \n
        String[] variable = {“Object”, “Values”, “List”, “Variables”, “Characters”}; \n
        variable[0] = “Subject”; \n
        System.out.println(variable[0]); \n
        <b>Output:</b> \n
        Subject\n\n
        <i>See the difference? The index 0 originally named <b>“Object”</b> was replaced with <b>“Subject”</b> upon changing the value.</i></string>
    <string name="singleArrayJava">It is also known as one-dimensional array, these are the simplest form of arrays that anyone can easily understand. It consists of a linear sequence of elements, all of the same type, and arranged in a single row. Commonly used to store and manipulate collection of values or objects, Single Dimensional Array is done using a single index. The declaration syntax is as follows:\n
        <b>dataType[] arrayName;</b></string>
    <string name="multiArrayJava">Multidimensional arrays are arrays inside of arrays, where elements can be an array itself. It is frequently used to represent multidimensional tabular or matrix-like data structures. Rows and columns in a 2D array and rows, columns, and layers in a 3D array are examples of this. To access elements, positions must be specified in multiple indices in each dimension. The declaration syntax is as follows:\n<b>dataType[][] arrayName;</b></string>
    <string name="twotypesofarray"><b>2 types of Array in Java:</b>\n • Single Dimensional Array \n • Multidimensional Array</string>
    <string name="Arraydifference">// Single-dimensional array\nint[] numbers = { 1, 2, 3, 4, 5 };\n\n
    // Accessing a single-dimensional array element\nint value = numbers[2];  // Retrieves the value 3\n\n
    // Multidimensional array (2D)\nint[][] matrix = { { 1, 2, 3 }, { 4, 5, 6 } };\n\n
    // Accessing a multidimensional array element\nint element = matrix[1][2];  // Retrieves the value 6\n\n
    In the above example, numbers is a single-dimensional array containing 5 elements, while matrix is a 2D array with 2 rows and 3 columns.
    Notice the difference in accessing elements: the single-dimensional array uses a single index (numbers[2]), while the 2D array requires two indices to specify the row and column (matrix[1][2]).
    \n\nMultidimensional arrays provide a way to organize and represent data in multiple dimensions, enabling the handling of more complex structures and relationships among elements.</string>

    <string name="forArray">
    for(data_type variable:array){\n
    \t//body of the loop\n
    }
</string>

    <string name="foreachlooparray">
        <b>Example:</b>
    //Java Program to print the array elements using for-each loop\n
    class Testarray1{\n
    \tpublic static void main(String args[]){\n
    \t\tint arr[]={33,3,4,5};\n
    \t\t//printing array using for-each loop\n
    \t\tfor(int i:arr)\n
    \t\t\tSystem.out.println(i);\n
    \t}\n
    }\n\n
        <b>Output:</b>\n
        33\n
        3\n
        4\n
        5
</string>
    <string name="passingarray">
    <b>Example:</b>\n
    //Java Program to demonstrate the way of passing an array\n
    //to method.\n
    class Testarray2{\n
    \t//creating a method which receives an array as a parameter\n
    \tstatic void min(int arr[]){\n
    \t\tint min=arr[0];\n
    \t\tfor(int i=1;i&#60;arr.length;i++)\n
    \t\t\tif(min&#62;arr[i])\n
    \t\t\t\tmin=arr[i];\n
    \t\tSystem.out.println(min);&#59;\n
    \t}\n
    \tpublic static void main(String args[]){\n
    \t\tint a[]={33,3,4,5}&#59; //declaring and initializing an array\n
    \t\tmin(a); //passing array to method\n
    \t}\n
    }\n\n
    <b>Output:</b>\n
    3\n
</string>
    <string name="anonymousarray">
    <b>Example:</b>\n
    //Java Program to demonstrate the way of passing an anonymous array\n
    //to method.\n
    public class TestAnonymousArray{\n
    \t//creating a method which receives an array as a parameter\n
    \tstatic void printArray(int arr[]){\n
    \t\tfor(int i=0;i&#60;arr.length;i++)\n
    \t\t\tSystem.out.println(arr[i]);\n
    \t}\n
    \tpublic static void main(String args[]){\n
    \t\tprintArray(new int[]{10,22,44,66}); //passing anonymous array to method\n
    \t}\n
    }\n\n
    <b>Output:</b>\n
    10\n
    22\n
    44\n
    66\n
</string>
    <string name="returnarray">
    <b>Example:</b>\n
    //Java Program to return an array from the method\n
    class TestReturnArray{\n
    \t//creating method which returns an array\n
    \tstatic int[] get(){\n
    \t\treturn new int[]{10,30,50,90,60};\n
    \t}\n
    \tpublic static void main(String args[]){\n
    \t\t//calling method which returns an array\n
    \t\tint arr[]=get();\n
    \t\t//printing the values of an array\n
    \t\tfor(int i=0;i&#60;arr.length;i++)\n
    \t\t\tSystem.out.println(arr[i]);\n
    \t}\n
    }\n\n
    <b>Output:</b>\n
    10\n
    30\n
    50\n
    90\n
    60\n
</string>

    <string name="java_array_exception_code">
    <![CDATA[
        <pre>
<font color="#000000"><tt><b>Example:</b></tt></font>
<font color="#000000"><tt>//Java Program to demonstrate the case of\n</tt></font>
<font color="#000000"><tt>//ArrayIndexOutOfBoundsException in a Java Array.\n</tt></font>
<font color="#0000FF"><tt>public class</tt></font> TestArrayException{\n
<font color="#008000"><tt>\tpublic static void</tt></font> main(String args[]){\n
<font color="#0000FF"><tt>\t\tint</tt></font> arr[]={50,60,70,80};\n
<font color="#0000FF"><tt>\t\tfor</tt></font>(<font color="#0000FF"><tt>int</tt></font> i=0;i&#60;=arr.length;i++){<font color="#808080"><tt>\t// Note: it should be i &#60; arr.length instead of i &#60;= arr.length</tt></font>\n
<font color="#0000FF"><tt>\t\t\tSystem.out.println</tt></font>(arr[i]);\n
<font color="#0000FF"><tt>\t\t}</tt></font>\n
<font color="#0000FF"><tt>\t}</tt></font>\n
<font color="#0000FF"><tt>}</tt></font>\n
        </pre>
<font color="#000000"><tt>\t<b>Output:</b></tt></font>
<font color="#0000FF"><tt>\tException in thread "main" java.lang.ArrayIndexOutOfBoundsException: 4\n</tt></font>
<font color="#808080"><tt>\t\tat TestArrayException.main(TestArrayException.java:5)</tt></font>\n
<font color="#0000FF"><tt>\t50\n</tt></font>
<font color="#0000FF"><tt>\t60\n</tt></font>
<font color="#0000FF"><tt>\t70\n</tt></font>
<font color="#0000FF"><tt>\t80\n</tt></font>
    ]]>
</string>
    <string name="jagged_array_code">
        <![CDATA[
            <pre>
        <font color="#000000"><tt><b>Example:</b></tt></font>
        <font color="#000000"><tt>//Java Program to illustrate the jagged array\n</tt></font>
        <font color="#0000FF"><tt>class</tt></font> TestJaggedArray {\n
        \t<font color="#008000"><tt>public static void</tt></font> main(String[] args) {\n
        \t\t<font color="#808080"><tt>//declaring a 2D array with odd columns\n</tt></font>
        \t\t<font color="#0000FF"><tt>int</tt></font> arr[][] = <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[3][];\n
        \t\t<font color="#0000FF"><tt>arr[0] =</tt></font> <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[3];\n
        \t\t<font color="#0000FF"><tt>arr[1] =</tt></font> <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[4];\n
        \t\t<font color="#0000FF"><tt>arr[2] =</tt></font> <font color="#000000"><tt>new</tt></font> <font color="#0000FF"><tt>int</tt></font>[2];\n
        \t\t<font color="#808080"><tt>//initializing a jagged array\n</tt></font>
        \t\t<font color="#0000FF"><tt>int</tt></font> count = 0;\n
        \t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> i = 0; i &lt; arr.length; i++) {\n
        \t\t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> j = 0; j &lt; arr[i].length; j++) {\n
        \t\t\t\t<font color="#0000FF"><tt>arr[i][j] = count++;</tt></font>\n
        \t\t\t}\n
        \t\t}\n\n
        \t\t<font color="#808080"><tt>//printing the data of a jagged array\n</tt></font>
        \t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> i = 0; i &lt; arr.length; i++) {\n
        \t\t\t<font color="#0000FF"><tt>for</tt></font> (<font color="#0000FF"><tt>int</tt></font> j = 0; j &lt; arr[i].length; j++) {\n
        \t\t\t\t<font color="#0000FF"><tt>System.out.print(arr[i][j] + " ");</tt></font>\n
        \t\t\t}\n
        \t\t\t<font color="#0000FF"><tt>System.out.println();</tt></font> <font color="#808080"><tt>//new line</tt></font>\n
        \t\t}\n
        \t<font color="#0000FF"><tt>}</tt></font>\n
        <font color="#0000FF"><tt>}</tt></font>
                </pre>
                <br />
                <font color="#008000"><tt>Output:</tt></font>\n
                <font color="#008000"><tt>0 1 2 </tt></font>\n
                <font color="#008000"><tt>3 4 5 6 </tt></font>\n
                <font color="#008000"><tt>7 8 </tt></font>
            ]]>
    </string>


    <!--__________________________PYTHON STRINGS____________________________________-->
    <string name="codey_python_cut">codey_python_cut</string>
    <string name="let_s_begin_the_introduction_of_python_i_m_so_excited_to_learn_this_come_and_join_with_me">Let’s begin the introduction of Python. I’m so excited to learn this, come and join with me!</string>

    <!--______________________INTRODUCTIONS STRINGS PYTHON______________________-->>
    <string name="python_introduction">Python is a popular high-level programming language with clean syntax that is easy to learn. It was created by Guido van Rossum and first released in 1991. Python is known for its simplicity and readability, and ability to run on all desktop computers and even mobile devices! It is a versatile language that can be used on a wide range of applications, including web and software development, data analysis, artificial intelligence, scientific computing, automation, and more! Thus, it is dubbed as the “easiest programming language in the world!”</string>
    <string name="python_feature_simple_syntax"><b>Simple and clear syntax:</b> Python places a strong emphasis on the readability of its code. Instead of utilizing braces or keywords to separate pieces of code, it employs indentation.
    </string>
    <string name="python_feature_dynamic_typing"><b>Dynamic typing:</b> Python is dynamically typed, which implies that variable types are decided upon automatically while the program is running. The code is more versatile because variable types don\'t have to be declared explicitly.
    </string>
    <string name="python_feature_strong_standard_library"><b>Strong standard library:</b> Python has a sizable standard library that includes modules for a variety of needs, including file I/O, networking, regular expressions, and more. This enables developers to complete typical activities without depending on third-party libraries.
    </string>
    <string name="python_feature_versatile_libraries"><b>Versatile libraries:</b> Python has a robust ecosystem of third-party modules and frameworks that increase its functionality. Popular libraries include Pandas for data analysis, Django for web development, and TensorFlow for machine learning computing.
    </string>
    <string name="python">Python</string>
    <string name="python_features">Python Features:</string>
    <string name="python_features_1"><b><i>Web applications</i></b> can be developed on a server using Python.
        \n\n<b><i>Workflows</i></b> can be made withPython and other technologies.
        \n\n<b><i>Database systems</i></b> are connectable with Python. Files can also be read and changed by it.
        \n\n<b><i>Big data management</i></b> and <b><i>advanced mathematical operations</i></b> can both be done with Python.
        \n\n<b><i>Python</i></b> can be used to produce software that is ready for production or for rapid prototyping.
</string>

    <string name="python_compatibility"><b>• Python is compatible</b> with a number of operating systems, including Raspberry Pi, Mac, and Linux.
    \n\n<b>• Python has a straightforward syntax</b> that resembles that of English language.
    \n\n<b>• Python features a syntax</b> that makes it possible for programmers to write programs with less lines of code than with some other programming languages.
    \n\n<b>• Python runs on an interpreter system</b>, allowing code to be executed immediately after it has been written. Thus, prototyping can be completed extremely quickly.
    \n\n<b>• Python can be used in procedural, object-oriented, or functional programming environments.</b>
</string>

    <string name="python_compared_to_other_languages">• With influences from mathematics and a focus on readability, Python shares several characteristics with the English language.
    \n\n• In contrast to other programming languages, which frequently employ semicolons or parentheses, Python uses new lines to finish a command.
    \n\n• Indentation, which utilizes whitespace, is how Python defines scope, including the scope of loops, functions, and classes. Curly brackets are frequently used in other computer languages for this reason.
</string>
    <string name="P_Intro_btnQ1">What is Python known for?</string>
    <string name="P_Intro_btnQ2">What is the edge of Python compared to other programming languages?</string>
    <string name="P_Intro_btnQ3">What type of language does Python belong?</string>


    <!--______________________COMMENTS STRINGS PYTHON______________________-->>
    <string name="comments_python_codey_introduction">Have you ever wonder if you can put a text in Python that looks like a note to identify what kind of code is it without being interpreted by the compiler? Worry no more because I introduce to you the Python Comments! Let’s see what we’ve got here!</string>
    <string name="comments">Comments</string>
    <string name="p_comments">Comments in Python are the lines in the code that are ignored by the interpreter during the execution of the program. Comments enhance the readability of the code and help the programmers to understand the code very carefully.</string>
    <string name="p_types_of_comments">There are three types of comments in Python:</string>
    <string name="p_the_types_of_comments">• Single line Comments
        \n• Multiline Comments
        \n• Docstring Comments</string>
    <string name="p_single_line_comments"><b>Single-Line Comments in Python</b></string>
    <string name="python_single_line_comments">Python single-line comment starts with the hashtag symbol (#) with no white spaces and lasts till the end of the line. If the comment exceeds one line then put a hashtag on the next line and continue the Python Comments. Python’s single-line comments are proved useful for supplying short explanations for variables, function declarations, and expressions. See the following code snippet demonstrating single line comment:</string>
    <string name="P_comments_textview9">In the example, it can be seen that Python Comments are ignored by the interpreter during the execution of the program.</string>

    <string name="P_single_comment_1">
        <![CDATA[
        <pre><tt><font color="#007F00"># Print “Hello World” to console\n</font>
        <font color="#BA2121">print(<font color="#1A1AA6">"Hello World"</font>)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Hello World</font></font></pre>
        ]]>
    </string>

    <string name="p_multi_line_comments"><b>Multi-Line Comments in Python</b></string>
    <string name="p_multiline_comment">Python does not provide the option for multiline comments. However, there are different ways through which we can write multiline comments. Multiline comments using multiple hashtags (#), We can multiple hashtags (#) to write multiline comments in Python. Each and every line will be considered as a single-line comment.
</string>
    <string name="P_multi_line_comment">
        <![CDATA[
        <pre><tt><font color="#007F00"># Python program to demonstrate\n# multiline comments\n</font>
        <font color="#BA2121">print(<font color="#1A1AA6">"Hello World"</font>)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Hello World</font></font></pre>
        ]]>
    </string>
    <string name="P_docstring_in_python">Python docstring is the string literals with triple quotes that are appeared right after the function. It is used to associate documentation that has been written with Python modules, functions, classes, and methods. It is added right below the functions, modules, or classes to describe what they do. In Python, the docstring is then made available via the __doc__ attribute.</string>
    <string name="docstring_in_python">Docstring in Python</string>
    <string name="P_Docstring_comment">
        <![CDATA[
        <pre><tt><font color="#007F00">def multiply(a, b):\n    """Multiplies the value of a and b"""\n    return a*b\n</font>
        <font color="#BA2121"># Print the docstring of multiply function\n</font>
        <font color="#1A1AA6">print(multiply.__doc__)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Multiplies the value of a and b</font></font></pre>
        ]]>
    </string>
    <string name="string_literals_in_python">String Literals In Python</string>
    <string name="string_literals">
        <![CDATA[
        <pre><tt><font color="#007F00">&quot;&quot;&quot; Python program to demonstrate\n multiline comments&quot;&quot;&quot;\n</font>
        <font color="#BA2121">print(<font color="#1A1AA6">&quot;Multiline comments&quot;</font>)\n</font></tt></pre>
        <pre><font color="#795E26">Output:\n<font color="#1A1AA6">Multiline comments</font></font></pre>
        ]]>
    </string>

    <!--______________________SYNTAX STRINGS PYTHON______________________-->>
    <string name="syntax_intro_codey">Let’s begin the Syntax of Python. I’m so excited to learn this, come and join with me!</string>
    <string name="python_identifier_description">A Python identifier is a name used to identify a variable, function, class, module, or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9).
</string>
    <string name="syntax">Syntax</string>
    <string name="python_syntax">The Python syntax defines a set of rules that are used to create Python statements while writing a Python Program. The Python Programming Language Syntax has many similarities to Perl, C, and Java Programming Languages. However, there are some definite differences between the languages.</string>
    <string name="Identifiers"><i>Python does not allow punctuation characters such as @, $, and % within identifiers.</i></string>
    <string name="P_Syntax_Text5">Here are naming conventions for Python identifiers</string>
    <string name="python_identifiers">• Python Class names start with an uppercase letter.
    \n\n• All other identifiers start with a lowercase letter.
    \n\n• Starting an identifier with a single leading underscore indicates that the identifier is private.
    \n\n• Starting an identifier with two leading underscores indicates a strongly private identifier.
    \n\n• If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.
</string>
    <string name="python_identifiers_1">Python identifiers</string>
    <string name="P_lines_Indention">Python programming provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.</string>
    <string name="python_lines_and_indentation">Python Lines and Indentation</string>
    <string name="if_else_example"><![CDATA[<pre><tt><font color="#007F00">if True:\n</font><font color="#BA2121">\tprint(<font color="#1A1AA6">"True"</font>)\n</font><font color="#007F00">else:\n</font><font color="#BA2121">\tprint(<font color="#1A1AA6">"False"</font>)</font></tt></pre>]]>
    </string>
    <string name="line_continuation_example">
        <![CDATA[
        <pre><tt><font color="#007F00">Total = item_one + \\\n\tItem_two + \\\n\tItem_three</font></tt></pre>
        ]]>
    </string>
    <string name="string_literals_example">
        <![CDATA[
        <pre><tt><font color="#007F00">word = \'word\'\n\nsentence = "This is a sentence."\n\nparagraph = """This is a paragraph. It is\n\tmade up of multiple lines and sentences."""</font></tt></pre>
        ]]>
    </string>
    <string name="P_syntax_quotations">Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character () to denote that the line should continue. For example –</string>
    <string name="P_syntax_quotations1">Python accepts single (\'), double (\") and triple (\'\'\' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string. The triple quotes are used to span the string across multiple lines.
        \n<i>For example, all the following are legal</i></string>
    <string name="P_Syntax_text1">The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example</string>
    <string name="python_multi_line_statements">Python Multi-Line Statements</string>
    <string name="quotations_in_python">Quotations in Python</string>
    <string name="identifier_1">Identifier</string>
    <string name="syntax_add">Python syntax can be executed by writing directly in the Command Line.A basic and simple way to execute code in Python goes like this:</string>
    <string name="print_hello_world">
        <![CDATA[
        <pre><tt><font color="#BA2121">print(<font color="#1A1AA6">"Hello World!"</font>)</font></tt></pre>
        <pre><font color="#795E26">Output:</font><tt><font color="#1A1AA6">\nHello World!</font></tt></pre>
        ]]>
    </string>

    <!--______________________OPERATORS STRINGS PYTHON______________________-->>
    <string name="P_Operator_syntax">Let’s start another lesson in Python which are Operators!</string>
    <string name="operators_1">Operators</string>
    <string name="Operator_meaning">Symbols or special characters known as “operators” in Python programming language carry out specified operations on operands (variables, constants, or expressions) to create results. You may manipulate and calculate on data, compare values, assign values, and do many other things with operators.</string>
    <string name="P_Operators_codey1">Python has a broad variety of operators, which can be divided into various classes according to how they operate.</string>
    <string name="P_types_of_operator">These are the different types of operators:</string>

    <string name="operators_description"><b>Arithmetic Operators:</b> execute operations including addition (+), subtraction (-), multiplication (*), division (/), modulus (%), and exponentiation (**) in elementary mathematics.
        \n\n<b>Relational Operators:</b> A boolean result of true or false is returned when a relational operator compares two values. The operators greater than (&gt;), less than (&lt;), greater than or equal to (>=), and less than or equal to (&lt;=) are among those mentioned. They are frequently employed in comparisons and circumstances.
    </string>
    <string name="logical_operators_description">
    In order to execute logical operations on boolean values and produce a boolean result, <b>logical operators</b> are used. The logical AND (<b>and</b>), logical OR (<b>or</b>), and logical NOT (<b>not</b>) operators are among the logical operators. They are frequently applied in boolean expressions and conditional statements.
    </string>

    <string name="operators_description_2"><b>Assignment Operators:</b> When assigning values to variables, assignment operators are utilized. The equals operator (=) is the most used assignment operator. Additionally, there are compound assignment operators that combine an assignment operation with another operation, such as +=, -=, *=, /=, and %=.
        \n\n<b>Bitwise Operators:</b> Bitwise operators change the values of each bit in a numeric operand. They consist of left shift (&lt;&lt;), right shift (&gt;&gt;), bitwise complement (~), bitwise XOR (^), bitwise AND (&amp;), and bitwise OR (|). Working with binary representations and low-level operations are two things they are utilized for.
</string>
    <string name="p_membership_operators">Using membership operators, you may determine whether a value is a part of a sequence or collection. The membership operators take into and out of account.</string>
    <string name="identity_operators_description"><b>Identity Operators:</b> When comparing the identities of two objects, identity operators are utilized. There are two identity operators: <b>is</b> and <b>is not</b>.
</string>
    <string name="codey_text">You may use a variety of operators in Python to carry out different actions on variables and values.</string>

    <string name="operators_description1">1. <b>Arithmetic Operators</b>\n
    \t\t+: Addition Operator\n
    \t\t\t\t\t\t\tsum = 5 + 3\n
    \t\t\t\t\t\t\tsum = 8\n\n

    \t\t-: Subtraction Operator\n
    \t\t\t\t\t\t\tdifference = 7 - 2\n
    \t\t\t\t\t\t\tdifference = 5\n\n

    \t\t*: Multiplication Operator\n
    \t\t\t\t\t\t\tproduct = 4 * 6\n
    \t\t\t\t\t\t\tproduct = 24\n\n

    \t\t/: Division Operator (returns a float)\n
    \t\t\t\t\t\t\tquotient = 10 / 2\n
    \t\t\t\t\t\t\tquotient = 5.0\n\n

    \t\t//: Floor Division Operator (returns an integer)\n
    \t\t\t\t\t\t\tquotient = 10 // 3\n
    \t\t\t\t\t\t\tquotient = 3\n\n

    \t\t%: Modulus Operator (remainder of division)\n
    \t\t\t\t\t\t\tremainder = 15 % 4\n
    \t\t\t\t\t\t\tremainder = 3\n\n2. <b>Assignment Operators</b>\n
    \t\t=: Simple Assignment Operator\n
    \t\t\t\t\t\t\tnumber = 10\n\n

    \t\t+=: Add and Assign Operator\n
    \t\t\t\t\t\t\tvalue = 5\n
    \t\t\t\t\t\t\tvalue += 3\n
    \t\t\t\t\t\t\tvalue = 8\n\n

    \t\t-=: Subtract and Assign Operator\n
    \t\t\t\t\t\t\tvalue = 7\n
    \t\t\t\t\t\t\tvalue -= 2\n
    \t\t\t\t\t\t\tvalue = 5\n\n

    \t\t*=: Multiply and assign Operator\n
    \t\t\t\t\t\t\tvalue = 4\n
    \t\t\t\t\t\t\tvalue *= 6\n
    \t\t\t\t\t\t\tvalue = 24\n\n

    \t\t/=: Divide and Assign Operator\n
    \t\t\t\t\t\t\tvalue = 10\n
    \t\t\t\t\t\t\tvalue /= 2\n
    \t\t\t\t\t\t\tvalue = 5.0\n\n3. <b>Comparison Operators</b>\n
    \t\t==: Equal to Operator\n
    \t\t\t\t\t\t\tisEqual = (5 == 3)\n
    \t\t\t\t\t\t\tisEqual = False\n\n

    \t\t!=: Not equal to Operator\n
    \t\t\t\t\t\t\tisNotEqual = (7 != 2)\n
    \t\t\t\t\t\t\tisNotEqual = True\n\n

    \t\t&gt;: Greater than Operator\n
    \t\t\t\t\t\t\tisGreaterThan = (10 &gt; 5)\n
    \t\t\t\t\t\t\tisGreaterThan = True\n\n

    \t\t&lt;: Less than Operator\n
    \t\t\t\t\t\t\tisLessThan = (4 &lt; 6)\n
    \t\t\t\t\t\t\tisLessThan = True\n\n

    \t\t&gt;=: Greater than or equal to Operator\n
    \t\t\t\t\t\t\tisGreaterThanOrEqual = (7 &gt;= 5)\n
    \t\t\t\t\t\t\tisGreaterThanOrEqual = True\n\n

    \t\t&lt;=: Less than or equal to Operator\n
    \t\t\t\t\t\t\tisLessThanOrEqual = (4 &lt;= 6)\n
    \t\t\t\t\t\t\tisLessThanOrEqual = True\n
</string>
    <string name="P_operator_frequently_used">Here are a few examples of Python operators that are frequently used:</string>

    <!--______________________DATA TYPES STRINGS PYTHON______________________-->>
    <string name="data_types">Data Types</string>
    <string name="p_datatypes_meaning">The numerous classes or kinds of values that variables can contain are referred to as \"data types\" in Python. Every data type specifies the types of data that may be stored, the operations that can be carried out on the data, and the amount of memory needed to store the data.</string>
    <string name="codey_introindatatypes">Let’s start learning the different Data Types that is being used in Python! Let’s start, shall we?</string>
    <string name="data_types_description">
    1. <b>Numeric Data Types</b>\n
    \t\t\t\tInt: Used to store integers (whole numbers).\n
    \t\t\t\t\t\tage = 25\n\n

    \t\t\t\tFloat: Used to store floating-point numbers (decimal numbers).\n
    \t\t\t\t\t\tweight = 65.5\n\n

    \t\t\t\tComplex: Used to store complex numbers.\n
    \t\t\t\t\t\tz = 3 + 4j\n\n

    2. <b>Boolean Data Type</b>\n
    \t\t\t\tBool: Used to store boolean values (True or False).\n
    \t\t\t\t\t\tis_valid = True\n\n

    3. <b>String Data Type</b>\n
    \t\t\t\tStr: Used to store sequences of characters (text).\n
    \t\t\t\t\t\tname = "John Doe"\n\n

    4. <b>List Data Type</b>\n
    \t\t\t\tList: Used to store an ordered collection of items.\n
    \t\t\t\t\t\tnumbers = [1, 2, 3, 4, 5]\n\n

    5. <b>Tuple Data Type</b>\n
    \t\t\t\tTuple: Used to store an ordered collection of items (immutable).\n
    \t\t\t\t\t\tcoordinates = (10, 20)\n\n

    6. <b>Set Data Type</b>\n
    \t\t\t\tSet: Used to store an unordered collection of unique items.\n
    \t\t\t\t\t\tfruits = {"apple", "banana", "orange"}\n\n

    7. <b>Dictionary Data Type</b>\n
    \t\t\t\tDict: Used to store key-value pairs.\n
    \t\t\t\t\t\tperson = {"name": "John", "age": 30, "city": "New York"}\n
</string>
    <string name="here_are_a_few_instances_of_frequently_used_python_data_types">Here are a few instances of frequently used Python data types:</string>
    <string name="ending">And that is all the data types of python. swipe right to see the questions you might asked.</string>



    <string name="codey_examples">Examples of declaring variables:\n\nRepresents integer values, such as 1, -5, or 1000.\nage = 25\n\nRepresents a sequence of characters enclosed in single quotes (\'\') or double quotes (").\nname = "John Doe"\n\nRepresents floating-point numbers, which include decimal points, such as 3.14 or -2.5\npi = 3.14159\n\nRepresents boolean values, either True or False\nis_student = True</string>
    <string name="codey_dialogue">Python cannot function without the use of variables so let’s read the different classifications and rules of Python variables!\n\nVariables\n\nVariables are used to store data values that can be accessed and manipulated throughout the code. They act as placeholders or containers for storing different types of information such as numbers, strings, lists, or objects.\n\nCodey: Python has no command for declaring a variable, it is only created the moment that you first assign a value to it!\n\nExamples of declaring variables include:\n\nRepresents integer values, such as 1, -5, or 1000.\nage = 25\n\nRepresents a sequence of characters enclosed in single quotes (\'\') or double quotes (").\nname = "John Doe"\n\nRepresents floating-point numbers, which include decimal points, such as 3.14 or -2.5\npi = 3.14159\n\nRepresents boolean values, either True or False\nis_student = True</string>


</resources>