<resources>
    <string name="app_name">Care_Prototype_01</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="codey_image">codey_image</string>
    <string name="java_button">java_button</string>
    <string name="c_button">c_button</string>
    <string name="python_button">python_button</string>
    <!-- Strings used for fragments for navigation -->


    <string name="_1_introduction">1.Introduction</string>
    <string name="_2_syntax">2.Syntax</string>
    <string name="_3_comments">3.Comments</string>
    <string name="_4_variables">4.Variables</string>
    <string name="_5_inputs">5.Inputs</string>
    <string name="_6_data_types">6.Data Types</string>
    <string name="_7_operators">7.Operators</string>
    <string name="_8_conditional_statements">8.Conditional Statements</string>
    <string name="_9_looping_statements">9.Looping Statements</string>
    <string name="_10_arrays">10.Arrays</string>
    <string name="introductions">Introduction</string>
    <string name="codey_s_trivia_sentence">Codey\'s Trivia Sentence</string>
    <string name="let_s_start_the_introduction_of_java_lesson_feel_free_to_ask_questions_or_request_clarification_at_the_end_of_the_discussion">Let’s start the Introduction of Java lesson. Feel free to ask questions or request clarification at the end of the discussion!</string>
    <string name="java">JAVA</string>
    <string name="here_s_a_quick_overview_of_some_key_concepts_in_java">Here\'s a quick overview of some key concepts in Java:</string>
    <string name="platform_independence_java_is_a_write_once_run_anywhere_language_this_means_that_once_you_write_a_java_program_you_can_run_it_on_any_platform_that_has_a_java_virtual_machine_jvm_the_jvm_acts_as_an_interpreter_allowing_the_java_code_to_be_executed_on_different_operating_systems">• Platform Independence: Java is a write once, run anywhere language. This means that once you write a Java program, you can run it on any platform that has a Java Virtual Machine (JVM). The JVM acts as an interpreter, allowing the Java code to be executed on different operating systems.</string>
    <string name="object_oriented_programming_java_is_an_object_oriented_programming_oop_language_this_means_that_it_revolves_around_the_concept_of_objects_which_are_instances_of_classes_objects_have_attributes_variables_and_behavior_methods_and_they_interact_with_each_other_through_method_calls">•\tObject-Oriented Programming: Java is an object-oriented programming (OOP) language. This means that it revolves around the concept of objects, which are instances of classes. Objects have attributes (variables) and behavior (methods), and they interact with each other through method calls.</string>
    <string name="syntax_java_has_a_syntax_similar_to_other_programming_languages_like_c_and_c_it_uses_semicolons_to_end_statements_and_curly_braces_to_define_code_blocks_the_code_is_organized_into_classes_and_each_class_can_have_methods_and_variables">•\tSyntax: Java has a syntax similar to other programming languages like C and C++. It uses semicolons to end statements and curly braces to define code blocks. The code is organized into classes, and each class can have methods and variables.</string>
    <string name="garbage_collection_java_has_automatic_memory_management_through_a_process_called_garbage_collection_it_takes_care_of_allocating_and_deallocating_memory_for_objects_so_developers_don_t_have_to_explicitly_manage_memory_resources_this_helps_in_preventing_memory_leaks_and_makes_java_programs_more_robust">•\tGarbage Collection: Java has automatic memory management through a process called garbage collection. It takes care of allocating and deallocating memory for objects, so developers don\'t have to explicitly manage memory resources. This helps in preventing memory leaks and makes Java programs more robust.</string>
    <string name="standard_library_java_provides_a_rich_set_of_libraries_and_apis_application_programming_interfaces_that_simplify_common_programming_tasks_these_libraries_cover_areas_such_as_input_output_networking_data_structures_graphics_and_more_they_save_developers_time_and_effort_by_providing_pre_built_functionality">•\tStandard Library: Java provides a rich set of libraries and APIs (Application Programming Interfaces) that simplify common programming tasks. These libraries cover areas such as input/output, networking, data structures, graphics, and more. They save developers time and effort by providing pre-built functionality.</string>
    <string name="exception_handling_java_has_a_built_in_exception_handling_mechanism_that_allows_you_to_catch_and_handle_errors_and_exceptional_situations_in_your_code_this_helps_in_writing_more_reliable_and_robust_programs_by_gracefully_handling_unexpected_situations">•\tException Handling: Java has a built-in exception handling mechanism that allows you to catch and handle errors and exceptional situations in your code. This helps in writing more reliable and robust programs by gracefully handling unexpected situations.</string>
    <string name="questions_you_might_asked">Questions you might asked.</string>
    <string name="is_java_a_programming_or_scripting_language">Is Java a programming or scripting language?</string>
    <string name="what_makes_java_so_unique">What makes Java so unique?</string>
    <string name="what_makes_java_different_to_other_languages">What makes JAVA different to other languages?</string>


    <string name="Variables"><b>String</b> - stores text, such as "HelloWorld". Double quotes are used to enclose string values.\n<b>Ex. String myText = "Hello";\n\n</b><b>int</b> - stores integers or whole numbers, without decimals, such as 246 or -246.\n<b>Ex.<b>int</b> myNum = 5;\n</b>\n<b>float</b> - stores floating point numbers, with decimals, such as 3.99 or -3.99.\n<b>Ex. float myFloatNum = 5.99f;\n\n</b><b>char</b> - stores single characters, such as \'a\' or \'B\'. Single quotes are used to enclose char values.\n<b>Ex char myLetter = \'D\';\n\n</b><b>boolean</b> - stores values with two states: true or false.\n<b>Ex. boolean myBoolean = true;</b></string>
    <string name="variables">Variables</string>
    <string name="variables_1">Variables</string>
    <string name="variable_types">Variable Types:</string>
    <string name="a_variable_is_a_named_storage_location_that_holds_a_value_of_a_particular_type_it_allows_you_to_store_and_manipulate_data_within_a_program_before_using_a_variable_you_need_to_declare_it_specifying_its_type_and_name">A variable is a named storage location that holds a value of a particular type. It allows you to store and manipulate data within a program. Before using a variable, you need to declare it, specifying its type and name.</string>
    <string name="codey_sentence_insert_here">[Codey sentence insert here]</string>
    <string name="refers_to_the_process_of_accepting_data_or_information_from_a_user_during_the_execution_of_a_java_program_it_allows_users_to_interact_with_a_program">refers to the process of accepting data or information from a user during the execution of a Java program. It allows users to interact with a program.</string>
    <string name="the_java_util_package_contains_the_scanner_class_which_is_used_to_gather_user_input">The java.util package contains the Scanner class, which is used to gather user input.</string>
    <string name="you_can_utilize_any_of_the_various_methods_listed_in_the_scanner_class_documentation_by_creating_an_object_of_the_class_and_using_it_the_nextline_method_which_is_used_to_read_strings_will_be_utilized_in_our_example">You can utilize any of the various methods listed in the Scanner class documentation by creating an object of the class and using it. The nextLine() method, which is used to read strings, will be utilized in our example:</string>
    <string name="java_user_input">Java User Input</string>
    <string name="let_s_start_the_inputs_of_java_lesson">Let\'s start the Inputs of Java lesson.</string>
    <string name="inputs">Inputs</string>
    <string name="welcome_to_care_i_m_codey_your_virtual_assistant_app_guide">Welcome to CARE! I\'m Codey, your virtual assistant app guide!</string>
    <string name="to_continue_kindly_choose_your_desired_programming_language_that_you_want_to_learn_and_let_s_get_started">To continue, kindly choose your desired programming language that you want to learn and let\'s get started!</string>

    <string name="Scanner">import java.util.Scanner; // import the Scanner class\n\n
                            class Main {\n
                              \tpublic static void main(String[] args) {\n
                                \t\tScanner myObj = new Scanner(System.in);\n
                                \t\tString userName;\n\n

                                \t\t// Enter username and press Enter\n
                                \t\tSystem.out.println("Enter username");\n
                                \t\tuserName = myObj.nextLine();\n\n

                                \t\tSystem.out.println("Username is: " + userName);\n
                              }\n
                            }
</string>
    <string name="input_methods">
        Method				\t\t\t\t\t\t\tDescription\n\n

        nextBoolean()	    \tReads a boolean value from the user\n
        nextByte()	        \t\t\t\tReads a byte value from the user\n
        nextDouble()	    \t\t\tReads a double value from the user\n
        nextFloat()	        \t\t\tReads a float value from the user\n
        nextInt()	        \t\t\tReads a int value from the user\n
        nextLine()	        \t\t\tReads a String value from the user\n
        nextLong()	        \t\t\tReads a long value from the user\n
        nextShort()	        \t\t\tReads a short value from the user\n

    </string>
    <string name="the_nextline_method_which_is_used_to_read_strings_was_utilized_in_the_example_above_look_at_the_table_below_these_are_other_types_of_inputs_to_read">The nextLine() method, which is used to read strings, was utilized in the example above. Look at the table below; these are other types of inputs to read.</string>
    <string name="SetGuideline">Let’s now start studying the different syntax inside Java!</string>
    <string name="syntaxtIntro">The set of guidelines governing the creation and interpretation of a Java program is known as the Java syntax. When creating a Java program, take into consideration that every code has its own identifier and no one can make its own syntax code.</string>
    <string name="identifier">Identifier</string>
    <string name="identifierDefinition">An identifier is the name of an element in the code. There are certain standard naming conventions to follow when selecting names for elements.</string>
    <string name="dyk">Did you know?</string>
    <string name="TypesOfIdentifier">These are some of the identifiers in Java:</string>
    <string name="TypesOFIdentifier"><b>Class Identifiers:\n</b>
                                        class Car {\n \t// class body\n}\n\n<b>Constant Identifiers (Final Variables):</b>\nfinal int MAX_VALUE = 100;\nfinal double PI = 3.14159;\n\n<b>Object Identifiers:</b>
                                        \nCar myCar = new Car();\n\n<b>Parameter Identifiers:</b>
                                        \npublic void printName(String name) {\n \t// method body\n}\n\n<b>Package Identifiers:</b>
                                        \npackage com.example.mypackage;\n\n<b>Enum Identifiers:</b>
                                        \nenum DayOfWeek {\n MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY \n}
    </string>
    <string name="firstjavaprogram">public class Main {\n
                                  \tpublic static void main(String[] args) {\n
                                    \t\tSystem.out.println("Hello World");\n
                                  \t}\n
                                }
</string>
    <string name="SynExplainMethods"><b>class method</b> - A class is a blueprint for creating objects. It defines the properties and behaviors that an object of that class will possess. Each program must have a class name and should always start with an uppercase first letter and must match the file name of the program.
        \n<b>main method</b> - Each program processing starts from the main() method which is a mandatory part of every Java program. All method names should start with a lowercase letter. If several words are used to form the name of the method, then each inner word’s first letter should be in uppercase.
        \n<b>System.out.println</b> - It is use to print and display an output to the user.
</string>
    <string name="now_why_don_t_we_create_our_first_java_program_shall_we_i_ll_explain_further_the_meaning_of_each_code">Now, why don’t we create our first Java program, shall we? I’ll explain further the meaning of each code.</string>
    <string name="guess_right">Now let’s print the output of the program! I’m very excited to see the result, did you guessed it right?</string>
    <string name="answer">Answer</string>
    <string name="SyntaxSystem"><b>System</b> is a built-in Java class that contains useful members, such as out, which is short for \"output\". The println() method, short for \"print line\", is used to print a value to the screen (or a file).\nLastly, each code statement must end with a semicolon (;).</string>
    <string name="great_you_guessed_it_right_the_output_to_the_code_is_hello_world_it_s_fun_learning_java_isn_t_it_let_s_keep_learning">Great! You guessed it right! The output to the code is “Hello World”. It’s fun learning Java, isn’t it? Let’s keep learning!</string>
    <string name="always_remember_that_the_curly_braces_marks_the_beginning_and_the_end_of_a_block_of_code">Always remember that the curly braces {} marks the beginning and the end of a block of code.</string>
    <string name="what_will_happen_if_i_declare_two_variables_with_same_spelling_but_different_values">What will happen if I declare two variables with same spelling but different values?</string>
    <string name="can_i_make_a_program_without_using_an_identifier">Can I make a program without using an identifier?</string>
    <string name="what_is_the_difference_of_identifier_to_keyword">What is the difference of identifier to keyword?</string>
    <string name="javadoc">* Calculates and returns the square of a given number. \n* \n* @param number the input number \n* @return the square of the number \n* @throws IllegalArgumentException if the number is negative \n*/ \npublic int calculateNum(int digit) { \n\tif (digit != 0) { \n\t\tthrow new IllegalArgumentException(\"Error! Number must be equal to 0\"); \n\t}\n return number * number; \n}</string>
    <string name="javaintrodullets">• Java works on different operating platforms. (Windows, Mac, Linux, Raspberry Pi, etc.) \n• Java is one of the most popular programming languages in the world. \n• Java is open-source, free, simple, and easy to learn and use that everyone can enjoy developing their own software. \n• Java has a large demand of jobs in the current market.</string>
    <string name="have_you_ever_wonder_if_you_can_put_a_text_in_java_that_looks_like_a_note_to_identify_what_kind_of_code_is_it_without_being_interpreted_by_the_compiler_worry_no_more_because_i_introduce_to_you_the_java_comments_let_s_see_what_we_ve_got_here">Have you ever wonder if you can put a text in Java that looks like a note to identify what kind of code is it without being interpreted by the compiler? Worry no more because I introduce to you the Java Comments! Let’s see what we’ve got here!</string>
    <string name="in_java_comments_are_non_executable_lines_of_code_that_provide_explanations_annotations_or_disable_codes_temporarily_they_are_essential_for_code_documentation_readability_and_collaboration_there_are_three_types_of_comments_in_java_single_line_comments_multi_line_comments_and_javadoc_comments">In Java, comments are non-executable lines of code that provide explanations, annotations, or disable codes temporarily. They are essential for code documentation, readability, and collaboration. There are three types of comments in Java: single-line comments, multi-line comments, and Javadoc comments.</string>
    <string name="single_line_comments">Single-Line Comments</string>
    <string name="here_is_an_example_of_a_single_line_comment">Here is an example of a single-line comment:</string>
    <string name="this_comment_just_has_one_line">//This comment just has one line.</string>
    <string name="multi_line_comments">Multi-Line Comments</string>
    <string name="javadoc_comments">Javadoc comments</string>
    <string name="a_single_line_of_code_can_be_transformed_into_a_comment_to_provide_a_brief_explanation_it_is_considered_a_comment_and_will_not_be_processed_if_text_is_added_to_a_line_after">A single line of code can be transformed into a comment to provide a brief explanation. It is considered a comment and will not be processed if text is added to a line after //.</string>
    <string name="a_multi_line_comments_can_occupy_at_least_2_lines_of_code_and_more_that_depends_to_the_preference_of_the_programmer_or_developer_it_can_also_disregard_codes_and_transform_into_comments_by_clicking_ctrl_on_the_keyboard_and_simultaneously">A multi-line comments can occupy at least 2 lines of code and more that depends to the preference of the programmer or developer. It can also disregard codes and transform into comments by clicking “ctrl” on the keyboard and “/” simultaneously.</string>
    <string name="here_is_an_example_of_a_multi_line_comment">Here is an example of a multi-line comment:</string>
    <string name="javadoc_comments_usually_begin_with_and_end_with_and_can_include_various_tags_and_annotations_that_provides_detailed_information_about_the_documented_elements">Javadoc comments usually begin with “/**” and end with “*/” and can include various tags and annotations that provides detailed information about the documented elements.</string>
    <string name="this_comment_consists_of_several_lines_it_may_vary_according_to_the_preference_of_the_developer">/* This comment consists of several lines. It may vary according to the preference of the developer. */</string>
    <string name="a_javadoc_comments_are_special_type_of_comments_that_is_used_in_java_to_generate_automatic_documentation_it_is_usually_written_in_a_specific_format_that_can_be_used_to_document_program_elements_such_as_classes_interfaces_methods_fields_etc_this_is_then_processed_by_the_javadoc_tool_which_later_on_creates_html_based_documentation_files">A Javadoc comments are special type of comments that is used in Java to generate automatic documentation. It is usually written in a specific format that can be used to document program elements such as classes, interfaces, methods, fields, etc. This is then processed by the Javadoc tool, which later on creates HTML-based documentation files.</string>
    <string name="here_is_an_example_of_a_javadoc_comment">Here is an example of a javadoc comment:</string>
    <string name="always_remember_that_it_is_a_good_practice_to_include_comments_in_the_code_to_improve_its_readability_and_maintainability_as_well_as_easily_identify_the_errors_when_the_program_stops_producing_output_and_needs_to_be_debug_by_the_developer">Always remember that it is a good practice to include comments in the code to improve its readability and maintainability as well as easily identify the errors when the program stops producing output and needs to be debug by the developer!</string>
    <string name="what_is_the_purpose_of_comments_in_java">What is the purpose of comments in Java?</string>
    <string name="what_is_the_difference_of_a_single_line_vs_multi_line_comment">What is the difference of a single-line vs multi-line comment?</string>
    <string name="can_comments_slow_down_a_program_s_execution">Can comments slow down a program’s execution?</string>
    <string name="operators"><b>Comparison operators:</b>\n
•	Less than:   \u003c \n
•	Less than or equal to:   \u003c= \n
•	Greater than: > \n
•	Greater than or equal to: >= \n
•	Equal to:  == \n
•	Not Equal to:  != \n
\n
<b>Logical operators:</b>\n
•	logical AND: &amp;&amp;\n
•	logical OR: ||\n
•	logical NOT: !\n
</string>
    <string name="followingcondition">•	Use <b>if</b> to specify a block of code to be executed, if a specified condition is true\n
•	Use <b>else</b> to specify a block of code to be executed, if the same condition is false\n
•	Use <b>else if</b> to specify a new condition to test, if the first condition is false\n
•	Use <b>Nested if</b> statements to specify multiple conditions and control the flow of your program.\n
</string>
    <string name="if_simple"> <b>Here\'s the basic syntax:</b>\n

if (condition) {\n
  \t// block of code to be executed if the condition is true\n
}
        </string>
    <string name="ifexample1"><b><i>Here\'s and example for if statements:</i></b>\nif (20 > 18) {\n\tSystem.out.println("20 is greater than 18");\n}\n\n<b>Output:</b>\n20 is greater than 18\n\n<b>Example explained</b>\nIn the example above, we test two values to find out if 20 is greater than 18. If the condition is true, print some text.\n\n<b>We can also test variables:</b>\n<b>Example:</b>\nint x = 20;\nint y = 18;\nif (x > y) {\n\tSystem.out.println("x is greater than y");\n}\n\n<b>Output:</b>\nx is greater than y\n\n<b>Example explained</b>\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that "x is greater than y".
</string>
    <string name="elseExample"><b>Here\&#39;s the basic syntax:</b>
        \nif (condition) { \n
        \t// block of code to be executed if the condition is true \n
        } else { \n
        \t// block of code to be executed if the condition is false \n
        } \n\n
        <i>it is a construct that enables you to specify what should happen when the condition of the if statement is false.</i> \n\n
        <b>Example:</b> \n
        int x = 5; \n
        if (x &gt; 0) {\n
        \tSystem.out.println(\&quot;x is positive\&quot;); \n
        } else { \n
        \tSystem.out.println(\&quot;x is not positive\&quot;); \n} \n\n
        <b>Output:</b> \n
        x is positive \n\n
        <b>Example explained:</b> \n
        In this example, if the condition x &gt; 0 is true, \&quot;x is positive\&quot; is printed. Otherwise, \&quot;x is not positive\&quot; is printed.</string>
    <string name="elseif"><b>Here\&#39;s the basic syntax:</b> \nif (condition1) { \n
        \t// block of code to be executed if condition1 is true \n
        } else if (condition2) { \n
        \t// block of code to be executed if the condition1 is false and condition2 is true \n
        } else { \n
        \t// block of code to be executed if the condition1 is false and condition2 is false \n
        } \n\n
        <i>You can have multiple else if statements to check additional conditions in a sequential manner.</i> \n\n
        <b>Example:</b> \n
        int x = 5; \n
        if (x &gt; 0) { \n
        \tSystem.out.println(\&quot;x is positive\&quot;); \n
        } else if (x &lt; 0) { \n
        \tSystem.out.println(\&quot;x is negative\&quot;); \n
        } else { \n
        \tSystem.out.println(\&quot;x is zero\&quot;); \n
        } \n\n
        <b>Output:</b> \n
        x is positive \n\n
        <b>Example explained:</b> \n
        In this example, if x is greater than 0, \&quot;x is positive\&quot; is printed. If x is less than 0, \&quot;x is negative\&quot; is printed. Otherwise, \&quot;x is zero\&quot; is printed.</string>
    <string name="nestedif"><b>Here\&#39;s the basic syntax:</b> \n
        if (condition1) { \n
        \t// code to execute if condition1 is true \n
        \tif (condition2) { \n
        \t// code to execute if both condition1 and condition2 are true \n
        } else { \n
        \t// code to execute if condition1 is true but condition2 is false } \n
        } else { \n
        \t// code to execute if condition1 is false \n
        } \n\n<i>It allows you to create more complex conditional structures by checking multiple conditions and executing different blocks of code based on those conditions.</i> \n\n
        <b>Example:</b> \n
        int age = 20; \n
        boolean hasLicense = true; \n
        if (age &gt;= 18) { \n
        \tSystem.out.println(\&quot;You are eligible to apply for a driving license.\&quot;); \n
        \t\tif (hasLicense) { \n
        \t\t\tSystem.out.println(\&quot;You already have a driving license.\&quot;); \n
        \t\t} else { \n
        \t\t\tSystem.out.println(\&quot;You don\&#39;t have a driving license yet.\&quot;); \n
        \t}\n
        } else { \n
        \tSystem.out.println(\&quot;You are not eligible to apply for a driving license.\&quot;); \n
        } \n\n<b>Output:</b> \nYou are eligible to apply for a driving license. \nYou already have a driving license. \n\n<b>Example explained:</b>\nIn this example, we have a nested if statement. The outer if statement checks if the age is greater than or equal to 18. If the condition is true, it prints the message \&quot;You are eligible to apply for a driving license.\&quot; Then, it enters the inner if statement. The inner if statement checks if the boolean variable hasLicense is true or false. If hasLicense is true, it prints the message \&quot;You already have a driving license.\&quot; If hasLicense is false, it prints the message \&quot;You don\&#39;t have a driving license yet.\&quot; If the age condition in the outer if statement is false, it skips the inner if statement and executes the code in the else block of the outer if statement, printing the message \&quot;You are not eligible to apply for a driving license.\&quot;</string>
    <string name="three_primary_loop">• The <b>for</b> loop is commonly used when you know the number of iterations in advance. \n
        • The <b>while</b> loop is suitable when the number of iterations is not known in advance, and the loop continues until a specified condition becomes false. \n
        • The <b>do-while</b> loop is similar to the while loop, but it guarantees that the loop body is executed at least once. \n
        • The <b>foreach</b> loop is specifically designed for iterating over elements of an array or a collection.</string>
    <string name="forloop"><b>Here\'s the basic syntax:</b> \n
        for (initialization; condition; iteration) {\n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="iterate"><b>Example:</b> \n
        for (int i = 1; i &lt;= 5; i++) { \n
        \tSystem.out.println(\&quot;Iteration: \&quot; + i);\n
        }\n
        \n
        <b>Output:</b> \n
        Iteration: 1 \n
        Iteration: 2 \n
        Iteration: 3 \n
        Iteration: 4 \n
        Iteration: 5 \n\n
        <b>Example explained:</b>
        In this example, the for loop iterates from i = 1 to i \u003c= 5, incrementing i by 1 after each iteration. The loop body consists of a single statement that prints the iteration number.</string>
    <string name="while_loop"><b>Here\'s the basic syntax:</b> \n(condition) {\n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="whileloopex"><b>Example:</b> \n
        int count = 1; \n
        while (count &lt;= 5) { \n
        \tSystem.out.println(\&quot;Count: \&quot; + count);\n
        \tcount++; \n
        }\n
        \n
        <b>Output:</b> \n
        Count: 1 \n
        Count: 2 \n
        Count: 3 \n
        Count: 4 \n
        Count: 5 \n
        \n
        <b>Example explained:</b> \n
        the while loop starts with the condition count &lt;= 5. The loop body will execute as long as the condition is true. Inside the loop, the current value of count is printed using System.out.println(), and then count is incremented by 1 (count++). This ensures that the loop will eventually terminate when count becomes greater than 5.</string>
    <string name="do_while"><b>Here\'s the basic syntax:</b> \n
        do { \n
        \t// code to be executed in each iteration \n
        }while (condition</string>
    <string name="do_while_ex"><b>Example:</b> \n
        import java.util.Scanner; \n\n
        public class DoWhileLoopExample { \n
        \tpublic static void main(String[] args) { \n
        \t\tScanner scanner = new Scanner(System.in); \n
        \t\tint number; \n\n
        \t\tdo { \n
        \t\t\tSystem.out.print(\&quot;Enter a positive number (0 to exit): \&quot;); \n
        \t\t\tnumber = scanner.nextInt(); \n\n
        \t\t\tif (number &gt; 0) { \n
        \t\t\t\tSystem.out.println(\&quot;You entered: \&quot; + number); \n
        \t\t\t} else { \n
        \t\t\t\tSystem.out.println(\&quot;Invalid number!\&quot;); \n
        \t\t} \n
        \t} while (number != 0); \n\n
        \t\tSystem.out.println(\&quot;Loop exited. Goodbye!\&quot;); \n
        \t\tscanner.close(); \n
        \t} \n
        } \n\n
        <b>Output:</b> \n
        Enter a positive number (0 to exit): 5 \n
        You entered: 5 \n
        Enter a positive number (0 to exit): -2 \n
        Invalid number! \n
        Enter a positive number (0 to exit): 10 \n
        You entered: 10 \n
        Enter a positive number (0 to exit): 0 \n
        Loop exited. Goodbye! \n\n
        <b>Example explained:</b> \n
        We use a do-while loop to repeatedly prompt the user to enter a positive number. The loop continues until the user enters 0 to exit the program.</string>
    <string name="foreach"><b>Here\'s the basic syntax: </b>\n
        for (elementDataType element : collection) { \n
        \t// code to be executed in each iteration \n
        }</string>
    <string name="foreach_example"><b>Example:</b> \n
        int[] numbers = {1, 2, 3, 4, 5}; \n
        for (int number : numbers) { \n
        \tSystem.out.println(number); \n
        } \n\n
        <b>Output:</b> \n
        1 \n
        2 \n
        3 \n
        4 \n
        5 \n
        \n
        <b>Example explained:</b> \n
        We have an array called numbers containing integers. The foreach loop iterates over each element in the array, assigning it to the variable number. The loop body then executes, which in this case simply prints the value of number using System.out.println().</string>
    <string name="TwoTypesOfDataTypes"><b><i>Primitive data types include the following:</i></b> \n
        byte, short, int, long, float, double, boolean, and char. \n
        <b><i>Non-Primitive data types include the following:</i></b> \n
        Strings, Arrays, Object, Interface, and Classes.</string>
    <string name="DataTypesTwoCategories"><b>Primitive Data Types:</b>\n
        <i>int: Used to store whole numbers.</i> \n
        int myNumber = 42; \n\n
        <i>double: Used to store decimal numbers.</i> \n
        double myDecimalNumber = 3.14159; \n\n
        <i>boolean: Used to store true/false values.</i> \n
        boolean isTrue = true; \n\n
        <i>char: Used to store a single character.</i>\n
        char myChar = \&#39;A\&#39;; \n\n
        <b>Reference Data Types:</b>\n
        <i>String: Used to store sequences of characters. </i>\n
        String myName = \&quot;John Doe\&quot;; \n\n
        <i>Array: Used to store a collection of elements of the same type. </i>\n
        int[] numbers = {1, 2, 3, 4, 5}; \n\n
        <i>Object: Used to store instances of user-defined classes.</i> \n
        Date today = new Date(); \n\n
        <i>Class: Used to store the definition of a class. </i>\n
        Class&lt;?&gt; myClass = MyClass.class; \n\n
        <i>Interface: Used to store the definition of an interface. </i>\n
        interface MyInterface { \n
        \tvoid myMethod(); \n
        }</string>
</resources>